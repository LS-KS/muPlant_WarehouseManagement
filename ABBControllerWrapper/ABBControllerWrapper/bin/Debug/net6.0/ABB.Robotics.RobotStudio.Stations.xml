<?xml version="1.0" encoding="utf-8"?>
<doc>
  <assembly>
    <name>ABB.Robotics.RobotStudio.Stations</name>
  </assembly>
  <members>
    <member name="T:ABB.Robotics.RobotStudio.Stations.Asset">
      <summary>
            An asset is a piece of binary content that is embedded in a Smart Component.
            RobotStudio uses assets to store string resources and the Code Behind assembly.
            Any kind of binary data that is needed by the smart component can be added as an asset.
            </summary>
    </member>
    <member name="M:ABB.Robotics.RobotStudio.Stations.Asset.#ctor"></member>
    <member name="P:ABB.Robotics.RobotStudio.Stations.Asset.AllowSave"></member>
    <member name="M:ABB.Robotics.RobotStudio.Stations.Asset.GetData">
      <summary>
            Gets the binary data content of this asset.
            </summary>
      <returns>
            An array of <see cref="T:System.Byte" /> that represents the binary data content of this asset.
            </returns>
    </member>
    <member name="P:ABB.Robotics.RobotStudio.Stations.Asset.OriginalSource"></member>
    <member name="P:ABB.Robotics.RobotStudio.Stations.Asset.Parent"></member>
    <member name="M:ABB.Robotics.RobotStudio.Stations.Asset.SetData(System.Byte[])">
      <summary>
            Sets the binary data content of this asset.
            </summary>
      <param name="data">An array of <see cref="T:System.Byte" /> that represents the binary data content of this asset.</param>
    </member>
    <member name="T:ABB.Robotics.RobotStudio.Stations.AssetCollection">
      <summary>
            Represents a collection of <see cref="T:ABB.Robotics.RobotStudio.Stations.Asset" />s contained by a <see cref="T:ABB.Robotics.RobotStudio.Stations.SmartComponent" />.
            </summary>
    </member>
    <member name="M:ABB.Robotics.RobotStudio.Stations.AssetCollection.Add(ABB.Robotics.RobotStudio.Stations.Asset)">
      <summary>
            Adds an <see cref="T:ABB.Robotics.RobotStudio.Stations.Asset" /> to the collection.
            </summary>
      <param name="asset">The asset to add to the collection.</param>
    </member>
    <member name="E:ABB.Robotics.RobotStudio.Stations.AssetCollection.Changed">
      <summary>
            Raised when an item is added to or removed from the collection
            </summary>
    </member>
    <member name="M:ABB.Robotics.RobotStudio.Stations.AssetCollection.Contains(ABB.Robotics.RobotStudio.Stations.Asset)"></member>
    <member name="M:ABB.Robotics.RobotStudio.Stations.AssetCollection.Contains(System.String)"></member>
    <member name="M:ABB.Robotics.RobotStudio.Stations.AssetCollection.CopyTo(ABB.Robotics.RobotStudio.Stations.Asset[],System.Int32)"></member>
    <member name="M:ABB.Robotics.RobotStudio.Stations.AssetCollection.CopyTo(System.Array,System.Int32)"></member>
    <member name="P:ABB.Robotics.RobotStudio.Stations.AssetCollection.Count"></member>
    <member name="M:ABB.Robotics.RobotStudio.Stations.AssetCollection.GetEnumerator"></member>
    <member name="P:ABB.Robotics.RobotStudio.Stations.AssetCollection.IsSynchronized"></member>
    <member name="P:ABB.Robotics.RobotStudio.Stations.AssetCollection.Item(System.Int32)"></member>
    <member name="P:ABB.Robotics.RobotStudio.Stations.AssetCollection.Parent"></member>
    <member name="M:ABB.Robotics.RobotStudio.Stations.AssetCollection.Remove(ABB.Robotics.RobotStudio.Stations.Asset)">
      <summary>
            Removes an <see cref="T:ABB.Robotics.RobotStudio.Stations.Asset" /> from the the collection.
            </summary>
      <param name="asset">The asset to remove from the collection.</param>
    </member>
    <member name="P:ABB.Robotics.RobotStudio.Stations.AssetCollection.SyncRoot"></member>
    <member name="M:ABB.Robotics.RobotStudio.Stations.AssetCollection.ToArray"></member>
    <member name="M:ABB.Robotics.RobotStudio.Stations.AssetCollection.TryGetAsset(System.String,ABB.Robotics.RobotStudio.Stations.Asset@)"></member>
    <member name="T:ABB.Robotics.RobotStudio.Stations.Attachment">
      <summary>
            You can attach an object (child) to another object (parent).
            Attachments can be created on part level and on mechanism level.
            When an object has been attached to a parent, moving the parent also moves the child.
            One of the most common attachments is to attach a tool to a robot
            </summary>
    </member>
    <member name="P:ABB.Robotics.RobotStudio.Stations.Attachment.AttachmentChild">
      <summary>
            Gets the ProjectObject that is the child of this Attachment.
            </summary>
    </member>
    <member name="P:ABB.Robotics.RobotStudio.Stations.Attachment.AttachmentParent">
      <summary>
            Gets the ProjectObject that is the parent of this Attachment.
            </summary>
    </member>
    <member name="P:ABB.Robotics.RobotStudio.Stations.Attachment.Offset">
      <summary>
            Gets or sets the Offset of the Attachment, e.g the relative transform from parent to child.
            </summary>
    </member>
    <member name="M:ABB.Robotics.RobotStudio.Stations.Attachment.ToString"></member>
    <member name="P:ABB.Robotics.RobotStudio.Stations.Attachment.Transform"></member>
    <member name="T:ABB.Robotics.RobotStudio.Stations.AttachmentCollection">
      <summary>
            A Collection of Attchment objects.
            </summary>
    </member>
    <member name="M:ABB.Robotics.RobotStudio.Stations.AttachmentCollection.Add(ABB.Robotics.RobotStudio.Stations.Attachment)">
      <summary>
            Used when moving <see cref="T:ABB.Robotics.RobotStudio.Stations.Attachment" />s from one station to another.
            If you want to add an attachment within a station use <b>Attach</b> method on the <b>GraphicComponentGroup</b> , <b>Flange</b>, <b>Part</b> or <b>ToolDataInfo</b> class instead.
            </summary>
    </member>
    <member name="M:ABB.Robotics.RobotStudio.Stations.AttachmentCollection.Contains(ABB.Robotics.RobotStudio.Stations.Attachment)"></member>
    <member name="M:ABB.Robotics.RobotStudio.Stations.AttachmentCollection.CopyTo(ABB.Robotics.RobotStudio.Stations.Attachment[],System.Int32)"></member>
    <member name="M:ABB.Robotics.RobotStudio.Stations.AttachmentCollection.CopyTo(System.Array,System.Int32)"></member>
    <member name="P:ABB.Robotics.RobotStudio.Stations.AttachmentCollection.Count"></member>
    <member name="M:ABB.Robotics.RobotStudio.Stations.AttachmentCollection.GetEnumerator"></member>
    <member name="P:ABB.Robotics.RobotStudio.Stations.AttachmentCollection.IsSynchronized"></member>
    <member name="P:ABB.Robotics.RobotStudio.Stations.AttachmentCollection.Item(System.Int32)"></member>
    <member name="P:ABB.Robotics.RobotStudio.Stations.AttachmentCollection.Parent"></member>
    <member name="M:ABB.Robotics.RobotStudio.Stations.AttachmentCollection.Remove(ABB.Robotics.RobotStudio.Stations.Attachment)">
      <summary>
            Used when moving Attachments from one station to another.
            If you want to remove an attachment within a station use <b>Detach</b> method on the <b>GraphicComponentGroup</b>, <b>Flange</b>, <b>Part</b> or <b>ToolDataInfo</b> class instead.
            </summary>
    </member>
    <member name="P:ABB.Robotics.RobotStudio.Stations.AttachmentCollection.SyncRoot"></member>
    <member name="M:ABB.Robotics.RobotStudio.Stations.AttachmentCollection.ToArray"></member>
    <member name="T:ABB.Robotics.RobotStudio.Stations.AxisDirection"></member>
    <member name="F:ABB.Robotics.RobotStudio.Stations.AxisDirection.Undefined"></member>
    <member name="F:ABB.Robotics.RobotStudio.Stations.AxisDirection.PositiveX"></member>
    <member name="F:ABB.Robotics.RobotStudio.Stations.AxisDirection.PositiveY"></member>
    <member name="F:ABB.Robotics.RobotStudio.Stations.AxisDirection.PositiveZ"></member>
    <member name="F:ABB.Robotics.RobotStudio.Stations.AxisDirection.NegativeX"></member>
    <member name="F:ABB.Robotics.RobotStudio.Stations.AxisDirection.NegativeY"></member>
    <member name="F:ABB.Robotics.RobotStudio.Stations.AxisDirection.NegativeZ"></member>
    <member name="T:ABB.Robotics.RobotStudio.Stations.BlendMode">
      <summary>
            Specifies how a texture is blended with the underlying color
            </summary>
    </member>
    <member name="F:ABB.Robotics.RobotStudio.Stations.BlendMode.Disable">
      <summary>
            No blend, only the texture is displayed.
            </summary>
    </member>
    <member name="F:ABB.Robotics.RobotStudio.Stations.BlendMode.Modulate">
      <summary>
            The texture color is blended with the color.
            </summary>
    </member>
    <member name="F:ABB.Robotics.RobotStudio.Stations.BlendMode.Decal">
      <summary>
            The texture is diplayed on top of the color according to the alpha level of the texture.
            </summary>
    </member>
    <member name="T:ABB.Robotics.RobotStudio.Stations.Body">
      <summary>
            A body is typically a single 3D solid or a 2D surface, but it can also be several disjoint lumps treated as one body.
            It is the highest level object in the geometric model. Several bodies can be grouped in a <see cref="T:ABB.Robotics.RobotStudio.Stations.Part" />.<br /><img src="GeometryTopology.jpg" /></summary>
    </member>
    <member name="P:ABB.Robotics.RobotStudio.Stations.Body.BodyType">
      <summary>Returns the type of the body.</summary>
    </member>
    <member name="P:ABB.Robotics.RobotStudio.Stations.Body.CenterOfGravity">
      <summary>
            Gets the center of gravity of the body as a <see cref="T:ABB.Robotics.Math.Vector3" />.
            </summary>
    </member>
    <member name="M:ABB.Robotics.RobotStudio.Stations.Body.Check">
      <summary>Checks a body's geometry, topology, and data structure for errors.</summary>
      <returns>The numbers of errors.</returns>
    </member>
    <member name="M:ABB.Robotics.RobotStudio.Stations.Body.Check(System.String)">
      <summary>Checks a body's geometry, topology, and data structure for errors.</summary>
      <param name="logFile">Name of the logfile to be created.</param>
      <returns>The numbers of errors.</returns>
    </member>
    <member name="P:ABB.Robotics.RobotStudio.Stations.Body.Color">
      <summary>
            Gets or sets the body color in the graphics.
            </summary>
    </member>
    <member name="M:ABB.Robotics.RobotStudio.Stations.Body.Copy">
      <summary>Creates a copy of the  body.</summary>
      <returns>The copy.</returns>
    </member>
    <member name="M:ABB.Robotics.RobotStudio.Stations.Body.CreateArc(ABB.Robotics.Math.Vector3,ABB.Robotics.Math.Vector3,ABB.Robotics.Math.Vector3)">
      <summary>Creates a new <see cref="T:ABB.Robotics.RobotStudio.Stations.Body" /> consisting of one single wire.
            The wire will start at the <c>start</c> position go via the <c>circumference</c> position and end in the <c>end</c> position</summary>
      <param name="start">The start position of the arc.</param>
      <param name="end">The end position of the arc.</param>
      <param name="circumference">The via position of the arc.</param>
      <returns>The new <see cref="T:ABB.Robotics.RobotStudio.Stations.Body" />.</returns>
    </member>
    <member name="M:ABB.Robotics.RobotStudio.Stations.Body.CreateBorderAroundFace(ABB.Robotics.RobotStudio.Stations.Face)">
      <summary>Creates a new <see cref="T:ABB.Robotics.RobotStudio.Stations.Body" /> consisting of the curve at the circumfence of a <see cref="T:ABB.Robotics.RobotStudio.Stations.Face" />.</summary>
      <param name="face">Defines the face to use.</param>
      <returns>The new <see cref="T:ABB.Robotics.RobotStudio.Stations.Body" />.</returns>
    </member>
    <member name="M:ABB.Robotics.RobotStudio.Stations.Body.CreateBorderFromPoints(ABB.Robotics.RobotStudio.Stations.Body,ABB.Robotics.Math.Vector3[])">
      <summary>Creates a new <see cref="T:ABB.Robotics.RobotStudio.Stations.Body" /> consisting of the curve defined by the body and the points.</summary>
      <param name="body">Defines the body to use.</param>
      <param name="points">Defines the array of points to use.</param>
      <returns>The new <see cref="T:ABB.Robotics.RobotStudio.Stations.Body" />.</returns>
    </member>
    <member name="M:ABB.Robotics.RobotStudio.Stations.Body.CreateCircle(ABB.Robotics.Math.Matrix4,System.Double)">
      <summary>Creates a new <see cref="T:ABB.Robotics.RobotStudio.Stations.Body" /> consisting of one single circle shaped wire.</summary>
      <param name="center">A matrix that defines the center position and rotation of the circle</param>
      <param name="radius">The radius of the circle</param>
      <returns>The new <see cref="T:ABB.Robotics.RobotStudio.Stations.Body" />.</returns>
    </member>
    <member name="M:ABB.Robotics.RobotStudio.Stations.Body.CreateEllipse(ABB.Robotics.Math.Vector3,ABB.Robotics.Math.Vector3,System.Double)">
      <summary>Creates a new <see cref="T:ABB.Robotics.RobotStudio.Stations.Body" /> consisting of one single ellipse shaped wire.</summary>
      <param name="center">A position that defines the center position of the ellipse</param>
      <param name="majorAxisEnd">A position specifying the end of the major axis</param>
      <param name="minorAxisDist">The distace from the center to the minor axis, i.e. the radius of the minor axis</param>
      <returns>The new <see cref="T:ABB.Robotics.RobotStudio.Stations.Body" />.</returns>
    </member>
    <member name="M:ABB.Robotics.RobotStudio.Stations.Body.CreateEllipticArc(ABB.Robotics.Math.Vector3,ABB.Robotics.Math.Vector3,ABB.Robotics.Math.Vector3,System.Double,System.Double)">
      <summary>Creates a new <see cref="T:ABB.Robotics.RobotStudio.Stations.Body" /> consisting of one single elliptical arc shaped wire.</summary>
      <param name="center">Defines the center position of the arc.</param>
      <param name="majorAxisEnd">Defines the end position of the major axis.</param>
      <param name="minorAxisEnd">Defines the end position of the minor axis.</param>
      <param name="startAngle">Defines the start angle.</param>
      <param name="endAngle">Defines the end angle.</param>
      <returns>The new <see cref="T:ABB.Robotics.RobotStudio.Stations.Body" />.</returns>
    </member>
    <member name="M:ABB.Robotics.RobotStudio.Stations.Body.CreateFromFace(ABB.Robotics.RobotStudio.Stations.Face)">
      <summary>
            Creates a new Body consisting only of a copy of the given Face
            </summary>
    </member>
    <member name="M:ABB.Robotics.RobotStudio.Stations.Body.CreateIntersectionCurve(ABB.Robotics.RobotStudio.Stations.Body)"></member>
    <member name="M:ABB.Robotics.RobotStudio.Stations.Body.CreateIntersectionCurve(ABB.Robotics.RobotStudio.Stations.Body,ABB.Robotics.RobotStudio.Stations.Body)">
      <summary>Creates a new <see cref="T:ABB.Robotics.RobotStudio.Stations.Body">Body</see> consisting of the curve(s) at the intersection of two bodies.</summary>
      <param name="body1">Defines the first body to use.</param>
      <param name="body2">Defines the second body to use.</param>
      <returns>The new <see cref="T:ABB.Robotics.RobotStudio.Stations.Body">Body</see></returns>
    </member>
    <member name="M:ABB.Robotics.RobotStudio.Stations.Body.CreateIntersectionCurve(ABB.Robotics.RobotStudio.Stations.Face,ABB.Robotics.RobotStudio.Stations.Face)">
      <summary>Creates a new wire <see cref="T:ABB.Robotics.RobotStudio.Stations.Body">Body</see> consisting of the curve(s) at the intersection of two faces.</summary>
      <param name="face1">Defines the first face to use.</param>
      <param name="face2">Defines the second face to use.</param>
      <returns>The new <see cref="T:ABB.Robotics.RobotStudio.Stations.Body">Body</see></returns>
    </member>
    <member name="M:ABB.Robotics.RobotStudio.Stations.Body.CreateLine(ABB.Robotics.Math.Vector3,ABB.Robotics.Math.Vector3)">
      <summary>Creates a new <see cref="T:ABB.Robotics.RobotStudio.Stations.Body" /> consisting of one single line shaped wire.</summary>
      <param name="start">Defines the start position of the line.</param>
      <param name="end">Defines the end position of the line.</param>
      <returns>The new <see cref="T:ABB.Robotics.RobotStudio.Stations.Body" />.</returns>
    </member>
    <member name="M:ABB.Robotics.RobotStudio.Stations.Body.CreateParametricCurveU(ABB.Robotics.RobotStudio.Stations.Face,System.Double)">
      <summary>Creates a new wire <see cref="T:ABB.Robotics.RobotStudio.Stations.Body" /> consisting of the u-parametric curve(s) on the surface of the face.</summary>
      <param name="face">Defines the face to use.</param>
      <param name="vParam">V-parameter.</param>
      <returns>The new <see cref="T:ABB.Robotics.RobotStudio.Stations.Body">Body</see>.</returns>
    </member>
    <member name="M:ABB.Robotics.RobotStudio.Stations.Body.CreateParametricCurveV(ABB.Robotics.RobotStudio.Stations.Face,System.Double)">
      <summary>Creates a new wire <see cref="T:ABB.Robotics.RobotStudio.Stations.Body">Body</see> consisting of the v-parametric curve(s) on the surface of the face.</summary>
      <param name="face">Defines the face to use.</param>
      <param name="uParam">U-parameter.</param>
      <returns>The new <see cref="T:ABB.Robotics.RobotStudio.Stations.Body" />.</returns>
    </member>
    <member name="M:ABB.Robotics.RobotStudio.Stations.Body.CreatePolygon(ABB.Robotics.Math.Vector3,ABB.Robotics.Math.Vector3,System.Int32)">
      <summary>Creates a new <see cref="T:ABB.Robotics.RobotStudio.Stations.Body" /> consisting of one single polygon shaped wire.</summary>
      <param name="start">Defines the center position of the polygon.</param>
      <param name="vertex">Defines the a position at one of the corners/vertices of the polygon,
            used to calculate distance between the center point and the vertices in the polygon.</param>
      <param name="numberEdges">Defines the nummber of edges in the polygon.</param>
      <returns>The new <see cref="T:ABB.Robotics.RobotStudio.Stations.Body" />.</returns>
    </member>
    <member name="M:ABB.Robotics.RobotStudio.Stations.Body.CreatePolyLine(ABB.Robotics.Math.Vector3[])">
      <summary>Creates a new <see cref="T:ABB.Robotics.RobotStudio.Stations.Body" /> consisting of one single polyline wire.</summary>
      <param name="vertices">Defines the vertices/positions used to create the polyline.</param>
      <returns>The new <see cref="T:ABB.Robotics.RobotStudio.Stations.Body" />.</returns>
    </member>
    <member name="M:ABB.Robotics.RobotStudio.Stations.Body.CreateRectangle(ABB.Robotics.Math.Matrix4,System.Double,System.Double)">
      <summary>Creates a new <see cref="T:ABB.Robotics.RobotStudio.Stations.Body" /> consisting of one single rectangle shaped wire.</summary>
      <param name="corner">Defines the corner position and rotation of the rectangle.</param>
      <param name="length">Defines the length of the rectangle.</param>
      <param name="width">Defines the width of the rectangle.</param>
      <returns>The new <see cref="T:ABB.Robotics.RobotStudio.Stations.Body" />.</returns>
    </member>
    <member name="M:ABB.Robotics.RobotStudio.Stations.Body.CreateSolidBox(ABB.Robotics.Math.Matrix4,ABB.Robotics.Math.Vector3)">
      <summary>Creates a new <see cref="T:ABB.Robotics.RobotStudio.Stations.Body" /> consisting of a solid box.</summary>
      <param name="origin">Defines the origin position and rotation of the box.</param>
      <param name="size">Defines the length, height and width of the box. </param>
      <returns>The new <see cref="T:ABB.Robotics.RobotStudio.Stations.Body" />.</returns>
    </member>
    <member name="M:ABB.Robotics.RobotStudio.Stations.Body.CreateSolidCone(ABB.Robotics.Math.Matrix4,System.Double,System.Double)">
      <summary>Creates a new <see cref="T:ABB.Robotics.RobotStudio.Stations.Body" /> consisting of a solid cone.</summary>
      <param name="center">Defines the center position and rotation of the cone.</param>
      <param name="radius">Defines the radius of the base circle of the cone.</param>
      <param name="height">Defines the height of the cone.</param>
      <returns>The new <see cref="T:ABB.Robotics.RobotStudio.Stations.Body" />.</returns>
    </member>
    <member name="M:ABB.Robotics.RobotStudio.Stations.Body.CreateSolidCylinder(ABB.Robotics.Math.Matrix4,System.Double,System.Double)">
      <summary>Creates a new <see cref="T:ABB.Robotics.RobotStudio.Stations.Body" /> consisting of a solid cylinder.</summary>
      <param name="center">Defines the center position and rotation of the cylinder.</param>
      <param name="radius">Defines the radius of the base circle of the cylinder.</param>
      <param name="height">Defines the height of the cone.</param>
      <returns>The new <see cref="T:ABB.Robotics.RobotStudio.Stations.Body" />.</returns>
    </member>
    <member name="M:ABB.Robotics.RobotStudio.Stations.Body.CreateSolidPyramid(ABB.Robotics.Math.Matrix4,System.Double,System.Double,System.Int32)">
      <summary>Creates a new <see cref="T:ABB.Robotics.RobotStudio.Stations.Body" /> consisting of a solid pyramid.</summary>
      <param name="center">Defines the center position and rotation of the pyramid.</param>
      <param name="radius">Defines the distance from center point to the corners of the base of the pyramid.</param>
      <param name="height">Defines the height of the pyramid.</param>
      <param name="numberSides">Defines the number of sides of the pyramid.</param>
      <returns>The new <see cref="T:ABB.Robotics.RobotStudio.Stations.Body" />.</returns>
    </member>
    <member name="M:ABB.Robotics.RobotStudio.Stations.Body.CreateSolidSphere(ABB.Robotics.Math.Vector3,System.Double)">
      <summary>Creates a new <see cref="T:ABB.Robotics.RobotStudio.Stations.Body" /> consisting of a solid sphere.</summary>
      <param name="center">Defines the center position of the sphere.</param>
      <param name="radius">Defines the radius of the sphere.</param>
      <returns>The new <see cref="T:ABB.Robotics.RobotStudio.Stations.Body" />.</returns>
    </member>
    <member name="M:ABB.Robotics.RobotStudio.Stations.Body.CreateSolidTorus(ABB.Robotics.Math.Matrix4,System.Double,System.Double)">
      <summary>Creates a new <see cref="T:ABB.Robotics.RobotStudio.Stations.Body" /> consisting of a solid torus.</summary>
      <param name="center">Defines the center position and rotation of the torus.</param>
      <param name="majorRadius">Defines the major radius of the torus.</param>
      <param name="minorRadius">Defines the minor radius of the torus.</param>
      <returns>The new <see cref="T:ABB.Robotics.RobotStudio.Stations.Body" />.</returns>
    </member>
    <member name="M:ABB.Robotics.RobotStudio.Stations.Body.CreateSpline(ABB.Robotics.Math.Vector3[],System.Double)">
      <summary>Creates a new <see cref="T:ABB.Robotics.RobotStudio.Stations.Body" /> consisting of one single spline wire.</summary>
      <param name="vertices">Defines the vertices/positions used to create the spline.</param>
      <param name="tolerance">Defines the tolerance used to shape the spline at each vertice.</param>
      <returns>The new <see cref="T:ABB.Robotics.RobotStudio.Stations.Body" />.</returns>
    </member>
    <member name="M:ABB.Robotics.RobotStudio.Stations.Body.CreateSurfaceCircle(ABB.Robotics.Math.Matrix4,System.Double)">
      <summary>Creates a new <see cref="T:ABB.Robotics.RobotStudio.Stations.Body" /> consisting of a surface circle.</summary>
      <param name="center">Defines the center position and rotation of the circle.</param>
      <param name="radius">Defines the radius of the circle.</param>
      <returns>The new <see cref="T:ABB.Robotics.RobotStudio.Stations.Body" />.</returns>
    </member>
    <member name="M:ABB.Robotics.RobotStudio.Stations.Body.CreateSurfaceFromCurve(ABB.Robotics.RobotStudio.Stations.Wire)">
      <summary>Creates a new <see cref="T:ABB.Robotics.RobotStudio.Stations.Body" /> consisting of a surface defined by the curve.</summary>
      <param name="wire">Defines the circumference of the surface</param>
      <returns>The new <see cref="T:ABB.Robotics.RobotStudio.Stations.Body" />.</returns>
    </member>
    <member name="M:ABB.Robotics.RobotStudio.Stations.Body.CreateSurfacePolygon(ABB.Robotics.Math.Vector3,ABB.Robotics.Math.Vector3,System.Int32)">
      <summary>Creates a new <see cref="T:ABB.Robotics.RobotStudio.Stations.Body" /> consisting of a surface polygon.</summary>
      <param name="start">Defines the center position on the polygon.</param>
      <param name="vertex">Defines a corner vertex of the polygon, used to calculate the distance between
            center poit and the vertices of the polygon.</param>
      <param name="numberEdges">Defines the number of edges of the polygon.</param>
      <returns>The new <see cref="T:ABB.Robotics.RobotStudio.Stations.Body" />.</returns>
    </member>
    <member name="M:ABB.Robotics.RobotStudio.Stations.Body.CreateSurfacePolygon(ABB.Robotics.Math.Vector3[])">
      <summary>Creates a new <see cref="T:ABB.Robotics.RobotStudio.Stations.Body" /> consisting of a surface polygon defined by a cirquit of vertices.</summary>
      <param name="outerLoop">The vertices that define the outer edge of the polygon.</param>
      <returns>The new <see cref="T:ABB.Robotics.RobotStudio.Stations.Body" />.</returns>
    </member>
    <member name="M:ABB.Robotics.RobotStudio.Stations.Body.CreateSurfacePolygonWithHoles(ABB.Robotics.Math.Vector3[],ABB.Robotics.Math.Vector3[][])">
      <summary>Creates a new <see cref="T:ABB.Robotics.RobotStudio.Stations.Body" /> consisting of a surface polygon defined by outer and inner vertices.</summary>
      <param name="outerLoop">The vertices that define the outer edge of the polygon.</param>
      <param name="innerLoops">Arrays of vertices that define edges of holes in the polygon.</param>
      <returns>The new <see cref="T:ABB.Robotics.RobotStudio.Stations.Body" />.</returns>
    </member>
    <member name="M:ABB.Robotics.RobotStudio.Stations.Body.CreateSurfaceRectangle(ABB.Robotics.Math.Matrix4,System.Double,System.Double)">
      <summary>Creates a new <see cref="T:ABB.Robotics.RobotStudio.Stations.Body" /> consisting of a rectangle polygon.</summary>
      <param name="corner">Defines the corner position and rotation of the rectangle.</param>
      <param name="length">Defines the length of the rectangle.</param>
      <param name="width">Defines the width of the rectangle.</param>
      <returns>The new <see cref="T:ABB.Robotics.RobotStudio.Stations.Body" />.</returns>
    </member>
    <member name="M:ABB.Robotics.RobotStudio.Stations.Body.Cut(ABB.Robotics.RobotStudio.Stations.Body)"></member>
    <member name="M:ABB.Robotics.RobotStudio.Stations.Body.Cut2(ABB.Robotics.RobotStudio.Stations.Body)">
      <summary>Creates an array of new <see cref="T:ABB.Robotics.RobotStudio.Stations.Body">Body(s)</see> consisting of the cut of this body with the one provided.</summary>
      <param name="body">The body to cut this body with.</param>
      <returns>The array of new <see cref="T:ABB.Robotics.RobotStudio.Stations.Body">Body(s)</see></returns>
    </member>
    <member name="M:ABB.Robotics.RobotStudio.Stations.Body.Defeature(System.Double,System.Double,System.Double,ABB.Robotics.RobotStudio.ProgressNotification)">
      <summary>Removes features (holes, chamfers and blends).</summary>
      <param name="blendRadius">The maximum radius of blends to remove, or zero to disable.</param>
      <param name="chamferWidth">The maximum width of chamfers to remove, or zero to disable.</param>
      <param name="holeDiameter">The maximum diameter of holes to remove, or zero to disable.</param>
      <param name="progressDelegate">Progress notification callback (can be null).</param>
      <returns>The new defeatured body.</returns>
    </member>
    <member name="M:ABB.Robotics.RobotStudio.Stations.Body.Extrude(ABB.Robotics.RobotStudio.Stations.Face,ABB.Robotics.Math.Vector3,ABB.Robotics.RobotStudio.Stations.Wire,ABB.Robotics.RobotStudio.Stations.SweepOptions)">
      <summary>Creates new <see cref="T:ABB.Robotics.RobotStudio.Stations.Body" />(s) from the supplied <see cref="T:ABB.Robotics.RobotStudio.Stations.Face" /> in the given projection direction.</summary>
      <param name="face">The <see cref="T:ABB.Robotics.RobotStudio.Stations.Face" /> object that shall be extruded.</param>
      <param name="projection">The direction and length of the projection.</param>
      <param name="alongWire">If not null, the Extrude operation will follow the specified wire instead of the projection vector</param>
      <param name="sweepOptions">Sweep options for this operation.</param>
      <returns>The array of new <see cref="T:ABB.Robotics.RobotStudio.Stations.Body">Body</see>s.</returns>
      <exception cref="T:System.ArgumentException" />
      <exception cref="T:System.ArgumentNullException" />
      <exception cref="T:System.IO.IOException" />
    </member>
    <member name="M:ABB.Robotics.RobotStudio.Stations.Body.Extrude(ABB.Robotics.RobotStudio.Stations.Wire,ABB.Robotics.Math.Vector3,ABB.Robotics.RobotStudio.Stations.Wire,ABB.Robotics.RobotStudio.Stations.SweepOptions)">
      <summary>Creates new <see cref="T:ABB.Robotics.RobotStudio.Stations.Body" />s from the supplied <see cref="T:ABB.Robotics.RobotStudio.Stations.Wire" /> in the given projection direction.</summary>
      <param name="wire">The <see cref="T:ABB.Robotics.RobotStudio.Stations.Wire" /> object that shall be extruded.</param>
      <param name="projection">The direction and length of the projection.</param>
      <param name="alongWire">If not null, the Extrude operation will follow the specified wire instead of the projection vector.</param>
      <param name="sweepOptions">Sweep options for this operation.</param>
      <returns>The array of new <see cref="T:ABB.Robotics.RobotStudio.Stations.Body" />s.</returns>
      <exception cref="T:System.ArgumentException" />
      <exception cref="T:System.ArgumentNullException" />
      <exception cref="T:System.IO.IOException" />
    </member>
    <member name="P:ABB.Robotics.RobotStudio.Stations.Body.Faces"></member>
    <member name="M:ABB.Robotics.RobotStudio.Stations.Body.FindClosestVertex(ABB.Robotics.Math.Vector3)">
      <summary>Returns the <see cref="T:ABB.Robotics.RobotStudio.Stations.Vertex" /> of the <see cref="T:ABB.Robotics.RobotStudio.Stations.Body" /> that is closest to the provided point.</summary>
      <param name="testPoint">The point which to find the closest vertex to.</param>
      <returns>The closest <see cref="T:ABB.Robotics.RobotStudio.Stations.Vertex" />.</returns>
    </member>
    <member name="M:ABB.Robotics.RobotStudio.Stations.Body.FindFeatures(System.Double,System.Double,System.Double,ABB.Robotics.RobotStudio.ProgressNotification)">
      <summary>Finds features (holes, chamfers and blends) that satisfy specified conditions.</summary>
      <param name="blendRadius">The maximum radius of blends, or zero to disable.</param>
      <param name="chamferWidth">The maximum width of chamfers, or zero to disable.</param>
      <param name="holeDiameter">The maximum diameter of holes, or zero to disable.</param>
      <param name="progressDelegate">Progress notification callback (can be null).</param>
      <returns>The array of found features</returns>
    </member>
    <member name="M:ABB.Robotics.RobotStudio.Stations.Body.GetMaterial"></member>
    <member name="M:ABB.Robotics.RobotStudio.Stations.Body.Heal(ABB.Robotics.RobotStudio.Stations.Body)">
      <summary>Heals the <see cref="T:ABB.Robotics.RobotStudio.Stations.Body" /> (performs all phases of the healing process) using intelligently selected tolerances.</summary>
      <param name="body">The <see cref="T:ABB.Robotics.RobotStudio.Stations.Body" /> to be healed.</param>
      <returns>The new healed <see cref="T:ABB.Robotics.RobotStudio.Stations.Body" /></returns>
    </member>
    <member name="M:ABB.Robotics.RobotStudio.Stations.Body.Intersect(ABB.Robotics.RobotStudio.Stations.Body)">
      <summary>Creates an array of new <see cref="T:ABB.Robotics.RobotStudio.Stations.Body">Body(s)</see> consisting of intersection of this body and the the one provided.</summary>
      <param name="body">The body to intersect this body with.</param>
      <returns>The array of new <see cref="T:ABB.Robotics.RobotStudio.Stations.Body">Body(s)</see>.</returns>
    </member>
    <member name="M:ABB.Robotics.RobotStudio.Stations.Body.IsPointInside(ABB.Robotics.Math.Vector3)">
      <summary>Tests if a point is inside the body.</summary>
      <param name="point">The point to test.</param>
      <returns>True if the point is inside the body, else false.</returns>
    </member>
    <member name="M:ABB.Robotics.RobotStudio.Stations.Body.Join(ABB.Robotics.RobotStudio.Stations.Body)">
      <summary>Creates an array of new <see cref="T:ABB.Robotics.RobotStudio.Stations.Body">Body(s)</see> consisting of the union of this body with the one provided.</summary>
      <param name="body">The body to join this body with.</param>
      <returns>The array of new <see cref="T:ABB.Robotics.RobotStudio.Stations.Body">Body(s)</see></returns>
    </member>
    <member name="M:ABB.Robotics.RobotStudio.Stations.Body.Join(ABB.Robotics.RobotStudio.Stations.Body,System.Boolean)">
      <summary>Creates an array of new <see cref="T:ABB.Robotics.RobotStudio.Stations.Body">Body(s)</see> consisting of the union of this body with the one provided.</summary>
      <param name="body">The body to join this body with.</param>
      <param name="separateResultingBody">If true, returns an array with one element for each disjunct piece in the joined body. If false, returns an array with one element containing the joined body.</param>
      <returns>The array of new <see cref="T:ABB.Robotics.RobotStudio.Stations.Body">Body(s)</see></returns>
    </member>
    <member name="M:ABB.Robotics.RobotStudio.Stations.Body.JoinCurves(ABB.Robotics.RobotStudio.Stations.Wire[])">
      <summary>Creates one or more bodies that consisting of one single wire
            each. The source wires that are connected will be joined and separate
            wires will result in new wire bodies.
            </summary>
      <param name="wires">The array of <see cref="T:ABB.Robotics.RobotStudio.Stations.Wire" /> objects that shall be joined.</param>
      <returns>The array of new wire bodies.</returns>
      <exception cref="T:System.ArgumentException" />
      <exception cref="T:System.ArgumentNullException" />
    </member>
    <member name="M:ABB.Robotics.RobotStudio.Stations.Body.JoinCurves(ABB.Robotics.RobotStudio.Stations.Wire[],System.Double)">
      <summary>Creates one or more bodies that consisting of one single wire
            each. The source wires that are connected will be joined and separate
            wires will result in new wire bodies.
            </summary>
      <param name="wires">The array of <see cref="T:ABB.Robotics.RobotStudio.Stations.Wire" /> objects that shall be joined.</param>
      <param name="tolerance">The largest distance between vertices that are considered coincident.</param>
      <returns>The array of new wire bodies.</returns>
      <exception cref="T:System.ArgumentException" />
      <exception cref="T:System.ArgumentNullException" />
    </member>
    <member name="M:ABB.Robotics.RobotStudio.Stations.Body.JoinEdges(ABB.Robotics.RobotStudio.Stations.Edge[],System.Double)">
      <summary>Creates one or more bodies consisting of one edge each. The source edges that are connected,
            or within the given tolerance, will be joined. The separate edged outside of the given tolerance will remain separated.
            The result will be an array of edges.
            </summary>
      <param name="edges">The array of <see cref="T:ABB.Robotics.RobotStudio.Stations.Edge" />s to be joined.</param>
      <param name="tolerance">The largest distance between vertices that are considered coincident.</param>
      <returns>The array of new wire bodies.</returns>
    </member>
    <member name="M:ABB.Robotics.RobotStudio.Stations.Body.Mirror(ABB.Robotics.Math.Plane)">
      <summary>Creates a new <see cref="T:ABB.Robotics.RobotStudio.Stations.Body" /> by mirroring this body.</summary>
      <param name="plane">Mirror plane.</param>
      <returns>The new <see cref="T:ABB.Robotics.RobotStudio.Stations.Body" />.</returns>
    </member>
    <member name="P:ABB.Robotics.RobotStudio.Stations.Body.MomentOfInertia">
      <summary>
             Gets the moment of inertia of the body as a <see cref="T:ABB.Robotics.Math.Matrix3" />.
             </summary>
    </member>
    <member name="P:ABB.Robotics.RobotStudio.Stations.Body.Name"></member>
    <member name="M:ABB.Robotics.RobotStudio.Stations.Body.NormalizeTextureCoordinates(System.Boolean,System.Boolean)"></member>
    <member name="P:ABB.Robotics.RobotStudio.Stations.Body.Opacity">
      <summary>
            Gets or sets the opacity of the body
            </summary>
    </member>
    <member name="P:ABB.Robotics.RobotStudio.Stations.Body.Parent">
      <summary>
            Gets the parent object of the body.
            </summary>
    </member>
    <member name="M:ABB.Robotics.RobotStudio.Stations.Body.ProjectCurve(ABB.Robotics.RobotStudio.Stations.Wire[],ABB.Robotics.RobotStudio.Stations.Body[],ABB.Robotics.Math.Vector3)">
      <summary>Creates new wire <see cref="T:ABB.Robotics.RobotStudio.Stations.Body" />s representing the projection of one or
            more <see cref="T:ABB.Robotics.RobotStudio.Stations.Wire" />s onto the supplied <see cref="T:ABB.Robotics.RobotStudio.Stations.Body" />s.</summary>
      <param name="wires">The array of <see cref="T:ABB.Robotics.RobotStudio.Stations.Wire" /> objects that shall be projected.</param>
      <param name="targets">The array of <see cref="T:ABB.Robotics.RobotStudio.Stations.Body" />s onto which to project the
            <see cref="T:ABB.Robotics.RobotStudio.Stations.Wire" />s.</param>
      <param name="direction">The direction of projection (used as a unit vector).</param>
      <returns>The array of new wire <see cref="T:ABB.Robotics.RobotStudio.Stations.Body" />s. Returns an empty array if no intersection is found.</returns>
      <exception cref="T:System.ArgumentException" />
      <exception cref="T:System.ArgumentNullException" />
      <exception cref="T:System.IO.DirectoryNotFoundException" />
      <exception cref="T:System.IO.FileNotFoundException" />
      <exception cref="T:System.UnauthorizedAccessException" />
      <exception cref="T:System.IO.IOException" />
    </member>
    <member name="M:ABB.Robotics.RobotStudio.Stations.Body.ReplaceMaterial(ABB.Robotics.RobotStudio.Stations.Material,ABB.Robotics.RobotStudio.Stations.Material)"></member>
    <member name="M:ABB.Robotics.RobotStudio.Stations.Body.Scale(System.Double)">
      <summary>Creates a new <see cref="T:ABB.Robotics.RobotStudio.Stations.Body" /> by scaling this body.</summary>
      <param name="scale">Scale factor.</param>
      <returns>The new <see cref="T:ABB.Robotics.RobotStudio.Stations.Body" />.</returns>
    </member>
    <member name="M:ABB.Robotics.RobotStudio.Stations.Body.Separate">
      <summary>Creates an array of new <see cref="T:ABB.Robotics.RobotStudio.Stations.Body">Body(s)</see> consisting of the disjunct lumps of this body.</summary>
      <returns>The array of new <see cref="T:ABB.Robotics.RobotStudio.Stations.Body">Body(s)</see></returns>
    </member>
    <member name="M:ABB.Robotics.RobotStudio.Stations.Body.SetMaterial(ABB.Robotics.RobotStudio.Stations.Material)"></member>
    <member name="P:ABB.Robotics.RobotStudio.Stations.Body.Shells">
      <summary>
            Gets the ShellCollection of the body.
            </summary>
    </member>
    <member name="M:ABB.Robotics.RobotStudio.Stations.Body.SplitCurve(ABB.Robotics.RobotStudio.Stations.Wire,ABB.Robotics.Math.Vector3)">
      <summary>Splits a wire at a position. The position is valid if it lies
            closer than 10e-3 to the curve. If the split position is the same as any
            of the endpoints of the wire, nothing will happen.</summary>
      <param name="wire">The <see cref="T:ABB.Robotics.RobotStudio.Stations.Wire" /> object that shall be split.</param>
      <param name="pointOnWire">The split location on the wire.</param>
      <returns>The array of new wire bodies.</returns>
      <exception cref="T:System.ArgumentException" />
      <exception cref="T:System.ArgumentNullException" />
      <exception cref="T:System.IO.DirectoryNotFoundException" />
      <exception cref="T:System.IO.FileNotFoundException" />
      <exception cref="T:System.UnauthorizedAccessException" />
      <exception cref="T:System.IO.IOException" />
    </member>
    <member name="P:ABB.Robotics.RobotStudio.Stations.Body.SurfaceArea">
      <summary>
            Gets the surface area of the body.
            </summary>
    </member>
    <member name="P:ABB.Robotics.RobotStudio.Stations.Body.Transform">
      <summary>
            Gets the transform object of the body.
            </summary>
    </member>
    <member name="M:ABB.Robotics.RobotStudio.Stations.Body.TrimCurve(ABB.Robotics.RobotStudio.Stations.Wire,ABB.Robotics.RobotStudio.Stations.CurveSection)">
      <summary>Removes a section of a wire. The section is limited by a
            startpoint and an endpoint, both adjacent to the wire. The start point
            must be adjacent to the first edge in the supplied list, and the end point
            must be adjacent to the last edge in the list.</summary>
      <param name="wire">The <see cref="T:ABB.Robotics.RobotStudio.Stations.Wire" /> object that shall be trimmed.</param>
      <param name="curveSection">The section of the wire to trim.</param>
      <returns>The array of new wire bodies.</returns>
      <exception cref="T:System.ArgumentException" />
      <exception cref="T:System.ArgumentNullException" />
      <exception cref="T:System.IO.DirectoryNotFoundException" />
      <exception cref="T:System.IO.FileNotFoundException" />
      <exception cref="T:System.UnauthorizedAccessException" />
      <exception cref="T:System.IO.IOException" />
    </member>
    <member name="P:ABB.Robotics.RobotStudio.Stations.Body.Wires"></member>
    <member name="P:ABB.Robotics.RobotStudio.Stations.Body.Visible">
      <summary>
            Gets or sets whether the body should be visible in the graphics or not.
            </summary>
    </member>
    <member name="P:ABB.Robotics.RobotStudio.Stations.Body.Volume">
      <summary>
            Gets the volume of the body.
            </summary>
    </member>
    <member name="T:ABB.Robotics.RobotStudio.Stations.BodyCollection">
      <summary>
            A collection of <see cref="T:ABB.Robotics.RobotStudio.Stations.Body" /> objects.
            </summary>
    </member>
    <member name="M:ABB.Robotics.RobotStudio.Stations.BodyCollection.Add(ABB.Robotics.RobotStudio.Stations.Body)">
      <summary>
            Adds a <see cref="T:ABB.Robotics.RobotStudio.Stations.Body" /> to the collection.
            </summary>
      <param name="body">The <see cref="T:ABB.Robotics.RobotStudio.Stations.Body" /> to add to the collection.</param>
    </member>
    <member name="M:ABB.Robotics.RobotStudio.Stations.BodyCollection.Clear"></member>
    <member name="M:ABB.Robotics.RobotStudio.Stations.BodyCollection.Contains(ABB.Robotics.RobotStudio.Stations.Body)"></member>
    <member name="M:ABB.Robotics.RobotStudio.Stations.BodyCollection.CopyTo(ABB.Robotics.RobotStudio.Stations.Body[],System.Int32)"></member>
    <member name="M:ABB.Robotics.RobotStudio.Stations.BodyCollection.CopyTo(System.Array,System.Int32)"></member>
    <member name="P:ABB.Robotics.RobotStudio.Stations.BodyCollection.Count"></member>
    <member name="M:ABB.Robotics.RobotStudio.Stations.BodyCollection.GetEnumerator"></member>
    <member name="P:ABB.Robotics.RobotStudio.Stations.BodyCollection.IsSynchronized"></member>
    <member name="P:ABB.Robotics.RobotStudio.Stations.BodyCollection.Item(System.Int32)"></member>
    <member name="P:ABB.Robotics.RobotStudio.Stations.BodyCollection.Parent"></member>
    <member name="M:ABB.Robotics.RobotStudio.Stations.BodyCollection.Remove(ABB.Robotics.RobotStudio.Stations.Body)">
      <summary>
            Removes a <see cref="T:ABB.Robotics.RobotStudio.Stations.Body" /> from the collection.
            </summary>
      <param name="body">The <see cref="T:ABB.Robotics.RobotStudio.Stations.Body" /> to remove from the collection.</param>
    </member>
    <member name="P:ABB.Robotics.RobotStudio.Stations.BodyCollection.SyncRoot"></member>
    <member name="M:ABB.Robotics.RobotStudio.Stations.BodyCollection.ToArray"></member>
    <member name="T:ABB.Robotics.RobotStudio.Stations.BodyType">
      <summary>
            Specifies the type of a body<br /><img src="GeometryTopology.jpg" /></summary>
    </member>
    <member name="F:ABB.Robotics.RobotStudio.Stations.BodyType.WireBody"></member>
    <member name="F:ABB.Robotics.RobotStudio.Stations.BodyType.SolidBody"></member>
    <member name="F:ABB.Robotics.RobotStudio.Stations.BodyType.SheetBody"></member>
    <member name="F:ABB.Robotics.RobotStudio.Stations.BodyType.Unknown"></member>
    <member name="T:ABB.Robotics.RobotStudio.Stations.BuiltInControllerSourceSignals">
      <summary>
            Gives access to built in data recorder signals, that represents information from the controller.
            </summary>
    </member>
    <member name="P:ABB.Robotics.RobotStudio.Stations.BuiltInControllerSourceSignals.DerivedSignalTag"></member>
    <member name="P:ABB.Robotics.RobotStudio.Stations.BuiltInControllerSourceSignals.EventLogSignalTag"></member>
    <member name="M:ABB.Robotics.RobotStudio.Stations.BuiltInControllerSourceSignals.GetEventLogId(System.String,System.Int32)"></member>
    <member name="M:ABB.Robotics.RobotStudio.Stations.BuiltInControllerSourceSignals.GetEventLogSignal(System.String,System.Int32)"></member>
    <member name="M:ABB.Robotics.RobotStudio.Stations.BuiltInControllerSourceSignals.GetIOSignal(System.String,System.String)"></member>
    <member name="M:ABB.Robotics.RobotStudio.Stations.BuiltInControllerSourceSignals.GetIOSignalId(System.String,System.String)"></member>
    <member name="M:ABB.Robotics.RobotStudio.Stations.BuiltInControllerSourceSignals.GetIOSignalName(ABB.Robotics.RobotStudio.DataRecorderSignal)"></member>
    <member name="M:ABB.Robotics.RobotStudio.Stations.BuiltInControllerSourceSignals.GetJointId(System.String,System.String,System.Int32)"></member>
    <member name="M:ABB.Robotics.RobotStudio.Stations.BuiltInControllerSourceSignals.GetJointIdByMechanicalUnit(System.String,System.String,System.Int32)"></member>
    <member name="M:ABB.Robotics.RobotStudio.Stations.BuiltInControllerSourceSignals.GetJointSignal(System.String,System.String,System.Int32)"></member>
    <member name="M:ABB.Robotics.RobotStudio.Stations.BuiltInControllerSourceSignals.GetJointSignalByMechanicalUnit(System.String,System.String,System.Int32)"></member>
    <member name="M:ABB.Robotics.RobotStudio.Stations.BuiltInControllerSourceSignals.GetMotionId(System.String,System.String,ABB.Robotics.RobotStudio.Stations.BuiltInDataRecorderMotionSignal)"></member>
    <member name="M:ABB.Robotics.RobotStudio.Stations.BuiltInControllerSourceSignals.GetMotionSignal(System.String,System.String,ABB.Robotics.RobotStudio.Stations.BuiltInDataRecorderMotionSignal)"></member>
    <member name="M:ABB.Robotics.RobotStudio.Stations.BuiltInControllerSourceSignals.GetMotionSignalType(ABB.Robotics.RobotStudio.DataRecorderSignal)"></member>
    <member name="M:ABB.Robotics.RobotStudio.Stations.BuiltInControllerSourceSignals.GetSignals"></member>
    <member name="P:ABB.Robotics.RobotStudio.Stations.BuiltInControllerSourceSignals.IOSignalTag"></member>
    <member name="M:ABB.Robotics.RobotStudio.Stations.BuiltInControllerSourceSignals.IsControllerSource(ABB.Robotics.RobotStudio.DataRecorderSignal)"></member>
    <member name="M:ABB.Robotics.RobotStudio.Stations.BuiltInControllerSourceSignals.IsEventLogSignal(ABB.Robotics.RobotStudio.DataRecorderSignal)"></member>
    <member name="M:ABB.Robotics.RobotStudio.Stations.BuiltInControllerSourceSignals.IsIOSignal(ABB.Robotics.RobotStudio.DataRecorderSignal)"></member>
    <member name="M:ABB.Robotics.RobotStudio.Stations.BuiltInControllerSourceSignals.IsJointSignal(ABB.Robotics.RobotStudio.DataRecorderSignal)"></member>
    <member name="M:ABB.Robotics.RobotStudio.Stations.BuiltInControllerSourceSignals.IsMotionSignal(ABB.Robotics.RobotStudio.DataRecorderSignal)"></member>
    <member name="P:ABB.Robotics.RobotStudio.Stations.BuiltInControllerSourceSignals.JointSignalTag"></member>
    <member name="P:ABB.Robotics.RobotStudio.Stations.BuiltInControllerSourceSignals.MotionSignalTag"></member>
    <member name="T:ABB.Robotics.RobotStudio.Stations.BuiltInDataRecorderMotionSignal">
      <summary>
            Specifies information from the robot motion system that can be recorded.
            </summary>
    </member>
    <member name="F:ABB.Robotics.RobotStudio.Stations.BuiltInDataRecorderMotionSignal.Unknown"></member>
    <member name="F:ABB.Robotics.RobotStudio.Stations.BuiltInDataRecorderMotionSignal.MaximumLinearAccelerationInWorld"></member>
    <member name="F:ABB.Robotics.RobotStudio.Stations.BuiltInDataRecorderMotionSignal.NearJointLimit"></member>
    <member name="F:ABB.Robotics.RobotStudio.Stations.BuiltInDataRecorderMotionSignal.TotalMotorPowerConsumption"></member>
    <member name="F:ABB.Robotics.RobotStudio.Stations.BuiltInDataRecorderMotionSignal.TargetChanged"></member>
    <member name="F:ABB.Robotics.RobotStudio.Stations.BuiltInDataRecorderMotionSignal.ToolChanged"></member>
    <member name="F:ABB.Robotics.RobotStudio.Stations.BuiltInDataRecorderMotionSignal.WorkObjectChanged"></member>
    <member name="F:ABB.Robotics.RobotStudio.Stations.BuiltInDataRecorderMotionSignal.ZoneEntered"></member>
    <member name="F:ABB.Robotics.RobotStudio.Stations.BuiltInDataRecorderMotionSignal.ZoneLeft"></member>
    <member name="F:ABB.Robotics.RobotStudio.Stations.BuiltInDataRecorderMotionSignal.FinePointReached"></member>
    <member name="F:ABB.Robotics.RobotStudio.Stations.BuiltInDataRecorderMotionSignal.TCPSpeedInCurrentWorkObject"></member>
    <member name="F:ABB.Robotics.RobotStudio.Stations.BuiltInDataRecorderMotionSignal.OrientationSpeedInCurrentWorkObject"></member>
    <member name="F:ABB.Robotics.RobotStudio.Stations.BuiltInDataRecorderMotionSignal.TCPLinearAccelerationInWorld"></member>
    <member name="F:ABB.Robotics.RobotStudio.Stations.BuiltInDataRecorderMotionSignal.TCPPositionXInCurrentWorkObject"></member>
    <member name="F:ABB.Robotics.RobotStudio.Stations.BuiltInDataRecorderMotionSignal.TCPPositionYInCurrentWorkObject"></member>
    <member name="F:ABB.Robotics.RobotStudio.Stations.BuiltInDataRecorderMotionSignal.TCPPositionZInCurrentWorkObject"></member>
    <member name="F:ABB.Robotics.RobotStudio.Stations.BuiltInDataRecorderMotionSignal.TCPOrientationQ1InCurrentWorkObject"></member>
    <member name="F:ABB.Robotics.RobotStudio.Stations.BuiltInDataRecorderMotionSignal.TCPOrientationQ2InCurrentWorkObject"></member>
    <member name="F:ABB.Robotics.RobotStudio.Stations.BuiltInDataRecorderMotionSignal.TCPOrientationQ3InCurrentWorkObject"></member>
    <member name="F:ABB.Robotics.RobotStudio.Stations.BuiltInDataRecorderMotionSignal.TCPOrientationQ4InCurrentWorkObject"></member>
    <member name="F:ABB.Robotics.RobotStudio.Stations.BuiltInDataRecorderMotionSignal.RobotConfigurationCf1"></member>
    <member name="F:ABB.Robotics.RobotStudio.Stations.BuiltInDataRecorderMotionSignal.RobotConfigurationCf4"></member>
    <member name="F:ABB.Robotics.RobotStudio.Stations.BuiltInDataRecorderMotionSignal.RobotConfigurationCf6"></member>
    <member name="F:ABB.Robotics.RobotStudio.Stations.BuiltInDataRecorderMotionSignal.RobotConfigurationCfx"></member>
    <member name="F:ABB.Robotics.RobotStudio.Stations.BuiltInDataRecorderMotionSignal.TotalMotorPower"></member>
    <member name="T:ABB.Robotics.RobotStudio.Stations.BuiltInDataRecorderSignals">
      <summary>
            Gives access to the identities of the built in data recorder signals.
            </summary>
    </member>
    <member name="P:ABB.Robotics.RobotStudio.Stations.BuiltInDataRecorderSignals.ControllerSignals"></member>
    <member name="P:ABB.Robotics.RobotStudio.Stations.BuiltInDataRecorderSignals.SmartComponentSignals"></member>
    <member name="T:ABB.Robotics.RobotStudio.Stations.BuiltInSmartComponentSourceSignals">
      <summary>
            Gives access to built in data recorder signals, that represents information from SmartComponents.
            </summary>
    </member>
    <member name="M:ABB.Robotics.RobotStudio.Stations.BuiltInSmartComponentSourceSignals.GetIOSignal(ABB.Robotics.RobotStudio.Stations.SmartComponent,ABB.Robotics.RobotStudio.Stations.IOSignal)"></member>
    <member name="M:ABB.Robotics.RobotStudio.Stations.BuiltInSmartComponentSourceSignals.GetIOSignalId(ABB.Robotics.RobotStudio.Stations.SmartComponent,ABB.Robotics.RobotStudio.Stations.IOSignal)"></member>
    <member name="M:ABB.Robotics.RobotStudio.Stations.BuiltInSmartComponentSourceSignals.GetPropertySignal(ABB.Robotics.RobotStudio.Stations.SmartComponent,ABB.Robotics.RobotStudio.Stations.DynamicProperty)"></member>
    <member name="M:ABB.Robotics.RobotStudio.Stations.BuiltInSmartComponentSourceSignals.GetPropertySignalId(ABB.Robotics.RobotStudio.Stations.SmartComponent,ABB.Robotics.RobotStudio.Stations.DynamicProperty)"></member>
    <member name="M:ABB.Robotics.RobotStudio.Stations.BuiltInSmartComponentSourceSignals.GetSignals"></member>
    <member name="P:ABB.Robotics.RobotStudio.Stations.BuiltInSmartComponentSourceSignals.IOSignalTag"></member>
    <member name="M:ABB.Robotics.RobotStudio.Stations.BuiltInSmartComponentSourceSignals.IsIOSignal(ABB.Robotics.RobotStudio.DataRecorderSignal)"></member>
    <member name="M:ABB.Robotics.RobotStudio.Stations.BuiltInSmartComponentSourceSignals.IsPropertySignal(ABB.Robotics.RobotStudio.DataRecorderSignal)"></member>
    <member name="M:ABB.Robotics.RobotStudio.Stations.BuiltInSmartComponentSourceSignals.IsSmartComponentSource(ABB.Robotics.RobotStudio.DataRecorderSignal)"></member>
    <member name="P:ABB.Robotics.RobotStudio.Stations.BuiltInSmartComponentSourceSignals.PropertySignalTag"></member>
    <member name="T:ABB.Robotics.RobotStudio.Stations.Camera">
      <summary>
            Represents a camera that can be used to control the view of a GraphicControl.
            </summary>
    </member>
    <member name="M:ABB.Robotics.RobotStudio.Stations.Camera.#ctor">
      <summary>
            Initializes a new instance of the Camera class.
            </summary>
    </member>
    <member name="P:ABB.Robotics.RobotStudio.Stations.Camera.FieldOfView">
      <summary>
            Gets or sets the field of view, in degrees
            </summary>
    </member>
    <member name="P:ABB.Robotics.RobotStudio.Stations.Camera.FollowBehavior">
      <summary>
            Gets or sets a value indicating how the camera will behave when it follows an object.
            </summary>
    </member>
    <member name="P:ABB.Robotics.RobotStudio.Stations.Camera.FollowObject">
      <summary>
            Gets or sets an object that the camera will follow.
            </summary>
    </member>
    <member name="P:ABB.Robotics.RobotStudio.Stations.Camera.LockRotate">
      <summary>
            Gets or sets a value (in radians) indicating how much the user is allowed to rotate the view.
            A negative value disables rotate lock.
            </summary>
    </member>
    <member name="P:ABB.Robotics.RobotStudio.Stations.Camera.LockTranslate">
      <summary>
            Gets or sets a value (in meters) indicating how much the user is allowed to translate (pan) the view.
            A negative value disables translate lock.
            </summary>
    </member>
    <member name="P:ABB.Robotics.RobotStudio.Stations.Camera.LockZoom">
      <summary>
            Gets or sets a value (in meters) indicating how much the user is allowed to zoom the view.
            A negative value disables zoom lock.
            </summary>
    </member>
    <member name="P:ABB.Robotics.RobotStudio.Stations.Camera.LookAt">
      <summary>
            Gets or sets the point which will act as the center of the camera view.
            </summary>
    </member>
    <member name="P:ABB.Robotics.RobotStudio.Stations.Camera.LookFrom">
      <summary>
            Gets or sets the point of view of the camera.
            </summary>
    </member>
    <member name="P:ABB.Robotics.RobotStudio.Stations.Camera.Parent"></member>
    <member name="P:ABB.Robotics.RobotStudio.Stations.Camera.Projection">
      <summary>
            Gets or sets a value indicating how 3D objects are projected.
            </summary>
    </member>
    <member name="M:ABB.Robotics.RobotStudio.Stations.Camera.SetView(ABB.Robotics.Math.Vector3,ABB.Robotics.Math.Vector3,ABB.Robotics.Math.Vector3)"></member>
    <member name="P:ABB.Robotics.RobotStudio.Stations.Camera.UpDirection"></member>
    <member name="P:ABB.Robotics.RobotStudio.Stations.Camera.Visible">
      <summary>
            Gets or sets a value indicating whether the camera will
            be displayed in the graphics.
            </summary>
    </member>
    <member name="T:ABB.Robotics.RobotStudio.Stations.CameraCollection">
      <summary>
            A collection of <see cref="T:ABB.Robotics.RobotStudio.Stations.Camera" /> objects.
            </summary>
    </member>
    <member name="M:ABB.Robotics.RobotStudio.Stations.CameraCollection.Add(ABB.Robotics.RobotStudio.Stations.Camera)">
      <summary>
            Adds a <see cref="T:ABB.Robotics.RobotStudio.Stations.Camera" /> to the collection .
            </summary>
      <param name="camera">The <see cref="T:ABB.Robotics.RobotStudio.Stations.Camera" /> to add to the collection.</param>
    </member>
    <member name="M:ABB.Robotics.RobotStudio.Stations.CameraCollection.Contains(ABB.Robotics.RobotStudio.Stations.Camera)"></member>
    <member name="M:ABB.Robotics.RobotStudio.Stations.CameraCollection.CopyTo(ABB.Robotics.RobotStudio.Stations.Camera[],System.Int32)"></member>
    <member name="M:ABB.Robotics.RobotStudio.Stations.CameraCollection.CopyTo(System.Array,System.Int32)"></member>
    <member name="P:ABB.Robotics.RobotStudio.Stations.CameraCollection.Count"></member>
    <member name="M:ABB.Robotics.RobotStudio.Stations.CameraCollection.GetEnumerator"></member>
    <member name="P:ABB.Robotics.RobotStudio.Stations.CameraCollection.IsSynchronized"></member>
    <member name="P:ABB.Robotics.RobotStudio.Stations.CameraCollection.Item(System.Int32)"></member>
    <member name="P:ABB.Robotics.RobotStudio.Stations.CameraCollection.Parent"></member>
    <member name="M:ABB.Robotics.RobotStudio.Stations.CameraCollection.Remove(ABB.Robotics.RobotStudio.Stations.Camera)">
      <summary>
            Removes a <see cref="T:ABB.Robotics.RobotStudio.Stations.Camera" /> from the collection .
            </summary>
      <param name="camera">The <see cref="T:ABB.Robotics.RobotStudio.Stations.Camera" /> to remove from the collection.</param>
    </member>
    <member name="P:ABB.Robotics.RobotStudio.Stations.CameraCollection.SyncRoot"></member>
    <member name="M:ABB.Robotics.RobotStudio.Stations.CameraCollection.ToArray"></member>
    <member name="T:ABB.Robotics.RobotStudio.Stations.ClipPlane">
      <summary>
            Defines a plane that can be used to clip geometry in a GraphicControl.
            </summary>
    </member>
    <member name="M:ABB.Robotics.RobotStudio.Stations.ClipPlane.#ctor"></member>
    <member name="P:ABB.Robotics.RobotStudio.Stations.ClipPlane.Gfx"></member>
    <member name="P:ABB.Robotics.RobotStudio.Stations.ClipPlane.Plane">
      <summary>
            Returns a Plane that corresponds to the clip plane.
            </summary>
    </member>
    <member name="P:ABB.Robotics.RobotStudio.Stations.ClipPlane.Transform">
      <summary>
            Gets the Transform that defines the clip plane.
            </summary>
    </member>
    <member name="T:ABB.Robotics.RobotStudio.Stations.ClipPlaneCollection"></member>
    <member name="T:ABB.Robotics.RobotStudio.Stations.Coedge">
      <summary>
            A coedge is closely related to an edge. A coedge stores its relationships with adjacent edges and
            with superior owning entities. (In some contexts, the coedge may be viewed as the use of an edge
            by a face or wire.) The data structures formed by these relationships (stored as pointers) and their
            interpretation depend upon the nature of the owning entity.<br /><img src="GeometryTopology.jpg" /></summary>
    </member>
    <member name="P:ABB.Robotics.RobotStudio.Stations.Coedge.Body">
      <summary>
            Gets the <see cref="P:ABB.Robotics.RobotStudio.Stations.Coedge.Body" /> that the <see cref="T:ABB.Robotics.RobotStudio.Stations.Coedge" /> belongs to.
            </summary>
    </member>
    <member name="P:ABB.Robotics.RobotStudio.Stations.Coedge.Edge">
      <summary>
            Gets the <see cref="P:ABB.Robotics.RobotStudio.Stations.Coedge.Edge" /> that the <see cref="T:ABB.Robotics.RobotStudio.Stations.Coedge" /> is associated with.
            </summary>
    </member>
    <member name="P:ABB.Robotics.RobotStudio.Stations.Coedge.EndVertex">
      <summary>
            Gets the end vertex of the coedge.
            </summary>
    </member>
    <member name="M:ABB.Robotics.RobotStudio.Stations.Coedge.FindClosestVertex(ABB.Robotics.Math.Vector3)">
      <summary>Returns the <see cref="T:ABB.Robotics.RobotStudio.Stations.Vertex" /> of the <see cref="T:ABB.Robotics.RobotStudio.Stations.Coedge" /> that is closest to the provided point.</summary>
      <param name="testPoint">The point which to find the closest vertex to.</param>
      <returns>The closest <see cref="T:ABB.Robotics.RobotStudio.Stations.Vertex" />.</returns>
    </member>
    <member name="P:ABB.Robotics.RobotStudio.Stations.Coedge.Next">
      <summary>
            Returns the next coedge connected to this.
            </summary>
    </member>
    <member name="P:ABB.Robotics.RobotStudio.Stations.Coedge.Previous">
      <summary>
            Returns the previous coedge connected to this.
            </summary>
    </member>
    <member name="P:ABB.Robotics.RobotStudio.Stations.Coedge.Reversed">
      <summary>
            Gets whether the coedge is reversed or not.
            </summary>
    </member>
    <member name="P:ABB.Robotics.RobotStudio.Stations.Coedge.StartVertex">
      <summary>
            Gets the start vertex of the coedge.
            </summary>
    </member>
    <member name="T:ABB.Robotics.RobotStudio.Stations.CoedgeCollection">
      <summary>
            A collection of Coedge objects.
            </summary>
    </member>
    <member name="M:ABB.Robotics.RobotStudio.Stations.CoedgeCollection.Contains(ABB.Robotics.RobotStudio.Stations.Coedge)"></member>
    <member name="M:ABB.Robotics.RobotStudio.Stations.CoedgeCollection.CopyTo(ABB.Robotics.RobotStudio.Stations.Coedge[],System.Int32)"></member>
    <member name="M:ABB.Robotics.RobotStudio.Stations.CoedgeCollection.CopyTo(System.Array,System.Int32)"></member>
    <member name="P:ABB.Robotics.RobotStudio.Stations.CoedgeCollection.Count"></member>
    <member name="M:ABB.Robotics.RobotStudio.Stations.CoedgeCollection.GetEnumerator"></member>
    <member name="P:ABB.Robotics.RobotStudio.Stations.CoedgeCollection.IsSynchronized"></member>
    <member name="P:ABB.Robotics.RobotStudio.Stations.CoedgeCollection.Item(System.Int32)"></member>
    <member name="P:ABB.Robotics.RobotStudio.Stations.CoedgeCollection.Parent"></member>
    <member name="P:ABB.Robotics.RobotStudio.Stations.CoedgeCollection.SyncRoot"></member>
    <member name="M:ABB.Robotics.RobotStudio.Stations.CoedgeCollection.ToArray"></member>
    <member name="T:ABB.Robotics.RobotStudio.Stations.CollisionDetector">
      <summary>
            Provides collision detection on <see cref="T:ABB.Robotics.RobotStudio.Stations.CollisionSet">Collision Sets</see>.
            </summary>
    </member>
    <member name="M:ABB.Robotics.RobotStudio.Stations.CollisionDetector.#ctor"></member>
    <member name="P:ABB.Robotics.RobotStudio.Stations.CollisionDetector.AutoCheck">
      <summary>
            Gets or sets a value indicating whether to check for collisions
            whenever the graphic model is updated.
            </summary>
    </member>
    <member name="M:ABB.Robotics.RobotStudio.Stations.CollisionDetector.CheckCollision(ABB.Robotics.RobotStudio.Stations.GraphicComponent,ABB.Robotics.RobotStudio.Stations.Forms.TemporaryGraphic,System.Double)">
      <summary>
            Calculates whether an object intersects with a TemporaryGraphic object.
            </summary>
      <param name="object1">First object.</param>
      <param name="object2">Second object.</param>
      <param name="nearMiss">Near miss distance.</param>
      <returns>A value indicating whether the objects collide or are closer than the near miss distance.</returns>
    </member>
    <member name="M:ABB.Robotics.RobotStudio.Stations.CollisionDetector.CheckCollision(ABB.Robotics.RobotStudio.Stations.GraphicComponent,ABB.Robotics.RobotStudio.Stations.GraphicComponent,System.Double)">
      <summary>
            Calculates whether two objects intersect, or whether an object intersects any other object.
            </summary>
      <param name="object1">First object.</param>
      <param name="object2">Second object.</param>
      <param name="nearMiss">Near miss distance.</param>
      <returns>A value indicating whether the objects collide or are closer than the near miss distance.</returns>
    </member>
    <member name="M:ABB.Robotics.RobotStudio.Stations.CollisionDetector.CheckCollision(ABB.Robotics.RobotStudio.Stations.GraphicComponent,ABB.Robotics.RobotStudio.Stations.GraphicComponent,System.Double,ABB.Robotics.RobotStudio.Stations.DetectableUsage,ABB.Robotics.RobotStudio.Stations.Part@,ABB.Robotics.RobotStudio.Stations.Part@)">
      <summary>
            Calculates whether two objects intersect, or whether an object intersects any other object, and returns the intersecting Parts.
            </summary>
      <param name="object1">First object.</param>
      <param name="object2">Second object.</param>
      <param name="nearMiss">Near miss distance.</param>
      <param name="detectableUsage">Specifies how the Detectable property is used when
            checking for collision between two <see cref="T:ABB.Robotics.RobotStudio.Stations.GraphicComponent">GraphicComponents</see>.</param>
      <param name="part1">Part in first object.</param>
      <param name="part2">Part in second object.</param>
      <returns>A value indicating whether the objects collide or are closer than the near miss distance.</returns>
    </member>
    <member name="M:ABB.Robotics.RobotStudio.Stations.CollisionDetector.CheckCollision(ABB.Robotics.RobotStudio.Stations.GraphicComponent,ABB.Robotics.RobotStudio.Stations.GraphicComponent,System.Double,ABB.Robotics.RobotStudio.Stations.Part@,ABB.Robotics.RobotStudio.Stations.Part@)">
      <summary>
            Calculates whether two objects intersect, or whether an object intersects any other object, and returns the intersecting Parts.
            </summary>
      <param name="object1">First object.</param>
      <param name="object2">Second object.</param>
      <param name="nearMiss">Near miss distance.</param>
      <param name="part1">Part in first object.</param>
      <param name="part2">Part in second object.</param>
      <returns>A value indicating whether the objects collide or are closer than the near miss distance.</returns>
    </member>
    <member name="M:ABB.Robotics.RobotStudio.Stations.CollisionDetector.CheckCollisions(ABB.Robotics.RobotStudio.Stations.CollisionSet)">
      <summary>
            Check collisions for a collision set.
            </summary>
      <param name="collisionSet">The <see cref="T:ABB.Robotics.RobotStudio.Stations.Station" /> to check for collisions.</param>
    </member>
    <member name="M:ABB.Robotics.RobotStudio.Stations.CollisionDetector.CheckCollisions(ABB.Robotics.RobotStudio.Stations.Station)">
      <summary>
            Check collisions for all collision sets in the station.
            </summary>
      <param name="station">The <see cref="T:ABB.Robotics.RobotStudio.Stations.Station" /> to check for collisions.</param>
    </member>
    <member name="M:ABB.Robotics.RobotStudio.Stations.CollisionDetector.CheckLineIntersection(ABB.Robotics.RobotStudio.Stations.Station,ABB.Robotics.Math.Vector3,ABB.Robotics.Math.Vector3,System.Double,ABB.Robotics.RobotStudio.Stations.Part@,ABB.Robotics.Math.Vector3@)">
      <summary>
            Calculates whether an line between two points intersects with any graphical object in a station.
            </summary>
      <param name="station">The <see cref="T:ABB.Robotics.RobotStudio.Stations.Station" /> to check for intersection.</param>
      <param name="start">Start point of the intersection line.</param>
      <param name="end">End point of the intersection line.</param>
      <param name="radius">Radius of the intersection line.</param>
      <param name="closestPart">Returns the intersecting <see cref="T:ABB.Robotics.RobotStudio.Stations.Part" /> closest to the start point.</param>
      <param name="intersectionPoint">Returns the intersection point.</param>
      <returns>A value indicating whether any object intersects with the line.</returns>
    </member>
    <member name="E:ABB.Robotics.RobotStudio.Stations.CollisionDetector.Collision">
      <summary>
            Occurs when a collision starts, ends or changes type.
            </summary>
    </member>
    <member name="P:ABB.Robotics.RobotStudio.Stations.CollisionDetector.FastCheck">
      <summary>
            Gets or sets a value indicating whether to perform collision check only
            on bounding boxes and not on triangles.
            </summary>
    </member>
    <member name="M:ABB.Robotics.RobotStudio.Stations.CollisionDetector.MinimumDistance(ABB.Robotics.RobotStudio.ProjectObject,ABB.Robotics.RobotStudio.ProjectObject,ABB.Robotics.Math.Vector3@,ABB.Robotics.Math.Vector3@)">
      <summary>
            Calculates the shortest distance between two graphic objects, as well as the
            closest points on the objects.
            </summary>
      <param name="object1">First object. Must be GraphicComponent, Body or Face.</param>
      <param name="object2">Second object. Must be GraphicComponent, Body or Face.</param>
      <param name="point1">Returns the closest point on the first object.</param>
      <param name="point2">Returns the closest point on the second object.</param>
      <returns>The shortest distance between the objects.</returns>
    </member>
    <member name="M:ABB.Robotics.RobotStudio.Stations.CollisionDetector.MinimumDistance(ABB.Robotics.RobotStudio.ProjectObject,ABB.Robotics.RobotStudio.ProjectObject,ABB.Robotics.Math.Vector3@,ABB.Robotics.Math.Vector3@,ABB.Robotics.RobotStudio.Stations.Part@,ABB.Robotics.RobotStudio.Stations.Part@)">
      <summary>
            Calculates the shortest distance between two graphic objects, as well as the
            closest points on the objects.
            </summary>
      <param name="object1">First object. Must be GraphicComponent, Body or Face.</param>
      <param name="object2">Second object. Must be GraphicComponent, Body or Face.</param>
      <param name="point1">Returns the closest point on the first object.</param>
      <param name="point2">Returns the closest point on the second object.</param>
      <param name="part1">Returns the closest Part in the first object.</param>
      <param name="part2">Returns the closest Part in the second object.</param>
      <returns>The shortest distance between the objects, or -1 if the calculation fails.</returns>
    </member>
    <member name="M:ABB.Robotics.RobotStudio.Stations.CollisionDetector.PointDistance(ABB.Robotics.Math.Vector3,ABB.Robotics.RobotStudio.ProjectObject,ABB.Robotics.Math.Vector3@,ABB.Robotics.RobotStudio.Stations.Part@)">
      <summary>
            Calculates the shortest distance from a point to a graphic object,
            as well as the closest point on the object.
            </summary>
      <param name="testPoint">Point to test (in world coordinates)</param>
      <param name="testObject">Object to test. Must be GraphicComponent, Body or Face.</param>
      <param name="hitPoint">Returns the closest point on the object.</param>
      <param name="hitPart">Returns the part where the closest point is.</param>
      <returns>The shortest distance between the point and the objects, or -1 if the calculation fails.</returns>
    </member>
    <member name="M:ABB.Robotics.RobotStudio.Stations.CollisionDetector.ResetCollisions">
      <summary>
            Reset collisions and highlights.
            </summary>
    </member>
    <member name="M:ABB.Robotics.RobotStudio.Stations.CollisionDetector.ResetCollisions(ABB.Robotics.RobotStudio.Stations.CollisionSet)">
      <summary>
            Reset collisions and highlights for a collision set.
            </summary>
    </member>
    <member name="T:ABB.Robotics.RobotStudio.Stations.CollisionEvent">
      <summary>
            Specifies the collision event.
            </summary>
    </member>
    <member name="F:ABB.Robotics.RobotStudio.Stations.CollisionEvent.NearMissStarted"></member>
    <member name="F:ABB.Robotics.RobotStudio.Stations.CollisionEvent.CollisionStarted"></member>
    <member name="F:ABB.Robotics.RobotStudio.Stations.CollisionEvent.CollisionEnded"></member>
    <member name="F:ABB.Robotics.RobotStudio.Stations.CollisionEvent.NearMissEnded"></member>
    <member name="T:ABB.Robotics.RobotStudio.Stations.CollisionEventArgs">
      <summary>
            Provides data for the Collision event.
            </summary>
    </member>
    <member name="P:ABB.Robotics.RobotStudio.Stations.CollisionEventArgs.CollisionEvent">
      <summary>
            Gets the collision event.
            </summary>
    </member>
    <member name="P:ABB.Robotics.RobotStudio.Stations.CollisionEventArgs.CollisionSet">
      <summary>
            Gets the <see cref="P:ABB.Robotics.RobotStudio.Stations.CollisionEventArgs.CollisionSet" /> that caused the collision.
            </summary>
    </member>
    <member name="P:ABB.Robotics.RobotStudio.Stations.CollisionEventArgs.FirstPart">
      <summary>
            Gets the first colliding part.
            </summary>
    </member>
    <member name="P:ABB.Robotics.RobotStudio.Stations.CollisionEventArgs.SecondPart">
      <summary>
            Gets the second colliding part.
            </summary>
    </member>
    <member name="T:ABB.Robotics.RobotStudio.Stations.CollisionEventHandler">
      <summary>
            Represents the method that will handle the Collision event.
            </summary>
    </member>
    <member name="T:ABB.Robotics.RobotStudio.Stations.CollisionObjectCollection">
      <summary>
            A collection of GraphicComponent collision objects.
            </summary>
    </member>
    <member name="M:ABB.Robotics.RobotStudio.Stations.CollisionObjectCollection.Add(ABB.Robotics.RobotStudio.Stations.GraphicComponent)">
      <summary>
            Adds a <see cref="T:ABB.Robotics.RobotStudio.Stations.GraphicComponent" /> to the collection.
            </summary>
      <param name="collisionObject">The <see cref="T:ABB.Robotics.RobotStudio.Stations.GraphicComponent" /> to add to the collection.</param>
    </member>
    <member name="M:ABB.Robotics.RobotStudio.Stations.CollisionObjectCollection.Contains(ABB.Robotics.RobotStudio.Stations.GraphicComponent)"></member>
    <member name="M:ABB.Robotics.RobotStudio.Stations.CollisionObjectCollection.CopyTo(ABB.Robotics.RobotStudio.Stations.GraphicComponent[],System.Int32)"></member>
    <member name="M:ABB.Robotics.RobotStudio.Stations.CollisionObjectCollection.CopyTo(System.Array,System.Int32)"></member>
    <member name="P:ABB.Robotics.RobotStudio.Stations.CollisionObjectCollection.Count"></member>
    <member name="M:ABB.Robotics.RobotStudio.Stations.CollisionObjectCollection.GetEnumerator"></member>
    <member name="P:ABB.Robotics.RobotStudio.Stations.CollisionObjectCollection.IsSynchronized"></member>
    <member name="P:ABB.Robotics.RobotStudio.Stations.CollisionObjectCollection.Item(System.Int32)"></member>
    <member name="P:ABB.Robotics.RobotStudio.Stations.CollisionObjectCollection.Parent"></member>
    <member name="M:ABB.Robotics.RobotStudio.Stations.CollisionObjectCollection.Remove(ABB.Robotics.RobotStudio.Stations.GraphicComponent)">
      <summary>
            Remove a <see cref="T:ABB.Robotics.RobotStudio.Stations.GraphicComponent" /> from the collection.
            </summary>
      <param name="collisionObject">The <see cref="T:ABB.Robotics.RobotStudio.Stations.GraphicComponent" /> to remove from the collection.</param>
    </member>
    <member name="P:ABB.Robotics.RobotStudio.Stations.CollisionObjectCollection.SyncRoot"></member>
    <member name="M:ABB.Robotics.RobotStudio.Stations.CollisionObjectCollection.ToArray"></member>
    <member name="T:ABB.Robotics.RobotStudio.Stations.CollisionSet">
      <summary>
            Defines two groups of objects that will be tested for collision against eachother
            </summary>
    </member>
    <member name="M:ABB.Robotics.RobotStudio.Stations.CollisionSet.#ctor">
      <summary>
            Initializes a new instance of the CollisionSet class.
            </summary>
    </member>
    <member name="P:ABB.Robotics.RobotStudio.Stations.CollisionSet.Active">
      <summary>
            Gets or set whether this set will be including when checking collisions
            </summary>
    </member>
    <member name="P:ABB.Robotics.RobotStudio.Stations.CollisionSet.CollisionColor">
      <summary>
            Gets or sets the color of colliding objects
            </summary>
    </member>
    <member name="P:ABB.Robotics.RobotStudio.Stations.CollisionSet.FirstGroup">
      <summary>
            Gets the first group of objects
            </summary>
    </member>
    <member name="M:ABB.Robotics.RobotStudio.Stations.CollisionSet.GetCurrentState">
      <summary>
            Returns the current state of collisions in the set.
            </summary>
      <returns>
            CollisionType.Collision if there is any collision occurring,
            CollisionType.NearMiss if there is any near miss (but no collision) occurring,
            CollisionType.None otherwise.
            </returns>
    </member>
    <member name="P:ABB.Robotics.RobotStudio.Stations.CollisionSet.Highlight">
      <summary>
            Gets or sets whether colliding parts will be highlighted
            </summary>
    </member>
    <member name="P:ABB.Robotics.RobotStudio.Stations.CollisionSet.NearMissColor">
      <summary>
            Gets or sets the color of objects in a near miss
            </summary>
    </member>
    <member name="P:ABB.Robotics.RobotStudio.Stations.CollisionSet.NearMissDistance">
      <summary>
            Gets or sets the distance at which near miss occurs
            </summary>
    </member>
    <member name="P:ABB.Robotics.RobotStudio.Stations.CollisionSet.Parent">
      <summary>
            The Parent property returns a reference to the parent Station object.
            </summary>
    </member>
    <member name="P:ABB.Robotics.RobotStudio.Stations.CollisionSet.SecondGroup">
      <summary>
            Gets the second group of objects
            </summary>
    </member>
    <member name="T:ABB.Robotics.RobotStudio.Stations.CollisionSetCollection">
      <summary>
            A collection of CollisionSet objects.
            </summary>
    </member>
    <member name="M:ABB.Robotics.RobotStudio.Stations.CollisionSetCollection.Add(ABB.Robotics.RobotStudio.Stations.CollisionSet)">
      <summary>
            Adds a <see cref="T:ABB.Robotics.RobotStudio.Stations.CollisionSet" /> to the collection.
            </summary>
      <param name="collisionSet">The <see cref="T:ABB.Robotics.RobotStudio.Stations.CollisionSet" /> to add to the collection.</param>
    </member>
    <member name="M:ABB.Robotics.RobotStudio.Stations.CollisionSetCollection.Contains(ABB.Robotics.RobotStudio.Stations.CollisionSet)"></member>
    <member name="M:ABB.Robotics.RobotStudio.Stations.CollisionSetCollection.CopyTo(ABB.Robotics.RobotStudio.Stations.CollisionSet[],System.Int32)"></member>
    <member name="M:ABB.Robotics.RobotStudio.Stations.CollisionSetCollection.CopyTo(System.Array,System.Int32)"></member>
    <member name="P:ABB.Robotics.RobotStudio.Stations.CollisionSetCollection.Count"></member>
    <member name="M:ABB.Robotics.RobotStudio.Stations.CollisionSetCollection.GetEnumerator"></member>
    <member name="P:ABB.Robotics.RobotStudio.Stations.CollisionSetCollection.IsSynchronized"></member>
    <member name="P:ABB.Robotics.RobotStudio.Stations.CollisionSetCollection.Item(System.Int32)"></member>
    <member name="P:ABB.Robotics.RobotStudio.Stations.CollisionSetCollection.Parent"></member>
    <member name="M:ABB.Robotics.RobotStudio.Stations.CollisionSetCollection.Remove(ABB.Robotics.RobotStudio.Stations.CollisionSet)">
      <summary>
            Remove a <see cref="T:ABB.Robotics.RobotStudio.Stations.CollisionSet" /> from the collection.
            </summary>
      <param name="collisionSet">The <see cref="T:ABB.Robotics.RobotStudio.Stations.CollisionSet" /> to remove from the collection.</param>
    </member>
    <member name="P:ABB.Robotics.RobotStudio.Stations.CollisionSetCollection.SyncRoot"></member>
    <member name="M:ABB.Robotics.RobotStudio.Stations.CollisionSetCollection.ToArray"></member>
    <member name="T:ABB.Robotics.RobotStudio.Stations.CollisionType">
      <summary>
            Specifies the collision type.
            </summary>
    </member>
    <member name="F:ABB.Robotics.RobotStudio.Stations.CollisionType.None"></member>
    <member name="F:ABB.Robotics.RobotStudio.Stations.CollisionType.NearMiss"></member>
    <member name="F:ABB.Robotics.RobotStudio.Stations.CollisionType.Collision"></member>
    <member name="T:ABB.Robotics.RobotStudio.Stations.ComponentLibraryClassification">
      <summary>
            Specifies the classification of a <see cref="T:ABB.Robotics.RobotStudio.Stations.GraphicComponentLibrary" />.
            </summary>
    </member>
    <member name="F:ABB.Robotics.RobotStudio.Stations.ComponentLibraryClassification.Undefined"></member>
    <member name="F:ABB.Robotics.RobotStudio.Stations.ComponentLibraryClassification.Group"></member>
    <member name="F:ABB.Robotics.RobotStudio.Stations.ComponentLibraryClassification.Part"></member>
    <member name="F:ABB.Robotics.RobotStudio.Stations.ComponentLibraryClassification.Robot"></member>
    <member name="F:ABB.Robotics.RobotStudio.Stations.ComponentLibraryClassification.Tool"></member>
    <member name="T:ABB.Robotics.RobotStudio.Stations.ConfigurationData">
      <summary>
            Represents information about the robot arm configuration, to be used when reaching a target.
            Given a tool and a target is is usually possible for the robot to reach it, using different set of axes angles.
            Most often you want to use the same configuration during an entire path of execution. This reduces robot movement.
            This structure has a corresponding RAPID data type called <b>confdata</b>.
            The <see cref="T:ABB.Robotics.RobotStudio.Stations.ConfigurationData" /> is used to unambigously denote one of a set of possible robot arm configurations.
            It is done by specifying in which quadrant, four of the robot axes, should be in. It is not necessecary to specify this value for all axes.
            Depending on the robot model, the axes used to denote cpnfiguration, and the interpretation of the configuration can vary. Please refer to the <b>RAPID Reference Manual</b>.
            </summary>
    </member>
    <member name="P:ABB.Robotics.RobotStudio.Stations.ConfigurationData.Cf1">
      <summary>
            The quadrant of axis 1.
            </summary>
    </member>
    <member name="P:ABB.Robotics.RobotStudio.Stations.ConfigurationData.Cf4">
      <summary>
            The quadrant of axis 4.
            </summary>
    </member>
    <member name="P:ABB.Robotics.RobotStudio.Stations.ConfigurationData.Cf6">
      <summary>
            The quadrant of axis 6.
            </summary>
    </member>
    <member name="P:ABB.Robotics.RobotStudio.Stations.ConfigurationData.Cfx">
      <summary>
            The quadrant of an axis that is not axis 1,4 or 6. Its usage depends on the robot model. For many robot models this value is not used.
            </summary>
    </member>
    <member name="M:ABB.Robotics.RobotStudio.Stations.ConfigurationData.Equals(System.Object)"></member>
    <member name="M:ABB.Robotics.RobotStudio.Stations.ConfigurationData.GetConfigurationData">
      <summary>
            Returns the axis quadrants as an array of integers.
            </summary>
      <returns>An array of integer containing four elements which specifies the four axis quadrants.</returns>
    </member>
    <member name="M:ABB.Robotics.RobotStudio.Stations.ConfigurationData.GetHashCode"></member>
    <member name="M:ABB.Robotics.RobotStudio.Stations.ConfigurationData.GetJointValues">
      <summary>
            Returns the joint values that where set when this class was returned from GetConfiguration().
            </summary>
      <returns> An array of double specifying the joint values a specific mechanism had, when it was positioned in this configuration. If this information is not known, an empty array is returned.</returns>
    </member>
    <member name="M:ABB.Robotics.RobotStudio.Stations.ConfigurationData.op_Equality(ABB.Robotics.RobotStudio.Stations.ConfigurationData,ABB.Robotics.RobotStudio.Stations.ConfigurationData)"></member>
    <member name="M:ABB.Robotics.RobotStudio.Stations.ConfigurationData.op_Inequality(ABB.Robotics.RobotStudio.Stations.ConfigurationData,ABB.Robotics.RobotStudio.Stations.ConfigurationData)"></member>
    <member name="M:ABB.Robotics.RobotStudio.Stations.ConfigurationData.SetConfigurationData(ABB.Robotics.RobotStudio.Stations.ConfigurationData@,System.Int32[])">
      <summary>
            Sets the axis quadrants for a given configuration data, as specified by an array of integers.
            </summary>
      <param name="configData">The <see cref="T:ABB.Robotics.RobotStudio.Stations.ConfigurationData" /> instance that shall be modified.</param>
      <param name="values">An array of integer containing four elements which specifies the four axis quadrants.</param>
      <exception cref="T:System.ArgumentException">When size of <b>values</b> are not 4.</exception>
    </member>
    <member name="T:ABB.Robotics.RobotStudio.Stations.ConfigurationStatus">
      <summary>
            Specifies if it is known if a target is reachable with its current configuration.
            </summary>
    </member>
    <member name="F:ABB.Robotics.RobotStudio.Stations.ConfigurationStatus.NoSolutions"></member>
    <member name="F:ABB.Robotics.RobotStudio.Stations.ConfigurationStatus.Undefined"></member>
    <member name="F:ABB.Robotics.RobotStudio.Stations.ConfigurationStatus.Defined"></member>
    <member name="F:ABB.Robotics.RobotStudio.Stations.ConfigurationStatus.Executed"></member>
    <member name="T:ABB.Robotics.RobotStudio.Stations.ControllerMappingState">
      <summary>
            Defines the different mapping states for an RsIrc5Controller. See <see cref="P:ABB.Robotics.RobotStudio.Stations.RsIrc5Controller.MappingState" /> property.
            </summary>
    </member>
    <member name="F:ABB.Robotics.RobotStudio.Stations.ControllerMappingState.Unmapped">
      <summary>Controller has not been mapped to the station</summary>
    </member>
    <member name="F:ABB.Robotics.RobotStudio.Stations.ControllerMappingState.Mapped">
      <summary>Controller has been fully mapped to the station</summary>
    </member>
    <member name="F:ABB.Robotics.RobotStudio.Stations.ControllerMappingState.NotUpdated">
      <summary>Controller has been mapped to the station, but the mapping could be out of sync or incorrect.</summary>
    </member>
    <member name="T:ABB.Robotics.RobotStudio.Stations.CurveSection">
      <summary>
            Represents a section of a <see cref="T:ABB.Robotics.RobotStudio.Stations.Wire" /> limited by two vertices.
            </summary>
    </member>
    <member name="M:ABB.Robotics.RobotStudio.Stations.CurveSection.#ctor(ABB.Robotics.RobotStudio.Stations.Edge[],ABB.Robotics.Math.Vector3,ABB.Robotics.Math.Vector3)">
      <summary> 
            Initializes a new <see cref="T:ABB.Robotics.RobotStudio.Stations.CurveSection" /> instance with the specified edges and start and end vectors.
            </summary>
      <param name="edges">The edges contained by this section.</param>
      <param name="sectionStart">The start vector of the section.</param>
      <param name="sectionEnd">The end vector of the section.</param>
    </member>
    <member name="M:ABB.Robotics.RobotStudio.Stations.CurveSection.GetEdges">
      <summary>Returns an array of <see cref="T:ABB.Robotics.RobotStudio.Stations.Edge" /> objects that the <see cref="T:ABB.Robotics.RobotStudio.Stations.CurveSection" /> contains.</summary>
    </member>
    <member name="P:ABB.Robotics.RobotStudio.Stations.CurveSection.SectionEnd">
      <summary>
            Gets or sets the end vector of this section.
            </summary>
    </member>
    <member name="P:ABB.Robotics.RobotStudio.Stations.CurveSection.SectionStart">
      <summary>
            Gets or sets the start vector of this section.
            </summary>
    </member>
    <member name="M:ABB.Robotics.RobotStudio.Stations.CurveSection.SetEdges(ABB.Robotics.RobotStudio.Stations.Edge[])">
      <summary>Sets the edges that should be contained in the <see cref="T:ABB.Robotics.RobotStudio.Stations.CurveSection" />.</summary>
      <param name="value">The array of edges.</param>
    </member>
    <member name="T:ABB.Robotics.RobotStudio.Stations.DenavitHartenbergParameters">
      <summary>
            The Denavit-Hartenberg parameters (also called DH parameters) are the four parameters associated with a particular
            convention for attaching reference frames to the links of a spatial kinematic chain, or robot manipulator.
            </summary>
    </member>
    <member name="M:ABB.Robotics.RobotStudio.Stations.DenavitHartenbergParameters.#ctor(System.Double,System.Double,System.Double,System.Double)">
      <summary>
            Initializes a new instance of the DenavitHartenbergParameters struct using specified parameter values.
            </summary>
      <param name="d">Offset along previous z to the common normal.</param>
      <param name="theta">Angle about previous z, from old x to new x.</param>
      <param name="a">Length of the common normal. Assuming a revolute joint, this is the radius about previous z.</param>
      <param name="alpha">Angle about common normal, from old z axis to new z axis.</param>
    </member>
    <member name="P:ABB.Robotics.RobotStudio.Stations.DenavitHartenbergParameters.A">
      <summary>
            Length of the common normal. Assuming a revolute joint, this is the radius about previous z.
            </summary>
    </member>
    <member name="P:ABB.Robotics.RobotStudio.Stations.DenavitHartenbergParameters.Alpha">
      <summary>
            Angle about common normal, from old z axis to new z axis.
            </summary>
    </member>
    <member name="P:ABB.Robotics.RobotStudio.Stations.DenavitHartenbergParameters.D">
      <summary>
            Offset along previous z to the common normal.
            </summary>
    </member>
    <member name="M:ABB.Robotics.RobotStudio.Stations.DenavitHartenbergParameters.Equals(System.Object)"></member>
    <member name="M:ABB.Robotics.RobotStudio.Stations.DenavitHartenbergParameters.GetHashCode"></member>
    <member name="M:ABB.Robotics.RobotStudio.Stations.DenavitHartenbergParameters.op_Equality(ABB.Robotics.RobotStudio.Stations.DenavitHartenbergParameters,ABB.Robotics.RobotStudio.Stations.DenavitHartenbergParameters)"></member>
    <member name="M:ABB.Robotics.RobotStudio.Stations.DenavitHartenbergParameters.op_Inequality(ABB.Robotics.RobotStudio.Stations.DenavitHartenbergParameters,ABB.Robotics.RobotStudio.Stations.DenavitHartenbergParameters)"></member>
    <member name="P:ABB.Robotics.RobotStudio.Stations.DenavitHartenbergParameters.Theta">
      <summary>
            Angle about previous z, from old x to new x.
            </summary>
    </member>
    <member name="M:ABB.Robotics.RobotStudio.Stations.DenavitHartenbergParameters.ToString"></member>
    <member name="T:ABB.Robotics.RobotStudio.Stations.DetailLevels">
      <summary>
            Specifies the detail levels used when creating a graphical representation
            of a geometric entity (faceting).
            </summary>
    </member>
    <member name="F:ABB.Robotics.RobotStudio.Stations.DetailLevels.Default">
      <summary>
            Specifies that the default detail levels (specified in options) will be used.
            </summary>
    </member>
    <member name="F:ABB.Robotics.RobotStudio.Stations.DetailLevels.Coarse"></member>
    <member name="F:ABB.Robotics.RobotStudio.Stations.DetailLevels.Medium"></member>
    <member name="F:ABB.Robotics.RobotStudio.Stations.DetailLevels.Fine"></member>
    <member name="T:ABB.Robotics.RobotStudio.Stations.DetectableUsage">
      <summary>
            Specifies how the <see cref="T:ABB.Robotics.RobotStudio.Stations.CollisionDetector" /> uses the Detectable property
            when checking for collision between two <see cref="T:ABB.Robotics.RobotStudio.Stations.GraphicComponent">GraphicComponents</see>.
            </summary>
    </member>
    <member name="F:ABB.Robotics.RobotStudio.Stations.DetectableUsage.Ignore">
      <summary>
            The Detectable property is ignored
            </summary>
    </member>
    <member name="F:ABB.Robotics.RobotStudio.Stations.DetectableUsage.Either">
      <summary>
            The pair is skipped if either object has Detectable set to false.
            </summary>
    </member>
    <member name="F:ABB.Robotics.RobotStudio.Stations.DetectableUsage.Both">
      <summary>
            The pair is skipped if both objects has Detectable set to false.
            </summary>
    </member>
    <member name="T:ABB.Robotics.RobotStudio.Stations.DynamicProperty">
      <summary> 
            An object attached to a <see cref="T:ABB.Robotics.RobotStudio.Stations.SmartComponent" /> that has value, type and
            attributes. The property value is used to control the behavior of the <see cref="T:ABB.Robotics.RobotStudio.Stations.SmartComponent" /></summary>
    </member>
    <member name="M:ABB.Robotics.RobotStudio.Stations.DynamicProperty.#ctor(System.String,System.String)">
      <summary>
            Creates a new instance of the DynamicProperty class.
            </summary>
      <param name="name">Name of the DynamicProperty.</param>
      <param name="valueType">The <see cref="T:System.Type" /> name of the DynamicProperty.</param>
    </member>
    <member name="P:ABB.Robotics.RobotStudio.Stations.DynamicProperty.Attributes">
      <summary>
            Gets a <see cref="T:ABB.Robotics.RobotStudio.AttributeCollection" /> describing different aspects of this property. 
            Certain attributes are used by the RobotStudio user interface, see <see cref="T:ABB.Robotics.RobotStudio.Stations.KnownAttributeKey" />.
            </summary>
    </member>
    <member name="P:ABB.Robotics.RobotStudio.Stations.DynamicProperty.Description">
      <summary>
            Gets a localized description for this property.
            </summary>
    </member>
    <member name="P:ABB.Robotics.RobotStudio.Stations.DynamicProperty.DisplayValue">
      <summary>
            Returns a string representation of <see cref="P:ABB.Robotics.RobotStudio.Stations.DynamicProperty.Value" />.
            </summary>
    </member>
    <member name="M:ABB.Robotics.RobotStudio.Stations.DynamicProperty.GetBindings">
      <summary>
            Returns an array of bindings from this property to other properties.
            </summary>
      <returns>
            An array of <see cref="T:ABB.Robotics.RobotStudio.Stations.PropertyBinding" /> containing the bindings.
            </returns>
    </member>
    <member name="M:ABB.Robotics.RobotStudio.Stations.DynamicProperty.GetValidTypes">
      <summary>
            Returns an array of all <see cref="T:System.Type">Types</see> that are valid
            for constructing a <see cref="T:ABB.Robotics.RobotStudio.Stations.DynamicProperty" />.
            </summary>
    </member>
    <member name="P:ABB.Robotics.RobotStudio.Stations.DynamicProperty.Name">
      <summary>
            Get the name of the DynamicProperty.
            </summary>
    </member>
    <member name="P:ABB.Robotics.RobotStudio.Stations.DynamicProperty.Parent"></member>
    <member name="P:ABB.Robotics.RobotStudio.Stations.DynamicProperty.ReadOnly">
      <summary>
            Gets or sets a value indicating if the value of this property shall be possible to modify in a user interface or not.
            </summary>
    </member>
    <member name="M:ABB.Robotics.RobotStudio.Stations.DynamicProperty.ToString"></member>
    <member name="M:ABB.Robotics.RobotStudio.Stations.DynamicProperty.TrySetValue(System.Object)">
      <summary>
            Try to set the specified value on the property. A value validation is performed. The value is set only if it is valid.
            </summary>
      <returns>
            A <see cref="T:ABB.Robotics.RobotStudio.Stations.ValueValidationInfo" /> that specifies the result of the validation.
            </returns>
    </member>
    <member name="P:ABB.Robotics.RobotStudio.Stations.DynamicProperty.UIVisible">
      <summary>
            Gets or set a value indicating if this property should normally be visible in a user interface or not. 
            It shall be used as a hint for user interface implementors.
            </summary>
    </member>
    <member name="M:ABB.Robotics.RobotStudio.Stations.DynamicProperty.ValidateValue(System.Object)">
      <summary>
            Check if its possible to set the specified value on this property, given the property type and restrictions.
            </summary>
      <returns>
            A <see cref="T:ABB.Robotics.RobotStudio.Stations.ValueValidationInfo" /> that specifies the result of the validation.
            </returns>
    </member>
    <member name="P:ABB.Robotics.RobotStudio.Stations.DynamicProperty.Value">
      <summary>
            Gets or sets the property value.
            </summary>
    </member>
    <member name="P:ABB.Robotics.RobotStudio.Stations.DynamicProperty.ValueType">
      <summary>
            Get the associated <see cref="T:System.Type" />.
            </summary>
    </member>
    <member name="T:ABB.Robotics.RobotStudio.Stations.DynamicPropertyChangedEventArgs"></member>
    <member name="P:ABB.Robotics.RobotStudio.Stations.DynamicPropertyChangedEventArgs.OldValue"></member>
    <member name="P:ABB.Robotics.RobotStudio.Stations.DynamicPropertyChangedEventArgs.Property"></member>
    <member name="T:ABB.Robotics.RobotStudio.Stations.DynamicPropertyChangedEventHandler"></member>
    <member name="T:ABB.Robotics.RobotStudio.Stations.DynamicPropertyCollection">
      <summary>
            Represents a collection of <see cref="T:ABB.Robotics.RobotStudio.Stations.DynamicProperty">DynamicProperties</see> attached to a
            <see cref="T:ABB.Robotics.RobotStudio.Stations.SmartComponent" />.
            </summary>
    </member>
    <member name="M:ABB.Robotics.RobotStudio.Stations.DynamicPropertyCollection.Add(ABB.Robotics.RobotStudio.Stations.DynamicProperty)">
      <summary>
            Adds a property to this DynamicPropertyCollection object.
            </summary>
      <param name="dynamicProperty">The property to be added.</param>
    </member>
    <member name="E:ABB.Robotics.RobotStudio.Stations.DynamicPropertyCollection.Changed">
      <summary>
            Raised when an item is added to or removed from the collection
            </summary>
    </member>
    <member name="M:ABB.Robotics.RobotStudio.Stations.DynamicPropertyCollection.Contains(System.String)">
      <summary>
            Determines if the <b>DynamicPropertyCollection</b> contains a specific id.
            </summary>
    </member>
    <member name="M:ABB.Robotics.RobotStudio.Stations.DynamicPropertyCollection.CopyTo(ABB.Robotics.RobotStudio.Stations.DynamicProperty[],System.Int32)"></member>
    <member name="M:ABB.Robotics.RobotStudio.Stations.DynamicPropertyCollection.CopyTo(System.Array,System.Int32)"></member>
    <member name="P:ABB.Robotics.RobotStudio.Stations.DynamicPropertyCollection.Count">
      <summary>
            Gets the number of properties contained in the <see cref="T:ABB.Robotics.RobotStudio.Stations.DynamicPropertyCollection" />.
            </summary>
    </member>
    <member name="M:ABB.Robotics.RobotStudio.Stations.DynamicPropertyCollection.GetEnumerator">
      <summary>
            Returns an <see cref="T:System.Collections.IEnumerator" /> that iterates over the keys in the <b>DynamicPropertyCollection</b>.
            </summary>
      <returns>
            An <see cref="T:System.Collections.IEnumerator" /> for the DynamicPropertyCollection.
            </returns>
    </member>
    <member name="P:ABB.Robotics.RobotStudio.Stations.DynamicPropertyCollection.IsSynchronized"></member>
    <member name="P:ABB.Robotics.RobotStudio.Stations.DynamicPropertyCollection.Item(System.Int32)">
      <summary>
            Gets the item at the specified index.
            </summary>
      <param name="index">The zero-based index of the item to get.</param>
      <exception cref="T:System.ArgumentOutOfRangeException">
            The index value is greater than the number of items in the collection.</exception>
    </member>
    <member name="P:ABB.Robotics.RobotStudio.Stations.DynamicPropertyCollection.Item(System.String)">
      <summary>
            Gets the item with the specified id.
            </summary>
      <param name="id">The id of the item to get.</param>
      <exception cref="T:System.ArgumentException">
            The id value is not in the collection.</exception>
    </member>
    <member name="P:ABB.Robotics.RobotStudio.Stations.DynamicPropertyCollection.Parent">
      <summary>
            The Parent property returns a reference to the parent smart component.
            </summary>
    </member>
    <member name="M:ABB.Robotics.RobotStudio.Stations.DynamicPropertyCollection.Remove(System.String)">
      <summary>
            Removes an property from this DynamicPropertyCollection object.
            </summary>
      <param name="name">The id of the property to be removed.</param>
      <exception cref="T:System.ArgumentException">
            An property with the specified id has not been added to the collection</exception>
    </member>
    <member name="P:ABB.Robotics.RobotStudio.Stations.DynamicPropertyCollection.SyncRoot"></member>
    <member name="T:ABB.Robotics.RobotStudio.Stations.Edge">
      <summary>
            An Edge is bounded by one or more vertices, referring to one <see cref="T:ABB.Robotics.RobotStudio.Stations.Vertex" /> at each end. Edges are
            closely related to <see cref="T:ABB.Robotics.RobotStudio.Stations.Coedge">Coedges</see>, which allows the Edge to occur in more than one
            <see cref="T:ABB.Robotics.RobotStudio.Stations.Face" />, thus makes it possible to create solids.<br /><img src="GeometryTopology.jpg" /></summary>
    </member>
    <member name="P:ABB.Robotics.RobotStudio.Stations.Edge.Body">
      <summary>
            Gets the <see cref="P:ABB.Robotics.RobotStudio.Stations.Edge.Body" /> the edge is part of.
            </summary>
    </member>
    <member name="P:ABB.Robotics.RobotStudio.Stations.Edge.CenterPoint">
      <summary>
            Gets the center point of the edge.
            </summary>
    </member>
    <member name="P:ABB.Robotics.RobotStudio.Stations.Edge.EdgeType">
      <summary>
            Returns the type of the edge.
            </summary>
    </member>
    <member name="P:ABB.Robotics.RobotStudio.Stations.Edge.EndVertex">
      <summary>	
            Gets the end vertex of the edge.
            </summary>
    </member>
    <member name="M:ABB.Robotics.RobotStudio.Stations.Edge.Facet(System.Double,System.Double,System.Double,System.Double,System.Double,ABB.Robotics.Math.Vector3[]@,System.Double[]@)">
      <summary>Returns facets that approximate the edge.</summary>
      <param name="start">Starting parameter.</param>
      <param name="end">Ending parameter. If less than start, the two are reversed.</param>
      <param name="maxTolerance">Maximum distance between the approximating facets and the real curve.</param>
      <param name="maxLength">Maximum length of each facet.</param>
      <param name="maxAngle">Maximum angle between the tangets of the two endpoints of any facet.</param>
      <param name="points">Returns the facet points on the curve.</param>
      <param name="parameters">Returns the parameters (t-values) of the facet points on the curve.</param>
      <returns>True if success.</returns>
    </member>
    <member name="M:ABB.Robotics.RobotStudio.Stations.Edge.FindClosestVertex(ABB.Robotics.Math.Vector3)">
      <summary>Returns the <see cref="T:ABB.Robotics.RobotStudio.Stations.Vertex" /> of the <see cref="T:ABB.Robotics.RobotStudio.Stations.Edge" /> that is closest to the provided point.</summary>
      <param name="testPoint">The point which to find the closest vertex to.</param>
      <returns>The closest <see cref="T:ABB.Robotics.RobotStudio.Stations.Vertex" />.</returns>
    </member>
    <member name="M:ABB.Robotics.RobotStudio.Stations.Edge.GetCurvature(System.Double)">
      <summary>Returns the curvature of a point on the edge that corresponds to the given parameter value.</summary>
      <param name="parameter">Parameter value.</param>
      <returns>Curvature.</returns>
    </member>
    <member name="M:ABB.Robotics.RobotStudio.Stations.Edge.GetLengthAtParameter(System.Double)">
      <summary>Returns the distance along this edge from the start.</summary>
      <param name="parameter">Parameter value.</param>
      <returns>Distance.</returns>
    </member>
    <member name="M:ABB.Robotics.RobotStudio.Stations.Edge.GetParameterAtLength(System.Double)">
      <summary>Returns the parameter value at the given distance from the start.</summary>
      <param name="length">Distance from start.</param>
      <returns>Parameter value.</returns>
    </member>
    <member name="M:ABB.Robotics.RobotStudio.Stations.Edge.GetParameterAtPoint(ABB.Robotics.Math.Vector3)">
      <summary>Returns the parameter on the edge that corresponds to the given point value.</summary>
      <param name="point">Point value.</param>
      <returns>Parameter on the edge.</returns>
    </member>
    <member name="M:ABB.Robotics.RobotStudio.Stations.Edge.GetParameterRange(ABB.Robotics.RobotStudio.Stations.ParameterRange@)">
      <summary>Gets the parameter (t-value) range of the edge.</summary>
      <param name="range">Returns the range.</param>
      <returns>False if the range is unbounded.</returns>
    </member>
    <member name="M:ABB.Robotics.RobotStudio.Stations.Edge.GetPointAtParameter(System.Double)">
      <summary>Returns the point on the edge that corresponds to the given parameter value.</summary>
      <param name="parameter">Parameter value.</param>
      <returns>Point on the edge.</returns>
    </member>
    <member name="M:ABB.Robotics.RobotStudio.Stations.Edge.GetTangent(ABB.Robotics.Math.Vector3)">
      <summary>Gets the tangent of the edge at the supplied point.</summary>
      <param name="pointOnCurve">The point at which to get the tangent.</param>
      <returns>The tangent to the edge at the supplied point</returns>
    </member>
    <member name="M:ABB.Robotics.RobotStudio.Stations.Edge.GetTangent(System.Double)">
      <summary>Returns the tangent of the edge at the given parameter value.</summary>
      <param name="parameter">Parameter value.</param>
      <returns>Tangent direction.</returns>
    </member>
    <member name="M:ABB.Robotics.RobotStudio.Stations.Edge.IsParameterValid(System.Double)">
      <summary>
            Returns true if the given parameter is valid for this Edge, i.e. within its parameter range.
            </summary>
      <param name="parameter">The parameter value to test</param>
    </member>
    <member name="P:ABB.Robotics.RobotStudio.Stations.Edge.Length">
      <summary>	
            Gets the length of the edge.
            </summary>
    </member>
    <member name="P:ABB.Robotics.RobotStudio.Stations.Edge.MidPoint">
      <summary>	
            Gets the mid point of the edge.
            </summary>
    </member>
    <member name="P:ABB.Robotics.RobotStudio.Stations.Edge.StartVertex">
      <summary>	
            Gets the start vertex of the edge.
            </summary>
    </member>
    <member name="T:ABB.Robotics.RobotStudio.Stations.EdgeGraph">
      <summary>
            Helper class to simplify edge traversal for a set of connected edges in a body
            </summary>
    </member>
    <member name="M:ABB.Robotics.RobotStudio.Stations.EdgeGraph.#ctor(System.Collections.Generic.IEnumerable{ABB.Robotics.RobotStudio.Stations.Edge})">
      <summary>
            Creates a new EdgeGraph from a collection of edges
            </summary>
    </member>
    <member name="M:ABB.Robotics.RobotStudio.Stations.EdgeGraph.Dispose"></member>
    <member name="M:ABB.Robotics.RobotStudio.Stations.EdgeGraph.GetEdges">
      <summary>
            Returns all edges in the graph
            </summary>
    </member>
    <member name="M:ABB.Robotics.RobotStudio.Stations.EdgeGraph.GetLeaves">
      <summary>
            Returns all vertices that are leaves (endpoints), i.e. all vertices that are connected to only one edge.
            </summary>
    </member>
    <member name="M:ABB.Robotics.RobotStudio.Stations.EdgeGraph.GetShortestPath(ABB.Robotics.RobotStudio.Stations.Vertex,ABB.Robotics.RobotStudio.Stations.Vertex,System.Boolean)"></member>
    <member name="M:ABB.Robotics.RobotStudio.Stations.EdgeGraph.GetVertices">
      <summary>
            Returns all vertices in the graph
            </summary>
    </member>
    <member name="P:ABB.Robotics.RobotStudio.Stations.EdgeGraph.IsConnected">
      <summary>
            Returns true if the graph is connected, i.e. all edges and vertices are connected to one another
            </summary>
    </member>
    <member name="P:ABB.Robotics.RobotStudio.Stations.EdgeGraph.IsCycle">
      <summary>
            Returns true if the edges and vertices of the graph form a closed cycle
            </summary>
    </member>
    <member name="P:ABB.Robotics.RobotStudio.Stations.EdgeGraph.IsLinear">
      <summary>
            Returns true if the graph is linear.
            </summary>
    </member>
    <member name="P:ABB.Robotics.RobotStudio.Stations.EdgeGraph.IsTree">
      <summary>
            Returns true if the graph is tree-shaped. 
            </summary>
    </member>
    <member name="T:ABB.Robotics.RobotStudio.Stations.EdgeType">
      <summary>
            Specifies the type of an edge.
            </summary>
    </member>
    <member name="F:ABB.Robotics.RobotStudio.Stations.EdgeType.Straight"></member>
    <member name="F:ABB.Robotics.RobotStudio.Stations.EdgeType.Ellipse"></member>
    <member name="F:ABB.Robotics.RobotStudio.Stations.EdgeType.Helix"></member>
    <member name="F:ABB.Robotics.RobotStudio.Stations.EdgeType.Interpolated"></member>
    <member name="F:ABB.Robotics.RobotStudio.Stations.EdgeType.Unknown"></member>
    <member name="T:ABB.Robotics.RobotStudio.Stations.EvaluateTriggerEventArgs">
      <summary>
            Provides data for the <b>EvaluateTrigger</b> event
            </summary>
    </member>
    <member name="M:ABB.Robotics.RobotStudio.Stations.EvaluateTriggerEventArgs.#ctor(ABB.Robotics.RobotStudio.Stations.EventTableTrigger,System.Double)"></member>
    <member name="P:ABB.Robotics.RobotStudio.Stations.EvaluateTriggerEventArgs.Execute">
      <summary>
            Gets or sets a value indicating whether the action(s) associated with Trigger should be executed
            </summary>
    </member>
    <member name="P:ABB.Robotics.RobotStudio.Stations.EvaluateTriggerEventArgs.Time"></member>
    <member name="P:ABB.Robotics.RobotStudio.Stations.EvaluateTriggerEventArgs.Trigger"></member>
    <member name="T:ABB.Robotics.RobotStudio.Stations.EvaluateTriggerEventHandler"></member>
    <member name="T:ABB.Robotics.RobotStudio.Stations.EventActivationMode">
      <summary>
            Specifies values to indicate the action mode
            </summary>
    </member>
    <member name="F:ABB.Robotics.RobotStudio.Stations.EventActivationMode.Off"></member>
    <member name="F:ABB.Robotics.RobotStudio.Stations.EventActivationMode.Simulation"></member>
    <member name="F:ABB.Robotics.RobotStudio.Stations.EventActivationMode.Always"></member>
    <member name="T:ABB.Robotics.RobotStudio.Stations.EventLogicOperator">
      <summary>
            Logic operators used by EventTableTriggerLogic
            </summary>
    </member>
    <member name="F:ABB.Robotics.RobotStudio.Stations.EventLogicOperator.AND"></member>
    <member name="F:ABB.Robotics.RobotStudio.Stations.EventLogicOperator.OR"></member>
    <member name="F:ABB.Robotics.RobotStudio.Stations.EventLogicOperator.NOT"></member>
    <member name="F:ABB.Robotics.RobotStudio.Stations.EventLogicOperator.Timer"></member>
    <member name="F:ABB.Robotics.RobotStudio.Stations.EventLogicOperator.NOP"></member>
    <member name="T:ABB.Robotics.RobotStudio.Stations.EventRelationalOperator">
      <summary>
            Relational operators used by EventTableTriggerIO
            </summary>
    </member>
    <member name="F:ABB.Robotics.RobotStudio.Stations.EventRelationalOperator.None"></member>
    <member name="F:ABB.Robotics.RobotStudio.Stations.EventRelationalOperator.Equal"></member>
    <member name="F:ABB.Robotics.RobotStudio.Stations.EventRelationalOperator.NotEqual"></member>
    <member name="F:ABB.Robotics.RobotStudio.Stations.EventRelationalOperator.Greater"></member>
    <member name="F:ABB.Robotics.RobotStudio.Stations.EventRelationalOperator.GreaterOrEqual"></member>
    <member name="F:ABB.Robotics.RobotStudio.Stations.EventRelationalOperator.Less"></member>
    <member name="F:ABB.Robotics.RobotStudio.Stations.EventRelationalOperator.LessOrEqual"></member>
    <member name="T:ABB.Robotics.RobotStudio.Stations.EventTable"></member>
    <member name="P:ABB.Robotics.RobotStudio.Stations.EventTable.EventTableEntries"></member>
    <member name="T:ABB.Robotics.RobotStudio.Stations.EventTableAction"></member>
    <member name="M:ABB.Robotics.RobotStudio.Stations.EventTableAction.Copy"></member>
    <member name="T:ABB.Robotics.RobotStudio.Stations.EventTableActionAttach"></member>
    <member name="M:ABB.Robotics.RobotStudio.Stations.EventTableActionAttach.#ctor"></member>
    <member name="P:ABB.Robotics.RobotStudio.Stations.EventTableActionAttach.AttachmentChild">
      <summary>
            Gets or sets the attachment child.
            </summary>
    </member>
    <member name="P:ABB.Robotics.RobotStudio.Stations.EventTableActionAttach.AttachmentParent">
      <summary>
            Gets or sets the attachment parent.
            </summary>
    </member>
    <member name="P:ABB.Robotics.RobotStudio.Stations.EventTableActionAttach.FindNearest"></member>
    <member name="P:ABB.Robotics.RobotStudio.Stations.EventTableActionAttach.FlangeIndex"></member>
    <member name="P:ABB.Robotics.RobotStudio.Stations.EventTableActionAttach.MountObject"></member>
    <member name="P:ABB.Robotics.RobotStudio.Stations.EventTableActionAttach.Offset"></member>
    <member name="T:ABB.Robotics.RobotStudio.Stations.EventTableActionCollection"></member>
    <member name="M:ABB.Robotics.RobotStudio.Stations.EventTableActionCollection.Add(ABB.Robotics.RobotStudio.Stations.EventTableAction)"></member>
    <member name="M:ABB.Robotics.RobotStudio.Stations.EventTableActionCollection.Contains(ABB.Robotics.RobotStudio.Stations.EventTableAction)"></member>
    <member name="M:ABB.Robotics.RobotStudio.Stations.EventTableActionCollection.CopyTo(ABB.Robotics.RobotStudio.Stations.EventTableAction[],System.Int32)"></member>
    <member name="M:ABB.Robotics.RobotStudio.Stations.EventTableActionCollection.CopyTo(System.Array,System.Int32)"></member>
    <member name="P:ABB.Robotics.RobotStudio.Stations.EventTableActionCollection.Count"></member>
    <member name="M:ABB.Robotics.RobotStudio.Stations.EventTableActionCollection.GetEnumerator"></member>
    <member name="P:ABB.Robotics.RobotStudio.Stations.EventTableActionCollection.IsSynchronized"></member>
    <member name="P:ABB.Robotics.RobotStudio.Stations.EventTableActionCollection.Item(System.Int32)"></member>
    <member name="P:ABB.Robotics.RobotStudio.Stations.EventTableActionCollection.Parent"></member>
    <member name="M:ABB.Robotics.RobotStudio.Stations.EventTableActionCollection.Remove(ABB.Robotics.RobotStudio.Stations.EventTableAction)"></member>
    <member name="P:ABB.Robotics.RobotStudio.Stations.EventTableActionCollection.SyncRoot"></member>
    <member name="M:ABB.Robotics.RobotStudio.Stations.EventTableActionCollection.ToArray"></member>
    <member name="T:ABB.Robotics.RobotStudio.Stations.EventTableActionCustom"></member>
    <member name="M:ABB.Robotics.RobotStudio.Stations.EventTableActionCustom.#ctor"></member>
    <member name="P:ABB.Robotics.RobotStudio.Stations.EventTableActionCustom.ActionType"></member>
    <member name="T:ABB.Robotics.RobotStudio.Stations.EventTableActionDetach"></member>
    <member name="M:ABB.Robotics.RobotStudio.Stations.EventTableActionDetach.#ctor"></member>
    <member name="P:ABB.Robotics.RobotStudio.Stations.EventTableActionDetach.AttachmentChild">
      <summary>
            Gets or sets the attachment child.
            </summary>
    </member>
    <member name="P:ABB.Robotics.RobotStudio.Stations.EventTableActionDetach.AttachmentParent">
      <summary>
            Gets or sets the attachment parent.
            </summary>
    </member>
    <member name="T:ABB.Robotics.RobotStudio.Stations.EventTableActionIO"></member>
    <member name="M:ABB.Robotics.RobotStudio.Stations.EventTableActionIO.#ctor"></member>
    <member name="P:ABB.Robotics.RobotStudio.Stations.EventTableActionIO.Controller">
      <summary>
            Gets or sets the controller that this trigger applies to. Controller must be either an RsIrc5Controller
            (real signals), Station (station signals) or SmartComponent.
            </summary>
    </member>
    <member name="P:ABB.Robotics.RobotStudio.Stations.EventTableActionIO.Value">
      <summary>
            Gets or sets a value.
            </summary>
    </member>
    <member name="T:ABB.Robotics.RobotStudio.Stations.EventTableActionMechanicalPose"></member>
    <member name="M:ABB.Robotics.RobotStudio.Stations.EventTableActionMechanicalPose.#ctor"></member>
    <member name="P:ABB.Robotics.RobotStudio.Stations.EventTableActionMechanicalPose.Mechanism">
      <summary>
            Gets or sets a mechanism.
            </summary>
    </member>
    <member name="P:ABB.Robotics.RobotStudio.Stations.EventTableActionMechanicalPose.ToPoseName">
      <summary>
            Gets or sets a pose name.
            </summary>
    </member>
    <member name="P:ABB.Robotics.RobotStudio.Stations.EventTableActionMechanicalPose.VirtualSignal">
      <summary>
            Gets or sets a virtual signal.
            </summary>
    </member>
    <member name="P:ABB.Robotics.RobotStudio.Stations.EventTableActionMechanicalPose.VirtualSignalValue">
      <summary>
            Gets or sets the virtual signal value.
            </summary>
    </member>
    <member name="T:ABB.Robotics.RobotStudio.Stations.EventTableActionMonitor"></member>
    <member name="M:ABB.Robotics.RobotStudio.Stations.EventTableActionMonitor.#ctor"></member>
    <member name="P:ABB.Robotics.RobotStudio.Stations.EventTableActionMonitor.Mechanism">
      <summary>
            Gets or sets a mechanism.
            </summary>
    </member>
    <member name="P:ABB.Robotics.RobotStudio.Stations.EventTableActionMonitor.MonitorEnabled">
      <summary>
            Gets or sets m onitor enabled.
            </summary>
    </member>
    <member name="T:ABB.Robotics.RobotStudio.Stations.EventTableActionMove"></member>
    <member name="M:ABB.Robotics.RobotStudio.Stations.EventTableActionMove.#ctor"></member>
    <member name="P:ABB.Robotics.RobotStudio.Stations.EventTableActionMove.GlobalTransform"></member>
    <member name="P:ABB.Robotics.RobotStudio.Stations.EventTableActionMove.Object">
      <summary>
            Gets or sets the moved object.
            </summary>
    </member>
    <member name="T:ABB.Robotics.RobotStudio.Stations.EventTableActionNothing"></member>
    <member name="M:ABB.Robotics.RobotStudio.Stations.EventTableActionNothing.#ctor"></member>
    <member name="T:ABB.Robotics.RobotStudio.Stations.EventTableActionShow"></member>
    <member name="M:ABB.Robotics.RobotStudio.Stations.EventTableActionShow.#ctor"></member>
    <member name="P:ABB.Robotics.RobotStudio.Stations.EventTableActionShow.Object">
      <summary>
            Gets or sets the .
            </summary>
    </member>
    <member name="P:ABB.Robotics.RobotStudio.Stations.EventTableActionShow.ShowObject"></member>
    <member name="T:ABB.Robotics.RobotStudio.Stations.EventTableActionTimer"></member>
    <member name="M:ABB.Robotics.RobotStudio.Stations.EventTableActionTimer.#ctor"></member>
    <member name="P:ABB.Robotics.RobotStudio.Stations.EventTableActionTimer.TimerEnabled">
      <summary>
            Gets or sets timer enabled.
            </summary>
    </member>
    <member name="T:ABB.Robotics.RobotStudio.Stations.EventTableActionVstaMacro"></member>
    <member name="M:ABB.Robotics.RobotStudio.Stations.EventTableActionVstaMacro.#ctor"></member>
    <member name="P:ABB.Robotics.RobotStudio.Stations.EventTableActionVstaMacro.MacroName"></member>
    <member name="T:ABB.Robotics.RobotStudio.Stations.EventTableEntry"></member>
    <member name="M:ABB.Robotics.RobotStudio.Stations.EventTableEntry.#ctor"></member>
    <member name="P:ABB.Robotics.RobotStudio.Stations.EventTableEntry.Comment">
      <summary>
            Gets or sets a comment to this EventTableEntry object.
            </summary>
    </member>
    <member name="M:ABB.Robotics.RobotStudio.Stations.EventTableEntry.Copy"></member>
    <member name="P:ABB.Robotics.RobotStudio.Stations.EventTableEntry.Cyclic">
      <summary>
            Gets or sets a cyclic.
            </summary>
    </member>
    <member name="P:ABB.Robotics.RobotStudio.Stations.EventTableEntry.EventActivationMode">
      <summary>
            Gets or sets a activation mode to this EventTableEntry object.
            </summary>
    </member>
    <member name="P:ABB.Robotics.RobotStudio.Stations.EventTableEntry.EventTableActions"></member>
    <member name="P:ABB.Robotics.RobotStudio.Stations.EventTableEntry.EventTableTrigger"></member>
    <member name="P:ABB.Robotics.RobotStudio.Stations.EventTableEntry.Group">
      <summary>
            Gets or sets a group name to this EventTableEntry object.
            </summary>
    </member>
    <member name="T:ABB.Robotics.RobotStudio.Stations.EventTableEntryCollection"></member>
    <member name="M:ABB.Robotics.RobotStudio.Stations.EventTableEntryCollection.Add(ABB.Robotics.RobotStudio.Stations.EventTableEntry)"></member>
    <member name="M:ABB.Robotics.RobotStudio.Stations.EventTableEntryCollection.Contains(ABB.Robotics.RobotStudio.Stations.EventTableEntry)"></member>
    <member name="M:ABB.Robotics.RobotStudio.Stations.EventTableEntryCollection.CopyTo(ABB.Robotics.RobotStudio.Stations.EventTableEntry[],System.Int32)"></member>
    <member name="M:ABB.Robotics.RobotStudio.Stations.EventTableEntryCollection.CopyTo(System.Array,System.Int32)"></member>
    <member name="P:ABB.Robotics.RobotStudio.Stations.EventTableEntryCollection.Count"></member>
    <member name="M:ABB.Robotics.RobotStudio.Stations.EventTableEntryCollection.GetEnumerator"></member>
    <member name="P:ABB.Robotics.RobotStudio.Stations.EventTableEntryCollection.IsSynchronized"></member>
    <member name="P:ABB.Robotics.RobotStudio.Stations.EventTableEntryCollection.Item(System.Int32)"></member>
    <member name="P:ABB.Robotics.RobotStudio.Stations.EventTableEntryCollection.Parent"></member>
    <member name="M:ABB.Robotics.RobotStudio.Stations.EventTableEntryCollection.Remove(ABB.Robotics.RobotStudio.Stations.EventTableEntry)"></member>
    <member name="P:ABB.Robotics.RobotStudio.Stations.EventTableEntryCollection.SyncRoot"></member>
    <member name="M:ABB.Robotics.RobotStudio.Stations.EventTableEntryCollection.ToArray"></member>
    <member name="T:ABB.Robotics.RobotStudio.Stations.EventTableTrigger"></member>
    <member name="M:ABB.Robotics.RobotStudio.Stations.EventTableTrigger.Copy"></member>
    <member name="P:ABB.Robotics.RobotStudio.Stations.EventTableTrigger.TimeStamp">
      <summary>
            Time when the trigger is executed.
            </summary>
    </member>
    <member name="T:ABB.Robotics.RobotStudio.Stations.EventTableTriggerCollision"></member>
    <member name="M:ABB.Robotics.RobotStudio.Stations.EventTableTriggerCollision.#ctor"></member>
    <member name="P:ABB.Robotics.RobotStudio.Stations.EventTableTriggerCollision.CollisionEventType">
      <summary>
            Gets or sets a collision event type.
            </summary>
    </member>
    <member name="P:ABB.Robotics.RobotStudio.Stations.EventTableTriggerCollision.CollisionSet">
      <summary>
            Gets or sets a collision set.
            </summary>
    </member>
    <member name="T:ABB.Robotics.RobotStudio.Stations.EventTableTriggerCustom"></member>
    <member name="M:ABB.Robotics.RobotStudio.Stations.EventTableTriggerCustom.#ctor"></member>
    <member name="P:ABB.Robotics.RobotStudio.Stations.EventTableTriggerCustom.TriggerType"></member>
    <member name="T:ABB.Robotics.RobotStudio.Stations.EventTableTriggerIO"></member>
    <member name="M:ABB.Robotics.RobotStudio.Stations.EventTableTriggerIO.#ctor"></member>
    <member name="P:ABB.Robotics.RobotStudio.Stations.EventTableTriggerIO.Controller">
      <summary>
            Gets or sets the controller that this trigger applies to. Controller must be either an RsIrc5Controller
            (real signals), Station (station signals) or SmartComponent.
            </summary>
    </member>
    <member name="P:ABB.Robotics.RobotStudio.Stations.EventTableTriggerIO.Operator">
      <summary>
            Gets or sets the operator
            </summary>
    </member>
    <member name="P:ABB.Robotics.RobotStudio.Stations.EventTableTriggerIO.Value">
      <summary>
            Gets or sets a value.
            </summary>
    </member>
    <member name="T:ABB.Robotics.RobotStudio.Stations.EventTableTriggerLogic"></member>
    <member name="M:ABB.Robotics.RobotStudio.Stations.EventTableTriggerLogic.#ctor"></member>
    <member name="P:ABB.Robotics.RobotStudio.Stations.EventTableTriggerLogic.Delay">
      <summary>
            Gets or sets the delay. Only valid if <see cref="P:ABB.Robotics.RobotStudio.Stations.EventTableTriggerLogic.Operator" /> is Timer.
            </summary>
    </member>
    <member name="P:ABB.Robotics.RobotStudio.Stations.EventTableTriggerLogic.Operand1">
      <summary>
            Gets or sets the first operand.
            </summary>
    </member>
    <member name="P:ABB.Robotics.RobotStudio.Stations.EventTableTriggerLogic.Operand2">
      <summary>
            Gets or sets the second operand. Only valid if <see cref="P:ABB.Robotics.RobotStudio.Stations.EventTableTriggerLogic.Operator" /> is AND or OR.
            </summary>
    </member>
    <member name="P:ABB.Robotics.RobotStudio.Stations.EventTableTriggerLogic.Operator">
      <summary>
            Gets or sets the logic operator simulated by this.
            </summary>
    </member>
    <member name="M:ABB.Robotics.RobotStudio.Stations.EventTableTriggerLogic.ToString"></member>
    <member name="T:ABB.Robotics.RobotStudio.Stations.ExecuteActionEventArgs">
      <summary>
            Provides data for the <b>ExecuteAction</b> event
            </summary>
    </member>
    <member name="P:ABB.Robotics.RobotStudio.Stations.ExecuteActionEventArgs.Action"></member>
    <member name="P:ABB.Robotics.RobotStudio.Stations.ExecuteActionEventArgs.Time"></member>
    <member name="T:ABB.Robotics.RobotStudio.Stations.ExecuteActionEventHandler"></member>
    <member name="T:ABB.Robotics.RobotStudio.Stations.ExternalAxisValues">
      <summary>
            Represents the axis positions in radians of the robots external axes.
            </summary>
    </member>
    <member name="P:ABB.Robotics.RobotStudio.Stations.ExternalAxisValues.Eax_a">
      <summary>
            Gets the position for robot external axis <b>a</b>.		
            </summary>
    </member>
    <member name="P:ABB.Robotics.RobotStudio.Stations.ExternalAxisValues.Eax_b">
      <summary>
            Gets the position for robot external axis <b>b</b>.		
            </summary>
    </member>
    <member name="P:ABB.Robotics.RobotStudio.Stations.ExternalAxisValues.Eax_c">
      <summary>
            Gets the position for robot external axis <b>c</b>.		
            </summary>
    </member>
    <member name="P:ABB.Robotics.RobotStudio.Stations.ExternalAxisValues.Eax_d">
      <summary>
            Gets the position for robot external axis <b>d</b>.		
            </summary>
    </member>
    <member name="P:ABB.Robotics.RobotStudio.Stations.ExternalAxisValues.Eax_e">
      <summary>
            Gets the position for robot external axis <b>e</b>.		
            </summary>
    </member>
    <member name="P:ABB.Robotics.RobotStudio.Stations.ExternalAxisValues.Eax_f">
      <summary>
            Gets the position for robot external axis <b>f</b>.		
            </summary>
    </member>
    <member name="M:ABB.Robotics.RobotStudio.Stations.ExternalAxisValues.GetAxisValues">
      <summary>
            Returns the external axes values in Eax_1 to Eax_6 as an array.
            </summary>
    </member>
    <member name="M:ABB.Robotics.RobotStudio.Stations.ExternalAxisValues.GetAxisValues(System.Int32[])">
      <summary>
            Returns the axes values for the active external axes in Eax_1 to Eax_6 as an array.
            </summary>
      <param name="logicalAxis">An array of int that specifies for which positions (Eax_1 to Eax_6) the values shall be get.</param>
    </member>
    <member name="M:ABB.Robotics.RobotStudio.Stations.ExternalAxisValues.SetAxisValues(ABB.Robotics.RobotStudio.Stations.ExternalAxisValues@,System.Double[])">
      <summary>
            Sets the values of the specified <see cref="T:ABB.Robotics.RobotStudio.Stations.ExternalAxisValues" />, given the specified array of doubles.
            </summary>
      <exception cref="T:System.ArgumentException">
            The axisValue array is not of length 6.
            </exception>
    </member>
    <member name="M:ABB.Robotics.RobotStudio.Stations.ExternalAxisValues.SetAxisValues(ABB.Robotics.RobotStudio.Stations.ExternalAxisValues@,System.Double[],System.Int32[])">
      <summary>
            Sets only the values of the active external axes. One array contains the values for the active axes, and another arrays specifies the positions in the <see cref="T:ABB.Robotics.RobotStudio.Stations.ExternalAxisValues" />, where the values will be set.
            A RAPID robtarget specifies the axis positions for six robot axes and six external axes. More than 6 external axes can be controlled, but not simultaneously.
            Behind the scenes, all the axes position values are treated as an array of length 12. The first six elements contains the position values for the robot axes, and the last six, contains the position values for the external axes.
            Please refer to <see cref="!:RsMechanicalUnit" /> for more information about logical axis, and activation/deactivation of external axes.
            It is common that none, or only a few of the external axes are used. If for example two axes are used, the two array parameters shall have the lenght two.
            </summary>
      <param name="externalAxes">The <see cref="T:ABB.Robotics.RobotStudio.Stations.ExternalAxisValues" /> which values shall be set. Which axes (Eax_1 - Eax_6), that will be affected depends on the <b>logicalAxis</b></param>
      <param name="activeAxisValues">An array of double that contains the values to set.</param>
      <param name="logicalAxis">An array of integers that specifies in which positions (Eax_1 to Eax_6) the values shall be set.</param>
      <exception cref="T:System.ArgumentException">
            The different reasons are:
            The axisValue is not of the same length as the logicalAxis array.
            The arrays have a length that is not between 1 and 6.
            The values in the logicalAxis array are not in the range 7 to 12.
            </exception>
    </member>
    <member name="M:ABB.Robotics.RobotStudio.Stations.ExternalAxisValues.ToString"></member>
    <member name="T:ABB.Robotics.RobotStudio.Stations.Face">
      <summary>
            A face is a bounded portion of a single geometric surface, the two-dimensional analog of a body.
            The boundary is represented by one or more loops or edges. Each face is simply connected,
            implying that one can traverse from any point on the interior of the face to any other point
            on the interior of the face without crossing the boundary of the face.
            In general, it is not meaningful to distinguish exterior and interior loops of edges,
            though for certain surface types this may be possible and some algorithms may do so.
            </summary>
    </member>
    <member name="P:ABB.Robotics.RobotStudio.Stations.Face.Body">
      <summary>
            Gets the <see cref="P:ABB.Robotics.RobotStudio.Stations.Face.Body" /> that the <see cref="T:ABB.Robotics.RobotStudio.Stations.Face" /> belongs to.
            </summary>
    </member>
    <member name="P:ABB.Robotics.RobotStudio.Stations.Face.Color">
      <summary>
            Gets or sets color of the face in the graphics.
            </summary>
    </member>
    <member name="M:ABB.Robotics.RobotStudio.Stations.Face.Connected(ABB.Robotics.RobotStudio.Stations.Face[])">
      <summary>Checks whether a set of faces are connected, e.g. form a continous surface.</summary>
      <param name="faces">Faces to check.</param>
      <returns>True if all faces are connected.</returns>
    </member>
    <member name="P:ABB.Robotics.RobotStudio.Stations.Face.FaceType">
      <summary>
            Returns the type of the face.
            </summary>
    </member>
    <member name="M:ABB.Robotics.RobotStudio.Stations.Face.FindClosestVertex(ABB.Robotics.Math.Vector3)">
      <summary>Returns the <see cref="T:ABB.Robotics.RobotStudio.Stations.Vertex" /> of the <see cref="T:ABB.Robotics.RobotStudio.Stations.Face" /> that is closest to the provided point.</summary>
      <param name="testPoint">The point which to find the closest vertex to.</param>
      <returns>The closest <see cref="T:ABB.Robotics.RobotStudio.Stations.Vertex" />.</returns>
    </member>
    <member name="M:ABB.Robotics.RobotStudio.Stations.Face.GetBoundingBox(System.Boolean)">
      <summary>Computes the (axis-aligned) bounding box for this object.</summary>
      <param name="global">Specifies that the bounding box should be in the global (world) coordinate system rather
            than in this object's local coordinate system.</param>
      <returns></returns>
    </member>
    <member name="M:ABB.Robotics.RobotStudio.Stations.Face.GetBoundingBox(System.Boolean,ABB.Robotics.Math.Vector3@,ABB.Robotics.Math.Vector3@)">
      <summary>Computes the (axis-aligned) bounding box for this object.</summary>
      <param name="global">Specifies that the bounding box should be in the global (world) coordinate system rather
            than in this object's local coordinate system.</param>
      <param name="min">The first corner of the bounding box.</param>
      <param name="max">The second corner of the bounding box.</param>
    </member>
    <member name="M:ABB.Robotics.RobotStudio.Stations.Face.GetCenterPoint(ABB.Robotics.Math.Vector3@)">
      <summary>
            Returns the center point of a planar surface.
            </summary>
      <param name="centerPoint"></param>
      <returns> True if the face is planar, false otherwise. </returns>
    </member>
    <member name="M:ABB.Robotics.RobotStudio.Stations.Face.GetEdges">
      <summary>
            Returns an array contianing the edges of this face.
            </summary>
      <returns></returns>
    </member>
    <member name="M:ABB.Robotics.RobotStudio.Stations.Face.GetMaterial"></member>
    <member name="M:ABB.Robotics.RobotStudio.Stations.Face.GetNormalToSurface(ABB.Robotics.Math.Vector3,ABB.Robotics.Math.Vector3@,ABB.Robotics.Math.Vector3@)">
      <summary>Calculates the closest point and the corresponding normal.</summary>
      <param name="testPoint">The test point.</param>
      <param name="hitPoint">The closest point.</param>
      <param name="hitPointNormal">Normal to the closest point.</param>
      <returns>True if successful.</returns>
    </member>
    <member name="M:ABB.Robotics.RobotStudio.Stations.Face.GetURange(ABB.Robotics.RobotStudio.Stations.ParameterRange@)">
      <summary>Returns the parameter range of a surface in the u-parameter direction.</summary>
      <param name="uRange">Parameter range.</param>
      <returns> False if the range is unbounded.</returns>
    </member>
    <member name="M:ABB.Robotics.RobotStudio.Stations.Face.GetVRange(ABB.Robotics.RobotStudio.Stations.ParameterRange@)">
      <summary>Returns the parameter range of a surface in the v-parameter direction.</summary>
      <param name="vRange">Parameter range.</param>
      <returns> False if the range is unbounded.</returns>
    </member>
    <member name="P:ABB.Robotics.RobotStudio.Stations.Face.Loops">
      <summary>
            Gets the <see cref="T:ABB.Robotics.RobotStudio.Stations.LoopCollection" /> of the <see cref="T:ABB.Robotics.RobotStudio.Stations.Face" />.
            </summary>
    </member>
    <member name="M:ABB.Robotics.RobotStudio.Stations.Face.NormalizeTextureCoordinates(System.Boolean,System.Boolean)"></member>
    <member name="P:ABB.Robotics.RobotStudio.Stations.Face.Opacity">
      <summary>
            Gets or sets the opacity of the face.
            </summary>
    </member>
    <member name="M:ABB.Robotics.RobotStudio.Stations.Face.ReverseNormal">
      <summary>
            Reverses the sense of a face; i.e., makes the face material void
            (flips the normal). Also, alters the senses of the coedges to avoid
            changing the shape of the face.
            </summary>
      <returns>True if successful.</returns>
    </member>
    <member name="M:ABB.Robotics.RobotStudio.Stations.Face.SetMaterial(ABB.Robotics.RobotStudio.Stations.Material)">
      <summary>Sets the material of the face.</summary>
      <param name="material">Material to use when rendering this face.</param>
    </member>
    <member name="M:ABB.Robotics.RobotStudio.Stations.Face.SetMaterial(ABB.Robotics.RobotStudio.Stations.Material,System.Drawing.SizeF)">
      <summary>Sets the material of the face and re-scales the texture cooordinates.</summary>
      <param name="material">Material to use when rendering this face.</param>
      <param name="scale">Scale factor for u and v texture coordinates. Range from 0 to 1.</param>
    </member>
    <member name="P:ABB.Robotics.RobotStudio.Stations.Face.Visible">
      <summary>
            Gets or sets whether the face is visible or not in the graphics.
            </summary>
    </member>
    <member name="T:ABB.Robotics.RobotStudio.Stations.FaceCollection">
      <summary>
            A collection of Face objects.
            </summary>
    </member>
    <member name="M:ABB.Robotics.RobotStudio.Stations.FaceCollection.Contains(ABB.Robotics.RobotStudio.Stations.Face)"></member>
    <member name="M:ABB.Robotics.RobotStudio.Stations.FaceCollection.CopyTo(ABB.Robotics.RobotStudio.Stations.Face[],System.Int32)"></member>
    <member name="M:ABB.Robotics.RobotStudio.Stations.FaceCollection.CopyTo(System.Array,System.Int32)"></member>
    <member name="P:ABB.Robotics.RobotStudio.Stations.FaceCollection.Count"></member>
    <member name="M:ABB.Robotics.RobotStudio.Stations.FaceCollection.GetEnumerator"></member>
    <member name="P:ABB.Robotics.RobotStudio.Stations.FaceCollection.IsSynchronized"></member>
    <member name="P:ABB.Robotics.RobotStudio.Stations.FaceCollection.Item(System.Int32)"></member>
    <member name="P:ABB.Robotics.RobotStudio.Stations.FaceCollection.List"></member>
    <member name="P:ABB.Robotics.RobotStudio.Stations.FaceCollection.Parent"></member>
    <member name="P:ABB.Robotics.RobotStudio.Stations.FaceCollection.SyncRoot"></member>
    <member name="M:ABB.Robotics.RobotStudio.Stations.FaceCollection.ToArray"></member>
    <member name="T:ABB.Robotics.RobotStudio.Stations.FaceType">
      <summary>
            Specifies the type of a face. A face can be either represented analytically by a simple
            equation, or a parametric spline.<br /><img src="GeometryTopology.jpg" /></summary>
    </member>
    <member name="F:ABB.Robotics.RobotStudio.Stations.FaceType.Planar"></member>
    <member name="F:ABB.Robotics.RobotStudio.Stations.FaceType.Cylindrical"></member>
    <member name="F:ABB.Robotics.RobotStudio.Stations.FaceType.Conical"></member>
    <member name="F:ABB.Robotics.RobotStudio.Stations.FaceType.Spherical"></member>
    <member name="F:ABB.Robotics.RobotStudio.Stations.FaceType.Toroidal"></member>
    <member name="F:ABB.Robotics.RobotStudio.Stations.FaceType.Spline"></member>
    <member name="F:ABB.Robotics.RobotStudio.Stations.FaceType.Unknown"></member>
    <member name="T:ABB.Robotics.RobotStudio.Stations.FileNotFoundNotification"></member>
    <member name="T:ABB.Robotics.RobotStudio.Stations.Flange">
      <summary>
            Represents a flange of a <see cref="T:ABB.Robotics.RobotStudio.Stations.Mechanism" />. A flange is an entity that is created when modeling a mechanism.
            Using the flange you can attach other objects deriving from <see cref="T:ABB.Robotics.RobotStudio.Stations.IAttachableChild" /> to the link of the flange.
            A robot usually has a flange modeled at its wrist. That makes it possible to for example attach a tool on the wrist of a robot.
            </summary>
    </member>
    <member name="M:ABB.Robotics.RobotStudio.Stations.Flange.Attach(ABB.Robotics.RobotStudio.Stations.IAttachableChild,System.Boolean)">
      <summary>
            Attaches the specified <see cref="T:ABB.Robotics.RobotStudio.Stations.IAttachableChild" /> to the link of this flange.
            Please refer to the documentation of <see cref="T:ABB.Robotics.RobotStudio.Stations.Attachment" /> for details about attaching objects to each other.
            </summary>
      <param name="child">The <see cref="T:ABB.Robotics.RobotStudio.Stations.IAttachableChild" /> to attach to the link of this flange.</param>
      <param name="mount">Specifies if the position of the child shall be affected by the attachment or not. See <see cref="T:ABB.Robotics.RobotStudio.Stations.Attachment" /> for details.</param>
      <returns>True if an attachment could be created, false otherwise</returns>
    </member>
    <member name="M:ABB.Robotics.RobotStudio.Stations.Flange.Attach(ABB.Robotics.RobotStudio.Stations.IAttachableChild,System.Boolean,ABB.Robotics.Math.Matrix4)"></member>
    <member name="M:ABB.Robotics.RobotStudio.Stations.Flange.Detach(ABB.Robotics.RobotStudio.Stations.IAttachableChild)">
      <summary>
            Detaches the specified <see cref="T:ABB.Robotics.RobotStudio.Stations.IAttachableChild" /> from the link of this flange.
            Please refer to the documentation of <see cref="T:ABB.Robotics.RobotStudio.Stations.Attachment" /> for details about detaching objects.
            </summary>
      <param name="child">The <see cref="T:ABB.Robotics.RobotStudio.Stations.IAttachableChild" /> to detach from the link of this flange.</param>
      <returns>True if the child could be detached, false otherwise</returns>
    </member>
    <member name="M:ABB.Robotics.RobotStudio.Stations.Flange.GetFrame">
      <summary>
            Gets the <see cref="T:ABB.Robotics.RobotStudio.Stations.Frame" /> that is associated with the <see cref="T:ABB.Robotics.RobotStudio.Stations.Flange" />.
            This frame always has the same name as the flange.
            </summary>
    </member>
    <member name="P:ABB.Robotics.RobotStudio.Stations.Flange.GlobalMatrix">
      <summary>
            Gets the global position of the <see cref="T:ABB.Robotics.RobotStudio.Stations.Flange" />.
            </summary>
    </member>
    <member name="P:ABB.Robotics.RobotStudio.Stations.Flange.Link">
      <summary>
            Gets the link (a <see cref="T:ABB.Robotics.RobotStudio.Stations.GraphicComponent" /> ), on which the <see cref="T:ABB.Robotics.RobotStudio.Stations.Flange" /> is placed.
            </summary>
    </member>
    <member name="P:ABB.Robotics.RobotStudio.Stations.Flange.Name">
      <summary>
            Gets name of the <see cref="T:ABB.Robotics.RobotStudio.Stations.Flange" />.
            </summary>
    </member>
    <member name="P:ABB.Robotics.RobotStudio.Stations.Flange.Offset">
      <summary>
            Gets the offset from the link, where the <see cref="T:ABB.Robotics.RobotStudio.Stations.Flange" /> is placed.
            </summary>
    </member>
    <member name="T:ABB.Robotics.RobotStudio.Stations.FollowObjectBehavior">
      <summary>
            Specifies how the camera behaves when it follows an object.
            </summary>
    </member>
    <member name="F:ABB.Robotics.RobotStudio.Stations.FollowObjectBehavior.FixDirection"></member>
    <member name="F:ABB.Robotics.RobotStudio.Stations.FollowObjectBehavior.FixLookFrom"></member>
    <member name="F:ABB.Robotics.RobotStudio.Stations.FollowObjectBehavior.FollowLocal"></member>
    <member name="T:ABB.Robotics.RobotStudio.Stations.ForwardKinematicsResult">
      <summary>Specifies the result of a forward kinematic calculation.</summary>
    </member>
    <member name="F:ABB.Robotics.RobotStudio.Stations.ForwardKinematicsResult.InsideLimits"></member>
    <member name="F:ABB.Robotics.RobotStudio.Stations.ForwardKinematicsResult.OutsideLimits"></member>
    <member name="F:ABB.Robotics.RobotStudio.Stations.ForwardKinematicsResult.ForwardKinematicsFailed"></member>
    <member name="T:ABB.Robotics.RobotStudio.Stations.Frame">
      <summary>
            Simple modelling frame.
            </summary>
    </member>
    <member name="M:ABB.Robotics.RobotStudio.Stations.Frame.#ctor">
      <summary>
            Initializes a new instance of the Frame class.
            </summary>
    </member>
    <member name="M:ABB.Robotics.RobotStudio.Stations.Frame.Attach(ABB.Robotics.RobotStudio.Stations.IAttachableChild,System.Boolean,ABB.Robotics.Math.Matrix4)"></member>
    <member name="M:ABB.Robotics.RobotStudio.Stations.Frame.CanAttachChild(ABB.Robotics.RobotStudio.Stations.IAttachableChild)"></member>
    <member name="M:ABB.Robotics.RobotStudio.Stations.Frame.Detach(ABB.Robotics.RobotStudio.Stations.IAttachableChild)"></member>
    <member name="P:ABB.Robotics.RobotStudio.Stations.Frame.FrameSize">
      <summary>
            Gets or sets the size of the graphical frame.
            </summary>
    </member>
    <member name="P:ABB.Robotics.RobotStudio.Stations.Frame.FrameType">
      <summary>
            Gets a value indicating how the frame is used.
            </summary>
    </member>
    <member name="P:ABB.Robotics.RobotStudio.Stations.Frame.Name">
      <summary>
            Gets or sets the name of the object
            </summary>
    </member>
    <member name="P:ABB.Robotics.RobotStudio.Stations.Frame.Parent">
      <summary>
            Returns a reference to the parent Station.
            </summary>
    </member>
    <member name="P:ABB.Robotics.RobotStudio.Stations.Frame.ShowName">
      <summary>
            Gets or sets a value indicating whether the name of the frame will
            be displayed in the graphics.
            </summary>
    </member>
    <member name="P:ABB.Robotics.RobotStudio.Stations.Frame.Transform">
      <summary>
            Gets the transform of the Frame.
            </summary>
    </member>
    <member name="P:ABB.Robotics.RobotStudio.Stations.Frame.Visible">
      <summary>
            Gets or sets a value indicating whether the frame will
            be displayed in the graphics.
            </summary>
    </member>
    <member name="T:ABB.Robotics.RobotStudio.Stations.FrameCollection">
      <summary>
            Represents a collection of Frames in a Station.
            </summary>
    </member>
    <member name="M:ABB.Robotics.RobotStudio.Stations.FrameCollection.Add(ABB.Robotics.RobotStudio.Stations.Frame)"></member>
    <member name="M:ABB.Robotics.RobotStudio.Stations.FrameCollection.Contains(ABB.Robotics.RobotStudio.Stations.Frame)"></member>
    <member name="M:ABB.Robotics.RobotStudio.Stations.FrameCollection.CopyTo(ABB.Robotics.RobotStudio.Stations.Frame[],System.Int32)"></member>
    <member name="M:ABB.Robotics.RobotStudio.Stations.FrameCollection.CopyTo(System.Array,System.Int32)"></member>
    <member name="P:ABB.Robotics.RobotStudio.Stations.FrameCollection.Count"></member>
    <member name="M:ABB.Robotics.RobotStudio.Stations.FrameCollection.GetEnumerator"></member>
    <member name="P:ABB.Robotics.RobotStudio.Stations.FrameCollection.IsSynchronized"></member>
    <member name="P:ABB.Robotics.RobotStudio.Stations.FrameCollection.Item(System.Int32)"></member>
    <member name="P:ABB.Robotics.RobotStudio.Stations.FrameCollection.Parent"></member>
    <member name="M:ABB.Robotics.RobotStudio.Stations.FrameCollection.Remove(ABB.Robotics.RobotStudio.Stations.Frame)"></member>
    <member name="P:ABB.Robotics.RobotStudio.Stations.FrameCollection.SyncRoot"></member>
    <member name="M:ABB.Robotics.RobotStudio.Stations.FrameCollection.ToArray"></member>
    <member name="T:ABB.Robotics.RobotStudio.Stations.FrameType">
      <summary>
            Specifies the usage of a <see cref="T:ABB.Robotics.RobotStudio.Stations.Frame" />.
            </summary>
    </member>
    <member name="F:ABB.Robotics.RobotStudio.Stations.FrameType.Generic"></member>
    <member name="F:ABB.Robotics.RobotStudio.Stations.FrameType.AttachmentPoint"></member>
    <member name="F:ABB.Robotics.RobotStudio.Stations.FrameType.MountingPoint"></member>
    <member name="T:ABB.Robotics.RobotStudio.Stations.GraphicComponent">
      <summary>
            The base class of all objects in the station that represent physical objects or entities.
            </summary>
    </member>
    <member name="M:ABB.Robotics.RobotStudio.Stations.GraphicComponent.CanImport(System.String)">
      <summary>
            Returns true if the fileName refers to a file type that is possible to import using ImportAsync().
            </summary>
    </member>
    <member name="P:ABB.Robotics.RobotStudio.Stations.GraphicComponent.Color">
      <summary>
            Gets or sets the color of the object in the graphics.
            </summary>
    </member>
    <member name="M:ABB.Robotics.RobotStudio.Stations.GraphicComponent.Copy">
      <summary>
            Creates a deep copy of the object.
            </summary>
      <returns>The copy of the object.</returns>
    </member>
    <member name="M:ABB.Robotics.RobotStudio.Stations.GraphicComponent.CopyInstance">
      <summary>
            Creates a copy but keeps a connection to the definition of the GraphicComponent, typically in a Library definition.
            </summary>
      <returns>The instance copy of the object.</returns>
    </member>
    <member name="M:ABB.Robotics.RobotStudio.Stations.GraphicComponent.Delete">
      <summary>
            Deletes this object permanently.
            </summary>
    </member>
    <member name="M:ABB.Robotics.RobotStudio.Stations.GraphicComponent.DeleteGeometry">
      <summary>
            Recursively deletes all CAD geometry.
            </summary>
    </member>
    <member name="M:ABB.Robotics.RobotStudio.Stations.GraphicComponent.DeleteGeometry(System.Boolean)">
      <summary>
            Recursively deletes all CAD geometry.
            </summary>
      <param name="preserveSnapPoints">Specifies that snap points from the geometry should be added to the graphic representation</param>
    </member>
    <member name="P:ABB.Robotics.RobotStudio.Stations.GraphicComponent.Detectable">
      <summary>
            Gets or sets a value indicating the the component can be detected by sensors.
            </summary>
    </member>
    <member name="M:ABB.Robotics.RobotStudio.Stations.GraphicComponent.DisconnectFromLibrary">
      <summary>
            Moves the definition to the Station or Project. This causes the Library property to return Null.
            </summary>
    </member>
    <member name="M:ABB.Robotics.RobotStudio.Stations.GraphicComponent.ExportXml(System.String)">
      <summary>
            Exports this to an XML file
            </summary>
      <param name="xmlFile">The path to the XML file to create.</param>
    </member>
    <member name="M:ABB.Robotics.RobotStudio.Stations.GraphicComponent.ExportXml(System.String,System.String)">
      <summary>
            Exports this to an XML file
            </summary>
      <param name="xmlFile">The path to the XML file to create.</param>
      <param name="referenceDirectory">The directory where parts and assets should be saved.</param>
    </member>
    <member name="P:ABB.Robotics.RobotStudio.Stations.GraphicComponent.Frames">
      <summary>
            Gets a FrameCollection object that represents all the Frames
            on this Graphic Component object.
            </summary>
    </member>
    <member name="M:ABB.Robotics.RobotStudio.Stations.GraphicComponent.GetBoundingBox(System.Boolean)">
      <summary>
            Computes the (axis-aligned) bounding box for this object.
            </summary>
      <param name="global">Specifies that the bounding box should be in the global (world) coordinate system rather
            than in this object's local coordinate system.</param>
      <returns></returns>
    </member>
    <member name="M:ABB.Robotics.RobotStudio.Stations.GraphicComponent.GetBoundingBox(System.Boolean,ABB.Robotics.Math.Vector3@,ABB.Robotics.Math.Vector3@)">
      <summary>
            Computes the (axis-aligned) bounding box for this object.
            </summary>
      <param name="global">Specifies that the bounding box should be in the global (world) coordinate system rather
            than in this object's local coordinate system.</param>
      <param name="min">The first corner of the bounding box.</param>
      <param name="max">The second corner of the bounding box.</param>
    </member>
    <member name="M:ABB.Robotics.RobotStudio.Stations.GraphicComponent.GetBoundingBox(System.Boolean,System.IntPtr,System.IntPtr)"></member>
    <member name="M:ABB.Robotics.RobotStudio.Stations.GraphicComponent.GetNormalToSurface(ABB.Robotics.Math.Vector3,ABB.Robotics.Math.Vector3@,ABB.Robotics.Math.Vector3@,ABB.Robotics.RobotStudio.Stations.Face@)">
      <summary>Calculates the closest point and the corresponding normal.</summary>
      <param name="testPoint">The test point.</param>
      <param name="hitPoint">The closest point.</param>
      <param name="hitPointNormal">Normal to the closest point.</param>
      <param name="hitFace">The face of the closest point.</param>
    </member>
    <member name="M:ABB.Robotics.RobotStudio.Stations.GraphicComponent.Highlight(System.Boolean)">
      <summary>
            Highlights the object using the default highlight style and color.
            </summary>
      <param name="value">True if the object should be highlighted, False to turn the highlighting off.</param>
    </member>
    <member name="M:ABB.Robotics.RobotStudio.Stations.GraphicComponent.Highlight(System.Boolean,System.Drawing.Color)">
      <summary>
            Highlights the object using a specified color.
            </summary>
      <param name="value">True if the object should be highlighted, False to turn the highlighting off.</param>
      <param name="color">Highlight color.</param>
    </member>
    <member name="M:ABB.Robotics.RobotStudio.Stations.GraphicComponent.ImportAsync(System.String)">
      <summary>
            Creates a <see cref="T:ABB.Robotics.RobotStudio.Stations.GraphicComponent" /> from the given CAD or graphics file.
            </summary>
    </member>
    <member name="M:ABB.Robotics.RobotStudio.Stations.GraphicComponent.ImportAsync(System.String,ABB.Robotics.RobotStudio.Stations.GraphicImportSettings,ABB.Robotics.RobotStudio.IProgressCallback)">
      <summary>
            Creates a <see cref="T:ABB.Robotics.RobotStudio.Stations.GraphicComponent" /> from the given CAD or graphics file.
            </summary>
    </member>
    <member name="M:ABB.Robotics.RobotStudio.Stations.GraphicComponent.ImportXml(System.String)">
      <summary>
            Creates a <see cref="T:ABB.Robotics.RobotStudio.Stations.GraphicComponent" /> from an RSXML file.
            </summary>
      <param name="xmlFile"> The filename of the RSXML file to compile. </param>
      <returns> The compiled GraphicComponent. </returns>
    </member>
    <member name="M:ABB.Robotics.RobotStudio.Stations.GraphicComponent.ImportXml(System.String,System.String)">
      <summary>
            Creates a <see cref="T:ABB.Robotics.RobotStudio.Stations.GraphicComponent" /> specified in a Library XML file.
            </summary>
      <param name="libraryXmlFile">XML file that adheres to LibraryCompilerSchema.xsd.</param>
      <param name="libraryFileName">The 'fileName' attribute of the Library or Variant node that specifies the component.</param>
      <returns> The compiled GraphicComponent. </returns>
    </member>
    <member name="M:ABB.Robotics.RobotStudio.Stations.GraphicComponent.ImportXml(System.String,System.String,System.String,System.String)">
      <summary>
            Creates a <see cref="T:ABB.Robotics.RobotStudio.Stations.GraphicComponent" /> from in-memory XML.
            </summary>
      <param name="xmlData"> The XML to compile. </param>
      <param name="referenceDirectory"> The directory to search for files referenced by the XML data. </param>
      <param name="defaultName"> The default name of the GraphicComponent. </param>
      <param name="defaultResource"> The defalt name of the file containing SmartComponent resources. </param>
      <returns> The compiled GraphicComponent. </returns>
    </member>
    <member name="P:ABB.Robotics.RobotStudio.Stations.GraphicComponent.Library">
      <summary>
            The Parent property returns a reference to the parent GraphicComponent object.
            </summary>
    </member>
    <member name="M:ABB.Robotics.RobotStudio.Stations.GraphicComponent.MoveDefinitionToLibrary">
      <summary>
            Moves the definition to a new Library.
            </summary>
      <returns>The new Library containing the <see cref="T:ABB.Robotics.RobotStudio.Stations.GraphicComponent" /> as RootComponent.</returns>
    </member>
    <member name="P:ABB.Robotics.RobotStudio.Stations.GraphicComponent.Opacity">
      <summary>
            Gets or sets the opacity of the object.
            </summary>
    </member>
    <member name="P:ABB.Robotics.RobotStudio.Stations.GraphicComponent.Parent">
      <summary>
            The Parent property returns a reference to the parent GraphicComponent object.
            </summary>
    </member>
    <member name="P:ABB.Robotics.RobotStudio.Stations.GraphicComponent.PickingEnabled">
      <summary>
            Gets or sets if the component can be picked and selected in 3D graphic windows.
            </summary>
    </member>
    <member name="P:ABB.Robotics.RobotStudio.Stations.GraphicComponent.Transform">
      <summary>
            Gets the <see cref="P:ABB.Robotics.RobotStudio.Stations.GraphicComponent.Transform" /> of the object.
            </summary>
    </member>
    <member name="P:ABB.Robotics.RobotStudio.Stations.GraphicComponent.Visible">
      <summary>
            Gets or sets whether the object should be displayed in the graphics or not.
            </summary>
    </member>
    <member name="T:ABB.Robotics.RobotStudio.Stations.GraphicComponentCollection">
      <summary>
            A collection of GraphicComponent objects.
            </summary>
    </member>
    <member name="M:ABB.Robotics.RobotStudio.Stations.GraphicComponentCollection.Add(ABB.Robotics.RobotStudio.Stations.GraphicComponent)">
      <summary>
            Adds a <see cref="T:ABB.Robotics.RobotStudio.Stations.GraphicComponent" /> to the collection.
            </summary>
      <param name="graphicComponent">The <see cref="T:ABB.Robotics.RobotStudio.Stations.GraphicComponent" /> to add to the collection.</param>
    </member>
    <member name="M:ABB.Robotics.RobotStudio.Stations.GraphicComponentCollection.Clear"></member>
    <member name="M:ABB.Robotics.RobotStudio.Stations.GraphicComponentCollection.Clear(System.Boolean)"></member>
    <member name="M:ABB.Robotics.RobotStudio.Stations.GraphicComponentCollection.Contains(ABB.Robotics.RobotStudio.Stations.GraphicComponent)"></member>
    <member name="M:ABB.Robotics.RobotStudio.Stations.GraphicComponentCollection.Contains(System.String)"></member>
    <member name="M:ABB.Robotics.RobotStudio.Stations.GraphicComponentCollection.CopyTo(ABB.Robotics.RobotStudio.Stations.GraphicComponent[],System.Int32)"></member>
    <member name="M:ABB.Robotics.RobotStudio.Stations.GraphicComponentCollection.CopyTo(System.Array,System.Int32)"></member>
    <member name="P:ABB.Robotics.RobotStudio.Stations.GraphicComponentCollection.Count"></member>
    <member name="M:ABB.Robotics.RobotStudio.Stations.GraphicComponentCollection.GetEnumerator"></member>
    <member name="M:ABB.Robotics.RobotStudio.Stations.GraphicComponentCollection.IndexOf(ABB.Robotics.RobotStudio.Stations.GraphicComponent)"></member>
    <member name="M:ABB.Robotics.RobotStudio.Stations.GraphicComponentCollection.Insert(System.Int32,ABB.Robotics.RobotStudio.Stations.GraphicComponent)"></member>
    <member name="P:ABB.Robotics.RobotStudio.Stations.GraphicComponentCollection.IsSynchronized"></member>
    <member name="P:ABB.Robotics.RobotStudio.Stations.GraphicComponentCollection.Item(System.Int32)"></member>
    <member name="P:ABB.Robotics.RobotStudio.Stations.GraphicComponentCollection.Item(System.String)">
      <summary>This is obsolete, use TryGetGraphicComponent instead.</summary>
      <returns>The first <see cref="T:ABB.Robotics.RobotStudio.Stations.GraphicComponent" /> with this name in the collection.</returns>
    </member>
    <member name="P:ABB.Robotics.RobotStudio.Stations.GraphicComponentCollection.Parent"></member>
    <member name="M:ABB.Robotics.RobotStudio.Stations.GraphicComponentCollection.Remove(ABB.Robotics.RobotStudio.Stations.GraphicComponent)">
      <summary>
            Remove a <see cref="T:ABB.Robotics.RobotStudio.Stations.GraphicComponent" /> from the collection.
            </summary>
      <param name="graphicComponent">The <see cref="T:ABB.Robotics.RobotStudio.Stations.GraphicComponent" /> to remove from the collection.</param>
    </member>
    <member name="M:ABB.Robotics.RobotStudio.Stations.GraphicComponentCollection.Remove(ABB.Robotics.RobotStudio.Stations.GraphicComponent,System.Boolean)">
      <summary>
            Remove a <see cref="T:ABB.Robotics.RobotStudio.Stations.GraphicComponent" /> from the collection.
            </summary>
      <param name="graphicComponent">The <see cref="T:ABB.Robotics.RobotStudio.Stations.GraphicComponent" /> to remove from the collection.</param>
      <param name="dispose">Indicates if the <see cref="T:ABB.Robotics.RobotStudio.Stations.GraphicComponent" /> should be disposed
            when this change is no longer undoable. Set to true if the component will not be used subsequently. </param>
    </member>
    <member name="P:ABB.Robotics.RobotStudio.Stations.GraphicComponentCollection.SyncRoot"></member>
    <member name="M:ABB.Robotics.RobotStudio.Stations.GraphicComponentCollection.ToArray"></member>
    <member name="M:ABB.Robotics.RobotStudio.Stations.GraphicComponentCollection.TryGetGraphicComponent(System.String,ABB.Robotics.RobotStudio.Stations.GraphicComponent@)">
      <summary>Gets the GraphicComponent with the specified name.</summary>
      <param name="name">The name of the GraphicComponent to get.</param>
      <param name="graphicComponent">When this method returns, contains the GraphicComponent associated with the specified name,
            if the name is found; otherwise, null.</param>
      <returns>true if the GraphicComponentCollection contains an element with the specified name; otherwise, false.</returns>
      <exception cref="T:System.ArgumentException">name is a null reference.</exception>
    </member>
    <member name="T:ABB.Robotics.RobotStudio.Stations.GraphicComponentGroup">
      <summary>
            The GraphicComponentGroup is an assembly of GraphicComponent objects.
            </summary>
    </member>
    <member name="M:ABB.Robotics.RobotStudio.Stations.GraphicComponentGroup.#ctor">
      <summary>
            Creates and initializes a new GraphicComponentGroup object.
            </summary>
      <returns>The new GraphicComponentGroup object</returns>
    </member>
    <member name="M:ABB.Robotics.RobotStudio.Stations.GraphicComponentGroup.Attach(ABB.Robotics.RobotStudio.Stations.IAttachableChild,System.Boolean,ABB.Robotics.Math.Matrix4)">
      <summary>
            Attaches a child object to this GraphicComponentGroup.
            </summary>
      <param name="child">The child to be attached.</param>
      <param name="mount">Specifies whether the child should be mounted, i.e. moved, on to the location of the parent</param>
      <param name="offset">Specifies the offset matrix to be used from the attachment point.
            This is only used when mount is set to True.</param>
      <returns>True, if the attachmet succeded</returns>
    </member>
    <member name="M:ABB.Robotics.RobotStudio.Stations.GraphicComponentGroup.CanAttachChild(ABB.Robotics.RobotStudio.Stations.IAttachableChild)">
      <summary>
            Test if the supplied child can be attached.
            </summary>
      <param name="child">The child to be tested.</param>
      <returns>True, if the supplied child can be attached, false otherwise</returns>
    </member>
    <member name="M:ABB.Robotics.RobotStudio.Stations.GraphicComponentGroup.Detach(ABB.Robotics.RobotStudio.Stations.IAttachableChild)">
      <summary>
            Detaches a child object from this GraphicComponentGroup.
            </summary>
      <param name="child">The child to be detached.</param>
      <returns>True, if the detachment succeded</returns>
    </member>
    <member name="P:ABB.Robotics.RobotStudio.Stations.GraphicComponentGroup.GraphicComponents">
      <summary>
            Gets a GraphicComponentCollection object that represents all the graphic components
            on this GraphicComponentGroup object.
            </summary>
    </member>
    <member name="T:ABB.Robotics.RobotStudio.Stations.GraphicComponentLibrary">
      <summary>
            A GraphicComponentLibrary allows you to save and load graphic components to and from a library file.
            </summary>
    </member>
    <member name="M:ABB.Robotics.RobotStudio.Stations.GraphicComponentLibrary.#ctor">
      <summary>
            Creates and initializes a new <see cref="T:ABB.Robotics.RobotStudio.Stations.GraphicComponentLibrary" /> object.
            </summary>
    </member>
    <member name="P:ABB.Robotics.RobotStudio.Stations.GraphicComponentLibrary.Classification">
      <summary>
            Gets or Sets the <see cref="T:ABB.Robotics.RobotStudio.Stations.ComponentLibraryClassification" /> of the library.
            </summary>
    </member>
    <member name="P:ABB.Robotics.RobotStudio.Stations.GraphicComponentLibrary.GraphicComponents"></member>
    <member name="M:ABB.Robotics.RobotStudio.Stations.GraphicComponentLibrary.Load(System.String,System.Boolean)">
      <summary>
            Creates and initializes a <see cref="T:ABB.Robotics.RobotStudio.Stations.GraphicComponentLibrary" /> from a file.
            </summary>
      <param name="fileName">The filename of the libarary to load.</param>
      <param name="asReadOnly">Specifies whether or not the library should be loaded in read only mode.</param>
      <returns>The <see cref="T:ABB.Robotics.RobotStudio.Stations.GraphicComponentLibrary" />.</returns>
    </member>
    <member name="M:ABB.Robotics.RobotStudio.Stations.GraphicComponentLibrary.Load(System.String,System.Boolean,ABB.Robotics.RobotStudio.ProgressNotification)">
      <summary>
            Creates and initializes a <see cref="T:ABB.Robotics.RobotStudio.Stations.GraphicComponentLibrary" /> from a file.
            </summary>
      <param name="fileName">The filename of the libarary to load.</param>
      <param name="asReadOnly">Specifies whether or not the library should be loaded in read only mode.</param>
      <param name="progressDelegate">Specifies a <see cref="T:ABB.Robotics.RobotStudio.ProgressNotification" /> delegate to handle the progress notification events.</param>
      <returns>The <see cref="T:ABB.Robotics.RobotStudio.Stations.GraphicComponentLibrary" />.</returns>
    </member>
    <member name="M:ABB.Robotics.RobotStudio.Stations.GraphicComponentLibrary.Load(System.String,System.Boolean,ABB.Robotics.RobotStudio.ProgressNotification,System.Boolean)">
      <summary>
            Creates and initializes a <see cref="T:ABB.Robotics.RobotStudio.Stations.GraphicComponentLibrary" /> from a file.
            </summary>
      <param name="fileName">The filename of the library to load.</param>
      <param name="asReadOnly">Specifies whether or not the library should be loaded in read only mode.</param>
      <param name="progressDelegate">Specifies a <see cref="T:ABB.Robotics.RobotStudio.ProgressNotification" /> delegate to handle the progress notification events.</param>
      <param name="loadGeometry">Specifies whether or not the geometry should be loaded from the Library.</param>
      <returns>The <see cref="T:ABB.Robotics.RobotStudio.Stations.GraphicComponentLibrary" />.</returns>
    </member>
    <member name="P:ABB.Robotics.RobotStudio.Stations.GraphicComponentLibrary.ReadOnly">
      <summary>
            Gets or sets a value indicating if the corresponding library file is readonly or in use.
            </summary>
    </member>
    <member name="P:ABB.Robotics.RobotStudio.Stations.GraphicComponentLibrary.RootComponent">
      <summary>
            Get the root <see cref="T:ABB.Robotics.RobotStudio.Stations.GraphicComponent" /> of the library.
            </summary>
    </member>
    <member name="M:ABB.Robotics.RobotStudio.Stations.GraphicComponentLibrary.SaveAs(System.String)">
      <summary>
            Saves a <see cref="T:ABB.Robotics.RobotStudio.Stations.GraphicComponentLibrary" /> to a file.
            </summary>
      <param name="fileName">The filename of the libarary to save.</param>
    </member>
    <member name="T:ABB.Robotics.RobotStudio.Stations.GraphicConverter">
      <summary>
            Abstract base class for 3D graphics and CAD converters
            </summary>
    </member>
    <member name="M:ABB.Robotics.RobotStudio.Stations.GraphicConverter.CanExport(ABB.Robotics.RobotStudio.ProjectObject)"></member>
    <member name="P:ABB.Robotics.RobotStudio.Stations.GraphicConverter.DisplayName">
      <summary>
            Display Name of the file format (e.g. "VRML", "Catia V5")
            </summary>
    </member>
    <member name="M:ABB.Robotics.RobotStudio.Stations.GraphicConverter.Export(ABB.Robotics.RobotStudio.ProjectObject,System.String,ABB.Robotics.RobotStudio.Stations.GraphicExportSettings)">
      <summary>
            Override this to provide an Export implementation
            </summary>
    </member>
    <member name="P:ABB.Robotics.RobotStudio.Stations.GraphicConverter.Extensions">
      <summary>
            Returns a collection of supported file extensions. Each extensions should be on the form ".xxx"
            </summary>
    </member>
    <member name="P:ABB.Robotics.RobotStudio.Stations.GraphicConverter.FileFormatFilter"></member>
    <member name="P:ABB.Robotics.RobotStudio.Stations.GraphicConverter.Id"></member>
    <member name="M:ABB.Robotics.RobotStudio.Stations.GraphicConverter.ImportAsync(System.String,ABB.Robotics.RobotStudio.Stations.GraphicImportSettings,ABB.Robotics.RobotStudio.IProgressCallback)">
      <summary>
            Override this to provide an Import implementation
            </summary>
    </member>
    <member name="P:ABB.Robotics.RobotStudio.Stations.GraphicConverter.LicenseFeature"></member>
    <member name="P:ABB.Robotics.RobotStudio.Stations.GraphicConverter.SupportsExport"></member>
    <member name="P:ABB.Robotics.RobotStudio.Stations.GraphicConverter.SupportsImport"></member>
    <member name="T:ABB.Robotics.RobotStudio.Stations.GraphicExportSettings"></member>
    <member name="M:ABB.Robotics.RobotStudio.Stations.GraphicExportSettings.#ctor"></member>
    <member name="P:ABB.Robotics.RobotStudio.Stations.GraphicExportSettings.SkipInvisible">
      <summary>
            Gets or sets if invisible objects should be skipped during export.
            </summary>
    </member>
    <member name="P:ABB.Robotics.RobotStudio.Stations.GraphicExportSettings.Version">
      <summary>
            Gets or sets the version number to export.
            </summary>
    </member>
    <member name="T:ABB.Robotics.RobotStudio.Stations.GraphicImportSettings"></member>
    <member name="M:ABB.Robotics.RobotStudio.Stations.GraphicImportSettings.#ctor"></member>
    <member name="P:ABB.Robotics.RobotStudio.Stations.GraphicImportSettings.Healing"></member>
    <member name="P:ABB.Robotics.RobotStudio.Stations.GraphicImportSettings.IncludeHiddenElements"></member>
    <member name="P:ABB.Robotics.RobotStudio.Stations.GraphicImportSettings.IsSurfaceModel"></member>
    <member name="P:ABB.Robotics.RobotStudio.Stations.GraphicImportSettings.LevelsOfDetail"></member>
    <member name="T:ABB.Robotics.RobotStudio.Stations.GraphicProjection">
      <summary>
            Specifies values to indicate how 3D objects are projected.
            </summary>
    </member>
    <member name="F:ABB.Robotics.RobotStudio.Stations.GraphicProjection.Perspective"></member>
    <member name="F:ABB.Robotics.RobotStudio.Stations.GraphicProjection.Orthographic"></member>
    <member name="T:ABB.Robotics.RobotStudio.Stations.IAttachableChild"></member>
    <member name="T:ABB.Robotics.RobotStudio.Stations.IAttachableParent"></member>
    <member name="M:ABB.Robotics.RobotStudio.Stations.IAttachableParent.Attach(ABB.Robotics.RobotStudio.Stations.IAttachableChild,System.Boolean,ABB.Robotics.Math.Matrix4)"></member>
    <member name="M:ABB.Robotics.RobotStudio.Stations.IAttachableParent.CanAttachChild(ABB.Robotics.RobotStudio.Stations.IAttachableChild)"></member>
    <member name="M:ABB.Robotics.RobotStudio.Stations.IAttachableParent.Detach(ABB.Robotics.RobotStudio.Stations.IAttachableChild)"></member>
    <member name="T:ABB.Robotics.RobotStudio.Stations.IHasDynamicProperties"></member>
    <member name="P:ABB.Robotics.RobotStudio.Stations.IHasDynamicProperties.Properties"></member>
    <member name="E:ABB.Robotics.RobotStudio.Stations.IHasDynamicProperties.PropertyChanged"></member>
    <member name="E:ABB.Robotics.RobotStudio.Stations.IHasDynamicProperties.PropertyValueChanged"></member>
    <member name="T:ABB.Robotics.RobotStudio.Stations.IHasFrames"></member>
    <member name="P:ABB.Robotics.RobotStudio.Stations.IHasFrames.Frames"></member>
    <member name="T:ABB.Robotics.RobotStudio.Stations.IHasGeometry">
      <summary>
        <see cref="T:ABB.Robotics.RobotStudio.Stations.IHasGeometry" /> is an interface that all the geometric classes implements</summary>
    </member>
    <member name="M:ABB.Robotics.RobotStudio.Stations.IHasGeometry.FindClosestVertex(ABB.Robotics.Math.Vector3)">
      <summary>Finds the closest vertex, of the object, to the point.</summary>
      <param name="testPoint">The point.</param>
      <returns>The vertex.</returns>
    </member>
    <member name="T:ABB.Robotics.RobotStudio.Stations.IHasGraphicComponents"></member>
    <member name="P:ABB.Robotics.RobotStudio.Stations.IHasGraphicComponents.GraphicComponents"></member>
    <member name="T:ABB.Robotics.RobotStudio.Stations.IHasIOConnections"></member>
    <member name="P:ABB.Robotics.RobotStudio.Stations.IHasIOConnections.Connections"></member>
    <member name="T:ABB.Robotics.RobotStudio.Stations.IHasIOSignals"></member>
    <member name="E:ABB.Robotics.RobotStudio.Stations.IHasIOSignals.IOSignalChanged"></member>
    <member name="P:ABB.Robotics.RobotStudio.Stations.IHasIOSignals.IOSignals"></member>
    <member name="E:ABB.Robotics.RobotStudio.Stations.IHasIOSignals.IOSignalValueChanged"></member>
    <member name="T:ABB.Robotics.RobotStudio.Stations.IHasPropertyBindings"></member>
    <member name="P:ABB.Robotics.RobotStudio.Stations.IHasPropertyBindings.Bindings"></member>
    <member name="T:ABB.Robotics.RobotStudio.Stations.IHasTransform"></member>
    <member name="P:ABB.Robotics.RobotStudio.Stations.IHasTransform.Transform"></member>
    <member name="T:ABB.Robotics.RobotStudio.Stations.InformationStream">
      <summary>
            Provides access to the Information Stream of the Virtual Controller. Currently only I/O signals are supported.
            The Information Stream is synchronized with Virtual Time, so you can use it together with the <see cref="T:ABB.Robotics.RobotStudio.Stations.Simulator" /> object in order to react on signal value changes during a simulation.
            Each change event is stamped with the virtual time when it occured.
            </summary>
    </member>
    <member name="E:ABB.Robotics.RobotStudio.Stations.InformationStream.EventsAvailable">
      <summary>
            Occurs when events from the previous virtual time step are available.
            </summary>
    </member>
    <member name="M:ABB.Robotics.RobotStudio.Stations.InformationStream.SubscribeIOSignal(System.Guid,System.String)">
      <summary>
            Sets up a subscription to the specified signal.
            </summary>
      <param name="subscriptionId">Id that should be unique for each caller that wants to maintain their set of subscriptions. All previous subscriptions with the same Id will be removed, before subscribing to the one specified.</param>
      <param name="signalName">Signal names.</param>
      <returns>
            A <see cref="T:ABB.Robotics.RobotStudio.Stations.InformationStreamSubscriptionResult" /> that gives subscription status the signal.
            </returns>
    </member>
    <member name="M:ABB.Robotics.RobotStudio.Stations.InformationStream.SubscribeIOSignals(System.Guid,System.String[])">
      <summary>
            Sets up a subsccription to the specified signals.
            </summary>
      <param name="subscriptionId">Id that should be unique for each caller that wants to maintain their set of subscriptions. All previous subscriptions with the same Id will be removed, before subscribing to the ones specified.</param>
      <param name="signalNames">Signal names.</param>
      <returns>
            A <see cref="T:ABB.Robotics.RobotStudio.Stations.InformationStreamSubscriptionResult" /> that gives subscription status for each signal.
            </returns>
    </member>
    <member name="M:ABB.Robotics.RobotStudio.Stations.InformationStream.UnsubscribeIOSignals(System.Guid)">
      <summary>
            Removes the subsccription to all signals, for this client.
            </summary>
      <param name="subscriptionId">Id that should be unique for each caller that wants to maintain their set of subscriptions. All previous subscriptions with the same Id will be removed, before subscribing to the one specified.</param>
      <returns>
            A <see cref="T:ABB.Robotics.RobotStudio.Stations.InformationStreamSubscriptionResult" /> that gives subscription status the signal.
            </returns>
    </member>
    <member name="T:ABB.Robotics.RobotStudio.Stations.InformationStreamEvent">
      <summary>
            The base class for all events that can be recieved from the <see cref="T:ABB.Robotics.RobotStudio.Stations.InformationStream" />.
            It contains a time stamp that is synchronized with virtual time.
            </summary>
    </member>
    <member name="P:ABB.Robotics.RobotStudio.Stations.InformationStreamEvent.Timestamp">
      <summary>
            Gets the time stamp which denotes the the time when the event occured in the virtual controller.
            </summary>
    </member>
    <member name="T:ABB.Robotics.RobotStudio.Stations.InformationStreamEventArgs">
      <summary>
            Provides data for the <see cref="!:InformationStream::EventsAvailable" /> event.
            </summary>
    </member>
    <member name="M:ABB.Robotics.RobotStudio.Stations.InformationStreamEventArgs.GetEvents">
      <summary>
            Gets the array of events that occured during the virtual time step.<see cref="!:InformationStream::EventsAvailable" /> event.
            </summary>
    </member>
    <member name="T:ABB.Robotics.RobotStudio.Stations.InformationStreamEventHandler">
      <summary>
            Represents the method that will handle the <b>EventsAvailable</b>event of a <see cref="T:ABB.Robotics.RobotStudio.Stations.InformationStream" />.
            </summary>
      <param name="sender">The source of the event.</param>
      <param name="e">A <see cref="T:ABB.Robotics.RobotStudio.Stations.InformationStreamEventArgs" /> that contains the event data.</param>
    </member>
    <member name="T:ABB.Robotics.RobotStudio.Stations.InformationStreamSubscriptionStatus">
      <summary>
            Specifies the result of a subscription to an Information Stream Channel such as an I/O signal.
            Some of the values are only relevant for specific channel types, some are common.
            </summary>
    </member>
    <member name="F:ABB.Robotics.RobotStudio.Stations.InformationStreamSubscriptionStatus.Undefined"></member>
    <member name="F:ABB.Robotics.RobotStudio.Stations.InformationStreamSubscriptionStatus.Succeeded"></member>
    <member name="F:ABB.Robotics.RobotStudio.Stations.InformationStreamSubscriptionStatus.InvalidIOSignalName"></member>
    <member name="F:ABB.Robotics.RobotStudio.Stations.InformationStreamSubscriptionStatus.InvalidIOSignalType"></member>
    <member name="F:ABB.Robotics.RobotStudio.Stations.InformationStreamSubscriptionStatus.MaximumNumberOfSubscriptionsExceeded"></member>
    <member name="T:ABB.Robotics.RobotStudio.Stations.IntersectionType">
      <summary>
            Specifies how an object intersects with a volume
            </summary>
    </member>
    <member name="F:ABB.Robotics.RobotStudio.Stations.IntersectionType.Outside"></member>
    <member name="F:ABB.Robotics.RobotStudio.Stations.IntersectionType.Intersects"></member>
    <member name="F:ABB.Robotics.RobotStudio.Stations.IntersectionType.Inside"></member>
    <member name="T:ABB.Robotics.RobotStudio.Stations.IOConnection">
      <summary>
            Represents a connection from from a source <see cref="T:ABB.Robotics.RobotStudio.Stations.IOSignal">signal</see> to a
            target signal.
            </summary>
    </member>
    <member name="M:ABB.Robotics.RobotStudio.Stations.IOConnection.#ctor(ABB.Robotics.RobotStudio.ProjectObject,System.String,ABB.Robotics.RobotStudio.ProjectObject,System.String)">
      <summary>
            Creates a new instance of the IOConnection class.
            </summary>
      <param name="sourceObject">The object that contains the source signal.
            <remarks> The object should be either a <see cref="T:ABB.Robotics.RobotStudio.Stations.IHasIOSignals" /> or an <see cref="T:ABB.Robotics.RobotStudio.Stations.RsIrc5Controller" />.</remarks></param>
      <param name="sourceSignal">The name of the source signal.</param>
      <param name="targetObject">The object that contains the target signal.
            <remarks> The object should be either a <see cref="T:ABB.Robotics.RobotStudio.Stations.IHasIOSignals" /> or an <see cref="T:ABB.Robotics.RobotStudio.Stations.RsIrc5Controller" />.</remarks></param>
      <param name="targetSignal">The name of the target signal.</param>
    </member>
    <member name="M:ABB.Robotics.RobotStudio.Stations.IOConnection.#ctor(ABB.Robotics.RobotStudio.ProjectObject,System.String,ABB.Robotics.RobotStudio.ProjectObject,System.String,System.Boolean)">
      <summary>
            Creates a new instance of the IOConnection class.
            </summary>
      <param name="sourceObject">The object that contains the source signal.
            <remarks> The object should be either a <see cref="T:ABB.Robotics.RobotStudio.Stations.IHasIOSignals" /> or an <see cref="T:ABB.Robotics.RobotStudio.Stations.RsIrc5Controller" />.</remarks></param>
      <param name="sourceSignal">The name of the source signal.</param>
      <param name="targetObject">The object that contains the target signal.
            <remarks> The object should be either a <see cref="T:ABB.Robotics.RobotStudio.Stations.IHasIOSignals" /> or an <see cref="T:ABB.Robotics.RobotStudio.Stations.RsIrc5Controller" />.</remarks></param>
      <param name="targetSignal">The name of the target signal.</param>
      <param name="allowCycle">Specifies if the target signal is allowed to be set more than once in
            the same execution context.</param>
    </member>
    <member name="P:ABB.Robotics.RobotStudio.Stations.IOConnection.AllowCycle">
      <summary>
            Returns a value indicating if the target signal is allowed to be set more than once in the same context.
            </summary>
    </member>
    <member name="P:ABB.Robotics.RobotStudio.Stations.IOConnection.Parent"></member>
    <member name="P:ABB.Robotics.RobotStudio.Stations.IOConnection.SourceObject">
      <summary>
            Returns the object on which the source <see cref="T:ABB.Robotics.RobotStudio.Stations.IOSignal" /> can be found
            </summary>
    </member>
    <member name="P:ABB.Robotics.RobotStudio.Stations.IOConnection.SourceSignal">
      <summary>
            Returns the name of the signal that acts as the connection source
            </summary>
    </member>
    <member name="P:ABB.Robotics.RobotStudio.Stations.IOConnection.TargetObject">
      <summary>
            Returns the object on which target <see cref="T:ABB.Robotics.RobotStudio.Stations.IOSignal" /> can be found
            </summary>
    </member>
    <member name="P:ABB.Robotics.RobotStudio.Stations.IOConnection.TargetSignal">
      <summary>
            Returns the name of the signal that acts as the connection target
            </summary>
    </member>
    <member name="M:ABB.Robotics.RobotStudio.Stations.IOConnection.Update">
      <summary>
            Updates the target signal with the value of the source signal.
            </summary>
    </member>
    <member name="T:ABB.Robotics.RobotStudio.Stations.IOConnectionCollection"></member>
    <member name="M:ABB.Robotics.RobotStudio.Stations.IOConnectionCollection.Add(ABB.Robotics.RobotStudio.Stations.IOConnection)"></member>
    <member name="E:ABB.Robotics.RobotStudio.Stations.IOConnectionCollection.Changed">
      <summary>
            Raised when an item is added to or removed from the collection
            </summary>
    </member>
    <member name="M:ABB.Robotics.RobotStudio.Stations.IOConnectionCollection.Clear"></member>
    <member name="M:ABB.Robotics.RobotStudio.Stations.IOConnectionCollection.Contains(ABB.Robotics.RobotStudio.Stations.IOConnection)"></member>
    <member name="M:ABB.Robotics.RobotStudio.Stations.IOConnectionCollection.CopyTo(ABB.Robotics.RobotStudio.Stations.IOConnection[],System.Int32)"></member>
    <member name="M:ABB.Robotics.RobotStudio.Stations.IOConnectionCollection.CopyTo(System.Array,System.Int32)"></member>
    <member name="P:ABB.Robotics.RobotStudio.Stations.IOConnectionCollection.Count"></member>
    <member name="M:ABB.Robotics.RobotStudio.Stations.IOConnectionCollection.GetEnumerator"></member>
    <member name="M:ABB.Robotics.RobotStudio.Stations.IOConnectionCollection.IndexOf(ABB.Robotics.RobotStudio.Stations.IOConnection)"></member>
    <member name="M:ABB.Robotics.RobotStudio.Stations.IOConnectionCollection.Insert(System.Int32,ABB.Robotics.RobotStudio.Stations.IOConnection)"></member>
    <member name="P:ABB.Robotics.RobotStudio.Stations.IOConnectionCollection.IsSynchronized"></member>
    <member name="P:ABB.Robotics.RobotStudio.Stations.IOConnectionCollection.Item(System.Int32)"></member>
    <member name="M:ABB.Robotics.RobotStudio.Stations.IOConnectionCollection.Remove(ABB.Robotics.RobotStudio.Stations.IOConnection)"></member>
    <member name="P:ABB.Robotics.RobotStudio.Stations.IOConnectionCollection.SyncRoot"></member>
    <member name="T:ABB.Robotics.RobotStudio.Stations.IOSignal">
      <summary>
            Represents an I/O signal in the <see cref="T:ABB.Robotics.RobotStudio.Stations.Station" /> or in a <see cref="T:ABB.Robotics.RobotStudio.Stations.SmartComponent" />.
            </summary>
    </member>
    <member name="M:ABB.Robotics.RobotStudio.Stations.IOSignal.#ctor(System.String,ABB.Robotics.RobotStudio.Stations.IOSignalType)"></member>
    <member name="P:ABB.Robotics.RobotStudio.Stations.IOSignal.AutoReset"></member>
    <member name="P:ABB.Robotics.RobotStudio.Stations.IOSignal.Description"></member>
    <member name="M:ABB.Robotics.RobotStudio.Stations.IOSignal.GetConnections">
      <summary>
            Returns an array of I/O connections from this signal to other signals.
            </summary>
      <returns>
            An array of <see cref="T:ABB.Robotics.RobotStudio.Stations.IOConnection" /> containing the connections.
            </returns>
    </member>
    <member name="M:ABB.Robotics.RobotStudio.Stations.IOSignal.GetValueType">
      <summary>
            Returns the <see cref="T:System.Type" /> of the Value property for this signal.
            </summary>
      <returns>The <see cref="T:System.Type" /> of the Value property.</returns>
    </member>
    <member name="M:ABB.Robotics.RobotStudio.Stations.IOSignal.GetValueType(ABB.Robotics.RobotStudio.Stations.IOSignalType)">
      <summary>
            Returns the <see cref="T:System.Type" /> of the Value property depending in the signal type.
            </summary>
      <param name="signalType">Type of signal</param>
      <returns>The <see cref="T:System.Type" /> of the Value property </returns>
    </member>
    <member name="P:ABB.Robotics.RobotStudio.Stations.IOSignal.MaxValue"></member>
    <member name="P:ABB.Robotics.RobotStudio.Stations.IOSignal.MinValue"></member>
    <member name="P:ABB.Robotics.RobotStudio.Stations.IOSignal.Name"></member>
    <member name="P:ABB.Robotics.RobotStudio.Stations.IOSignal.Parent"></member>
    <member name="M:ABB.Robotics.RobotStudio.Stations.IOSignal.Pulse">
      <summary> Sets the value of a digital signal to 1 and back to 0. </summary>
    </member>
    <member name="P:ABB.Robotics.RobotStudio.Stations.IOSignal.ReadOnly"></member>
    <member name="P:ABB.Robotics.RobotStudio.Stations.IOSignal.SignalType"></member>
    <member name="M:ABB.Robotics.RobotStudio.Stations.IOSignal.TrySetValue(System.Object)">
      <summary>
            Try to set the specified value on the signal. A value validation is performed. The value is set only if it is valid.
            </summary>
      <returns>
            A <see cref="T:ABB.Robotics.RobotStudio.Stations.ValueValidationInfo" /> that specifies the result of the validation.
            </returns>
    </member>
    <member name="P:ABB.Robotics.RobotStudio.Stations.IOSignal.UIVisible"></member>
    <member name="M:ABB.Robotics.RobotStudio.Stations.IOSignal.ValidateValue(System.Object)">
      <summary>
            Check if its possible to set the specified value on this signal, given the signal type and restrictions.
            </summary>
      <returns>
            A <see cref="T:ABB.Robotics.RobotStudio.Stations.ValueValidationInfo" /> that specifies the result of the validation.
            </returns>
    </member>
    <member name="P:ABB.Robotics.RobotStudio.Stations.IOSignal.Value"></member>
    <member name="T:ABB.Robotics.RobotStudio.Stations.IOSignalChangedEventArgs"></member>
    <member name="P:ABB.Robotics.RobotStudio.Stations.IOSignalChangedEventArgs.Signal"></member>
    <member name="T:ABB.Robotics.RobotStudio.Stations.IOSignalChangedEventHandler"></member>
    <member name="T:ABB.Robotics.RobotStudio.Stations.IOSignalChangeEvent">
      <summary>
            Represents information about a I/O signal value change.
            </summary>
    </member>
    <member name="P:ABB.Robotics.RobotStudio.Stations.IOSignalChangeEvent.Name">
      <summary>
            Gets the name of the changed I/O signal.
            </summary>
    </member>
    <member name="P:ABB.Robotics.RobotStudio.Stations.IOSignalChangeEvent.Value">
      <summary>
            Gets the value of the changed I/O signal.
            </summary>
    </member>
    <member name="T:ABB.Robotics.RobotStudio.Stations.IOSignalCollection">
      <summary>
            Represents a collection of <see cref="T:ABB.Robotics.RobotStudio.Stations.IOSignal">IOSignals</see> attached to a
            <see cref="T:ABB.Robotics.RobotStudio.Stations.SmartComponent" /></summary>
    </member>
    <member name="M:ABB.Robotics.RobotStudio.Stations.IOSignalCollection.Add(ABB.Robotics.RobotStudio.Stations.IOSignal)">
      <summary>
            Adds an <see cref="T:ABB.Robotics.RobotStudio.Stations.IOSignal" /> to this IOSignalCollection object.
            </summary>
      <param name="signal">The <see cref="T:ABB.Robotics.RobotStudio.Stations.IOSignal" /> to be added.</param>
    </member>
    <member name="E:ABB.Robotics.RobotStudio.Stations.IOSignalCollection.Changed">
      <summary>
            Raised when an item is added to or removed from the collection
            </summary>
    </member>
    <member name="M:ABB.Robotics.RobotStudio.Stations.IOSignalCollection.Contains(System.String)">
      <summary>
            Determines if the <b>IOSignalCollection</b> contains a specific name.
            </summary>
    </member>
    <member name="M:ABB.Robotics.RobotStudio.Stations.IOSignalCollection.CopyTo(ABB.Robotics.RobotStudio.Stations.IOSignal[],System.Int32)"></member>
    <member name="M:ABB.Robotics.RobotStudio.Stations.IOSignalCollection.CopyTo(System.Array,System.Int32)"></member>
    <member name="P:ABB.Robotics.RobotStudio.Stations.IOSignalCollection.Count"></member>
    <member name="M:ABB.Robotics.RobotStudio.Stations.IOSignalCollection.GetEnumerator">
      <summary>
            Returns an <see cref="T:System.Collections.IEnumerator" /> that iterates over the keys in the <b>IOSignalCollection</b>.
            </summary>
      <returns>
            An <see cref="T:System.Collections.IEnumerator" /> for the IOSignalCollection.
            </returns>
    </member>
    <member name="P:ABB.Robotics.RobotStudio.Stations.IOSignalCollection.IsSynchronized"></member>
    <member name="P:ABB.Robotics.RobotStudio.Stations.IOSignalCollection.Item(System.Int32)">
      <summary>
            Gets the item at the specified index.
            </summary>
      <param name="index">The zero-based index of the item to get.</param>
      <exception cref="T:System.ArgumentOutOfRangeException">
            The index value is greater than the number of items in the collection.</exception>
    </member>
    <member name="P:ABB.Robotics.RobotStudio.Stations.IOSignalCollection.Item(System.String)">
      <summary>
            Gets the item with the specified name.
            </summary>
      <param name="name">The name of the item to get.</param>
      <exception cref="T:System.ArgumentException">
            The name value is not in the collection.</exception>
    </member>
    <member name="P:ABB.Robotics.RobotStudio.Stations.IOSignalCollection.Parent"></member>
    <member name="M:ABB.Robotics.RobotStudio.Stations.IOSignalCollection.Remove(System.String)">
      <summary>
            Removes an <see cref="T:ABB.Robotics.RobotStudio.Stations.IOSignal" /> from this IOSignalCollection object.
            </summary>
      <param name="name">The name of the IOSignal to be removed.</param>
      <exception cref="T:System.ArgumentException">
            An IOSignal with the specified name has not been added to the collection.
            </exception>
    </member>
    <member name="P:ABB.Robotics.RobotStudio.Stations.IOSignalCollection.SyncRoot"></member>
    <member name="T:ABB.Robotics.RobotStudio.Stations.IOSignalType">
      <summary>Specifies the type and direction of an <see cref="T:ABB.Robotics.RobotStudio.Stations.IOSignal" />.</summary>
    </member>
    <member name="F:ABB.Robotics.RobotStudio.Stations.IOSignalType.DigitalInput"></member>
    <member name="F:ABB.Robotics.RobotStudio.Stations.IOSignalType.DigitalOutput"></member>
    <member name="F:ABB.Robotics.RobotStudio.Stations.IOSignalType.AnalogInput"></member>
    <member name="F:ABB.Robotics.RobotStudio.Stations.IOSignalType.AnalogOutput"></member>
    <member name="F:ABB.Robotics.RobotStudio.Stations.IOSignalType.DigitalGroupInput"></member>
    <member name="F:ABB.Robotics.RobotStudio.Stations.IOSignalType.DigitalGroupOutput"></member>
    <member name="T:ABB.Robotics.RobotStudio.Stations.Irc5ConveyorInfo">
      <summary>
            Represents conveyor tracking specific information about a <see cref="T:ABB.Robotics.RobotStudio.Stations.Mechanism" /> of type <see cref="T:ABB.Robotics.RobotStudio.Stations.MechanismType">MechanismType.Irc5Conveyor</see>.<br />
            Such a mechanism is used to model a conveyor tracking device. It has only one joint, and this joint holds a number of attachment frames where tracked parts can be attached.
            Jogging this joint will move the attachement frames in the conveyor mechanical unit Base Frame X-axis direction.
            During simulation the conveyor joint will be moved by the Simulator in RobotStudio. Note: As opposed to for example a positioner or rotation table, the conveyor tracking mechanism does not get its joint value from the Virtual Controller.
            The conveyor is not controlled by the controller.
            </summary>
    </member>
    <member name="M:ABB.Robotics.RobotStudio.Stations.Irc5ConveyorInfo.AttachWorkpiece(ABB.Robotics.RobotStudio.Stations.Irc5ConveyorWorkpieceInfo)">
      <summary>
            Attaches the specified workpiece to the conveyor. The part and the attachment frame is specified in the <see cref="T:ABB.Robotics.RobotStudio.Stations.Irc5ConveyorWorkpieceInfo"> workpiece info</see>.
            The <see cref="T:ABB.Robotics.RobotStudio.Stations.Part">part</see> will be attached to the <see cref="T:ABB.Robotics.RobotStudio.Stations.Frame">attachment frame</see> immedately.
            The <see cref="!:RsWorkobject">workobject</see> will be attached to the <see cref="T:ABB.Robotics.RobotStudio.Stations.Frame">attachement frame</see> when the workobject is connected.
            </summary>
      <param name="workpieceInfo">Information about the <see cref="T:ABB.Robotics.RobotStudio.Stations.Irc5ConveyorWorkpieceInfo">workpiece</see> to be attached.</param>
    </member>
    <member name="M:ABB.Robotics.RobotStudio.Stations.Irc5ConveyorInfo.AttachWorkpiece(ABB.Robotics.RobotStudio.Stations.Irc5ConveyorWorkpieceInfo,ABB.Robotics.Math.Matrix4)">
      <summary>
            Attaches the specified workpiece to the conveyor. The part and the attachment frame is specified in the <see cref="T:ABB.Robotics.RobotStudio.Stations.Irc5ConveyorWorkpieceInfo"> workpiece info</see>.
            The <see cref="T:ABB.Robotics.RobotStudio.Stations.Part">part</see> will be attached to the <see cref="T:ABB.Robotics.RobotStudio.Stations.Frame">attachment frame</see> immedately.
            The <see cref="!:RsWorkobject">workobject</see> will be attached to the <see cref="T:ABB.Robotics.RobotStudio.Stations.Frame">attachement frame</see> when the workobject is connected.
            </summary>
      <param name="workpieceInfo">Information about the <see cref="T:ABB.Robotics.RobotStudio.Stations.Irc5ConveyorWorkpieceInfo">workpiece</see> to be attached.</param>
      <param name="offset">Mounting offset between the <see cref="T:ABB.Robotics.RobotStudio.Stations.Frame">attachment frame</see> and the <see cref="T:ABB.Robotics.RobotStudio.Stations.Part">part</see>.</param>
    </member>
    <member name="M:ABB.Robotics.RobotStudio.Stations.Irc5ConveyorInfo.DetachWorkpiece(ABB.Robotics.RobotStudio.Stations.Frame)">
      <summary>
            Detaches the workpiece that is attached to the specified attachment frame.
            </summary>
      <param name="conveyorAttachmentFrame">The frame from which attached workobject and part shall be detached from.</param>
    </member>
    <member name="M:ABB.Robotics.RobotStudio.Stations.Irc5ConveyorInfo.GetAttachedWorkpieces">
      <summary>
            Gets all <see cref="T:ABB.Robotics.RobotStudio.Stations.Irc5ConveyorWorkpieceInfo">workpiece info</see> of this conveyor.
            </summary>
    </member>
    <member name="M:ABB.Robotics.RobotStudio.Stations.Irc5ConveyorInfo.GetAttachedWorkpieces(ABB.Robotics.RobotStudio.Stations.RsIrc5ConveyorEncoderUnit)">
      <summary>
            Gets all <see cref="T:ABB.Robotics.RobotStudio.Stations.Irc5ConveyorWorkpieceInfo">workpiece info</see> for this conveyor and that is associated with the
            <see cref="T:ABB.Robotics.RobotStudio.Stations.RsIrc5ConveyorEncoderUnit">encoder unit</see></summary>
      <param name="encoder">The enocoder unit to be used when getting the conveyors workpiece info.</param>
    </member>
    <member name="M:ABB.Robotics.RobotStudio.Stations.Irc5ConveyorInfo.GetOriginalOffsetPartWorkObject(ABB.Robotics.RobotStudio.Stations.Frame,ABB.Robotics.RobotStudio.Stations.RsWorkObject)">
      <summary>
            The relative transfrom (offset) between the workpiece and the workobject
            </summary>
      <param name="conveyorAttachmentFrame"></param>
      <param name="workObject"></param>
      <returns></returns>
    </member>
    <member name="M:ABB.Robotics.RobotStudio.Stations.Irc5ConveyorInfo.GetWorkObjectConnectionStatus(ABB.Robotics.RobotStudio.Stations.RsWorkObject,System.Boolean@,System.Double@)">
      <summary>
            Gets the connection status of a <see cref="T:ABB.Robotics.RobotStudio.Stations.RsWorkObject">workobject</see>
            If the workobject is connected, the position of the conveyor is given, otherwise the position will be 0
            </summary>
      <param name="workObject">The workobject to get the connection status of.</param>
      <param name="connected">The returned connection status. True means connected</param>
      <param name="cnvPosition">The position of the conveyor.</param>
    </member>
    <member name="M:ABB.Robotics.RobotStudio.Stations.Irc5ConveyorInfo.Reset">
      <summary>
            Resets the conveyor mechanism toSets the motion speed of the conveyor. The speed is used at simulation time.
            If called during a simulation, the current speed will be changed to the specified speed, linearly, over the specified change time.
            For example if the speed is currently 1m/s, and the speed is changed to 0m/s, with change time 1s, the speed will decrease from 1 to 0 in 1 second.
            </summary>
    </member>
    <member name="M:ABB.Robotics.RobotStudio.Stations.Irc5ConveyorInfo.SetSpeed(System.Double,System.Double)">
      <summary>
            Sets the motion speed of the conveyor. The speed is used at simulation time.
            If called during a simulation, the current speed will be changed to the specified speed, linearly, over the specified change time.
            For example if the speed is currently 1m/s, and the speed is changed to 0m/s, with change time 1s, the speed will decrease from 1 to 0 in 1 second.
            </summary>
    </member>
    <member name="P:ABB.Robotics.RobotStudio.Stations.Irc5ConveyorInfo.Speed">
      <summary>
            Returns the motion speed of the conveyor. The speed is used at simulation time.
            </summary>
    </member>
    <member name="E:ABB.Robotics.RobotStudio.Stations.Irc5ConveyorInfo.TrackingStateChanged">
      <summary>
            Occurs when the conveyor tracking state is changed
            </summary>
    </member>
    <member name="T:ABB.Robotics.RobotStudio.Stations.Irc5ConveyorTrackingState">
      <summary>Specifies the different states a conveyor mechanism can be in, with respect to part tracking.</summary>
    </member>
    <member name="F:ABB.Robotics.RobotStudio.Stations.Irc5ConveyorTrackingState.Connected"></member>
    <member name="F:ABB.Robotics.RobotStudio.Stations.Irc5ConveyorTrackingState.Dropped"></member>
    <member name="F:ABB.Robotics.RobotStudio.Stations.Irc5ConveyorTrackingState.PassedStartWindow"></member>
    <member name="F:ABB.Robotics.RobotStudio.Stations.Irc5ConveyorTrackingState.Tracked"></member>
    <member name="T:ABB.Robotics.RobotStudio.Stations.Irc5ConveyorWorkpieceInfo">
      <summary>
            This struct contains the information needed to
            attach a workpiece part to a conveyor mechanism.
            </summary>
    </member>
    <member name="M:ABB.Robotics.RobotStudio.Stations.Irc5ConveyorWorkpieceInfo.#ctor(ABB.Robotics.RobotStudio.Stations.Frame,ABB.Robotics.RobotStudio.Stations.GraphicComponent,ABB.Robotics.RobotStudio.Stations.RsWorkObject)">
      <summary>
            Initializes a new instance of the Irc5ConveyorWorkpieceInfo structure, with the specified attachment frame, workpiece graphic component and workobject.
            </summary>
      <param name="conveyorAttachmentFrame">The frame which the workobject and part are attached to.</param>
      <param name="workpiece">The graphic component that is attached to the attachment frame.</param>
      <param name="trackingWorkObject">The workobject that is attached to the attachment frame, when in connected state.</param>
    </member>
    <member name="M:ABB.Robotics.RobotStudio.Stations.Irc5ConveyorWorkpieceInfo.#ctor(ABB.Robotics.RobotStudio.Stations.Frame,ABB.Robotics.RobotStudio.Stations.GraphicComponent,ABB.Robotics.RobotStudio.Stations.RsWorkObject[])">
      <summary>
            Initializes a new instance of the Irc5ConveyorWorkpieceInfo structure, with the specified attachment frame, workpiece part and workobjects.
            </summary>
      <param name="conveyorAttachmentFrame">The frame which the workobject and part are attached to.</param>
      <param name="workpiece">The graphic component that is attached to the attachment frame.</param>
      <param name="trackingWorkObjects">The workobject that is attached to the attachment frame, when in connected state.</param>
    </member>
    <member name="M:ABB.Robotics.RobotStudio.Stations.Irc5ConveyorWorkpieceInfo.#ctor(ABB.Robotics.RobotStudio.Stations.Frame,ABB.Robotics.RobotStudio.Stations.Part,ABB.Robotics.RobotStudio.Stations.RsWorkObject)">
      <summary>
            Initializes a new instance of the Irc5ConveyorWorkpieceInfo structure, with the specified attachment frame, workpiece part and workobject.
            </summary>
      <param name="conveyorAttachmentFrame">The frame which the workobject and part are attached to.</param>
      <param name="workpiecePart">The part that is attached to the attachment frame.</param>
      <param name="trackingWorkObject">The workobject that is attached to the attachment frame, when in connected state.</param>
    </member>
    <member name="M:ABB.Robotics.RobotStudio.Stations.Irc5ConveyorWorkpieceInfo.#ctor(ABB.Robotics.RobotStudio.Stations.Frame,ABB.Robotics.RobotStudio.Stations.Part,ABB.Robotics.RobotStudio.Stations.RsWorkObject[])">
      <summary>
            Initializes a new instance of the Irc5ConveyorWorkpieceInfo structure, with the specified attachment frame, workpiece component and workobjects.
            </summary>
      <param name="conveyorAttachmentFrame">The frame which the workobject and part are attached to.</param>
      <param name="workpiecePart">The part that is attached to the attachment frame.</param>
      <param name="trackingWorkObjects">The workobject that is attached to the attachment frame, when in connected state.</param>
    </member>
    <member name="P:ABB.Robotics.RobotStudio.Stations.Irc5ConveyorWorkpieceInfo.ConveyorAttachmentFrame"></member>
    <member name="M:ABB.Robotics.RobotStudio.Stations.Irc5ConveyorWorkpieceInfo.GetWorkObjects"></member>
    <member name="M:ABB.Robotics.RobotStudio.Stations.Irc5ConveyorWorkpieceInfo.SetWorkObjects(ABB.Robotics.RobotStudio.Stations.RsWorkObject[])"></member>
    <member name="P:ABB.Robotics.RobotStudio.Stations.Irc5ConveyorWorkpieceInfo.Workpiece"></member>
    <member name="P:ABB.Robotics.RobotStudio.Stations.Irc5ConveyorWorkpieceInfo.WorkpiecePart"></member>
    <member name="T:ABB.Robotics.RobotStudio.Stations.JointType"></member>
    <member name="F:ABB.Robotics.RobotStudio.Stations.JointType.Rotational"></member>
    <member name="F:ABB.Robotics.RobotStudio.Stations.JointType.Prismatic"></member>
    <member name="F:ABB.Robotics.RobotStudio.Stations.JointType.Undefined"></member>
    <member name="T:ABB.Robotics.RobotStudio.Stations.KnownAttributeKey">
      <summary>
            Contains attribute keys for use in the DynamicProperty.Attributes collection.
            Attributes with these keys are used for value validation and user interface hints.
            </summary>
    </member>
    <member name="F:ABB.Robotics.RobotStudio.Stations.KnownAttributeKey.AddToDisplayName">
      <summary> Indicates that the value of the property should be added to the
            DisplayName of the parent component. </summary>
    </member>
    <member name="F:ABB.Robotics.RobotStudio.Stations.KnownAttributeKey.AllowedCharacters">
      <summary> Indicates the allowed characters in a string property. </summary>
    </member>
    <member name="F:ABB.Robotics.RobotStudio.Stations.KnownAttributeKey.AllowedTypes">
      <summary> Indicates additional restrictions on the allowed type. </summary>
    </member>
    <member name="F:ABB.Robotics.RobotStudio.Stations.KnownAttributeKey.AllowedValues">
      <summary> Indicates the allowed values for a numeric or string property. Value must be a list delimited by semicolons. </summary>
    </member>
    <member name="F:ABB.Robotics.RobotStudio.Stations.KnownAttributeKey.AllowParent">
      <summary> Indicates that the component that owns the property is a valid value (by default it is not). </summary>
    </member>
    <member name="F:ABB.Robotics.RobotStudio.Stations.KnownAttributeKey.AutoApply">
      <summary> Indicates that the property value should be applied immediately when it is changed
            in the GUI, rather than when the user clicks "Apply" or equivalent. </summary>
    </member>
    <member name="F:ABB.Robotics.RobotStudio.Stations.KnownAttributeKey.CustomValidation">
      <summary> Indicates that QueryPropertyValueValid() should be called to validate the value. </summary>
    </member>
    <member name="F:ABB.Robotics.RobotStudio.Stations.KnownAttributeKey.DisplayValues">
      <summary> Indicates alternative display values for a property. Value must be a list delimited by
            semicolons with the same number of elements as the AllowedValues attribute. </summary>
    </member>
    <member name="F:ABB.Robotics.RobotStudio.Stations.KnownAttributeKey.MaxLength">
      <summary> Indicates the maximum length of a string property. Value must be an integer. </summary>
    </member>
    <member name="F:ABB.Robotics.RobotStudio.Stations.KnownAttributeKey.MaxValue">
      <summary> Indicates the maximum value for a numeric property. Value must be a number. </summary>
    </member>
    <member name="F:ABB.Robotics.RobotStudio.Stations.KnownAttributeKey.MinLength">
      <summary> Indicates the minimum length of a string property. Value must be an integer. </summary>
    </member>
    <member name="F:ABB.Robotics.RobotStudio.Stations.KnownAttributeKey.MinValue">
      <summary> Indicates the minium value for a numeric property. Value must be a number. </summary>
    </member>
    <member name="F:ABB.Robotics.RobotStudio.Stations.KnownAttributeKey.Multiline">
      <summary> Indicates that a string property can have multiple lines. </summary>
    </member>
    <member name="F:ABB.Robotics.RobotStudio.Stations.KnownAttributeKey.Quantity">
      <summary> Indicates the quantity that a numeric property represents. </summary>
    </member>
    <member name="F:ABB.Robotics.RobotStudio.Stations.KnownAttributeKey.Slider">
      <summary> Indicates that a numeric property should be displayed as a slider. </summary>
    </member>
    <member name="F:ABB.Robotics.RobotStudio.Stations.KnownAttributeKey.ValueFilter">
      <summary> Specifies a regular expression used to verify the property value (converted to a string). </summary>
    </member>
    <member name="F:ABB.Robotics.RobotStudio.Stations.KnownAttributeKey.VectorUsage">
      <summary> Indicates the usage of a Vector3 property. Valid values are Position and Direction. </summary>
    </member>
    <member name="T:ABB.Robotics.RobotStudio.Stations.Light">
      <summary>
            Represents a light source in a station.
            </summary>
    </member>
    <member name="M:ABB.Robotics.RobotStudio.Stations.Light.#ctor(ABB.Robotics.RobotStudio.Stations.LightType)"></member>
    <member name="P:ABB.Robotics.RobotStudio.Stations.Light.AmbientIntensity">
      <summary>
            Gets or sets the ambient intensity of the light.
            </summary>
    </member>
    <member name="P:ABB.Robotics.RobotStudio.Stations.Light.CastShadows">
      <summary>
            Gets or sets if this light casts shadows
            </summary>
    </member>
    <member name="P:ABB.Robotics.RobotStudio.Stations.Light.Color">
      <summary>
            Gets or sets the color of the light.
            </summary>
    </member>
    <member name="M:ABB.Robotics.RobotStudio.Stations.Light.CreateInfiniteLight(ABB.Robotics.Math.Vector3)"></member>
    <member name="M:ABB.Robotics.RobotStudio.Stations.Light.CreatePointLight(ABB.Robotics.Math.Vector3)"></member>
    <member name="M:ABB.Robotics.RobotStudio.Stations.Light.CreateSpotLight(ABB.Robotics.Math.Vector3,ABB.Robotics.Math.Vector3)"></member>
    <member name="P:ABB.Robotics.RobotStudio.Stations.Light.DiffuseIntensity">
      <summary>
            Gets or sets the diffuse intensity of the light.
            </summary>
    </member>
    <member name="P:ABB.Robotics.RobotStudio.Stations.Light.Direction">
      <summary>
            Gets or sets the direction of the light. Not applicable to point lights.
            </summary>
    </member>
    <member name="P:ABB.Robotics.RobotStudio.Stations.Light.Enabled">
      <summary>
            Gets or sets if this light is enabled, i.e. turned on
            </summary>
    </member>
    <member name="P:ABB.Robotics.RobotStudio.Stations.Light.MaxLightCount">
      <summary>
            Returns the maximum number of lights that can be enabled at any given time
            </summary>
    </member>
    <member name="P:ABB.Robotics.RobotStudio.Stations.Light.MaxShadowCount">
      <summary>
            Returns the maximum number of lights that can cast shadows at any given time.
            </summary>
    </member>
    <member name="P:ABB.Robotics.RobotStudio.Stations.Light.Position">
      <summary>
            Gets or sets the position of the light source. Not applicable to infinite lights.
            </summary>
    </member>
    <member name="P:ABB.Robotics.RobotStudio.Stations.Light.Range">
      <summary>
            Gets or sets the maximum range of the light in meters
            </summary>
    </member>
    <member name="P:ABB.Robotics.RobotStudio.Stations.Light.SpecularIntensity">
      <summary>
            Gets or sets the specular intensity of the light.
            </summary>
    </member>
    <member name="P:ABB.Robotics.RobotStudio.Stations.Light.SpotAngle">
      <summary>
            Angle of the spotlight cone, in radians
            </summary>
    </member>
    <member name="P:ABB.Robotics.RobotStudio.Stations.Light.Transform">
      <summary>
            Gets the <see cref="P:ABB.Robotics.RobotStudio.Stations.Light.Transform" /> of the light.
            </summary>
    </member>
    <member name="P:ABB.Robotics.RobotStudio.Stations.Light.Type">
      <summary>
            Returns the type of light.
            </summary>
    </member>
    <member name="T:ABB.Robotics.RobotStudio.Stations.LightCollection"></member>
    <member name="M:ABB.Robotics.RobotStudio.Stations.LightCollection.ResetLights">
      <summary>
            Resets all lights to their defaults
            </summary>
    </member>
    <member name="T:ABB.Robotics.RobotStudio.Stations.LightType"></member>
    <member name="F:ABB.Robotics.RobotStudio.Stations.LightType.Ambient"></member>
    <member name="F:ABB.Robotics.RobotStudio.Stations.LightType.Infinite"></member>
    <member name="F:ABB.Robotics.RobotStudio.Stations.LightType.Point"></member>
    <member name="F:ABB.Robotics.RobotStudio.Stations.LightType.Spot"></member>
    <member name="T:ABB.Robotics.RobotStudio.Stations.Loop">
      <summary>A Loop is a set of connected coedges. Normally it has no start or end points.<br /><img src="GeometryTopology.jpg" /></summary>
    </member>
    <member name="P:ABB.Robotics.RobotStudio.Stations.Loop.Body">
      <summary>
            Gets the <see cref="P:ABB.Robotics.RobotStudio.Stations.Loop.Body" /> that the <see cref="T:ABB.Robotics.RobotStudio.Stations.Loop" /> belongs to.
            </summary>
    </member>
    <member name="P:ABB.Robotics.RobotStudio.Stations.Loop.Coedges">
      <summary>
            Returns a <see cref="T:ABB.Robotics.RobotStudio.Stations.CoedgeCollection" /> object containing the coedges
            of the wire.
            </summary>
    </member>
    <member name="M:ABB.Robotics.RobotStudio.Stations.Loop.FindClosestVertex(ABB.Robotics.Math.Vector3)">
      <summary>Returns the <see cref="T:ABB.Robotics.RobotStudio.Stations.Vertex" /> of the <see cref="T:ABB.Robotics.RobotStudio.Stations.Loop" /> that is closest to the provided point.</summary>
      <param name="testPoint">The point which to find the closest vertex to.</param>
      <returns>The closest <see cref="T:ABB.Robotics.RobotStudio.Stations.Vertex" />.</returns>
    </member>
    <member name="T:ABB.Robotics.RobotStudio.Stations.LoopCollection">
      <summary>A collection of <see cref="T:ABB.Robotics.RobotStudio.Stations.Loop" /> objects.</summary>
    </member>
    <member name="M:ABB.Robotics.RobotStudio.Stations.LoopCollection.Contains(ABB.Robotics.RobotStudio.Stations.Loop)"></member>
    <member name="M:ABB.Robotics.RobotStudio.Stations.LoopCollection.CopyTo(ABB.Robotics.RobotStudio.Stations.Loop[],System.Int32)"></member>
    <member name="M:ABB.Robotics.RobotStudio.Stations.LoopCollection.CopyTo(System.Array,System.Int32)"></member>
    <member name="P:ABB.Robotics.RobotStudio.Stations.LoopCollection.Count"></member>
    <member name="M:ABB.Robotics.RobotStudio.Stations.LoopCollection.GetEnumerator"></member>
    <member name="P:ABB.Robotics.RobotStudio.Stations.LoopCollection.IsSynchronized"></member>
    <member name="P:ABB.Robotics.RobotStudio.Stations.LoopCollection.Item(System.Int32)"></member>
    <member name="P:ABB.Robotics.RobotStudio.Stations.LoopCollection.List"></member>
    <member name="P:ABB.Robotics.RobotStudio.Stations.LoopCollection.Parent"></member>
    <member name="P:ABB.Robotics.RobotStudio.Stations.LoopCollection.SyncRoot"></member>
    <member name="M:ABB.Robotics.RobotStudio.Stations.LoopCollection.ToArray"></member>
    <member name="T:ABB.Robotics.RobotStudio.Stations.Markup">
      <summary>
            Represents a text and pointer markup displayed in the 3D graphics.
            </summary>
    </member>
    <member name="M:ABB.Robotics.RobotStudio.Stations.Markup.#ctor">
      <summary>
            Creates a new Markup
            </summary>
    </member>
    <member name="P:ABB.Robotics.RobotStudio.Stations.Markup.Image">
      <summary>
            Gets or sets an image that is displayed in the markup
            </summary>
    </member>
    <member name="P:ABB.Robotics.RobotStudio.Stations.Markup.Text">
      <summary>
            Gets or sets the text of the markup
            </summary>
    </member>
    <member name="P:ABB.Robotics.RobotStudio.Stations.Markup.Topmost">
      <summary>
            Gets or sets a value indicating that the markup will not be obscured by other objects.
            </summary>
    </member>
    <member name="P:ABB.Robotics.RobotStudio.Stations.Markup.Transform">
      <summary>
            Gets the <see cref="P:ABB.Robotics.RobotStudio.Stations.Markup.Transform" /> of the object.
            </summary>
    </member>
    <member name="P:ABB.Robotics.RobotStudio.Stations.Markup.Visible">
      <summary>
            Gets or sets a value indicating whether the markup will
            be visible in the graphics.
            </summary>
    </member>
    <member name="T:ABB.Robotics.RobotStudio.Stations.MarkupCollection">
      <summary>
            A collection of Markup objects.
            </summary>
    </member>
    <member name="M:ABB.Robotics.RobotStudio.Stations.MarkupCollection.Add(ABB.Robotics.RobotStudio.Stations.Markup)"></member>
    <member name="M:ABB.Robotics.RobotStudio.Stations.MarkupCollection.Contains(ABB.Robotics.RobotStudio.Stations.Markup)"></member>
    <member name="M:ABB.Robotics.RobotStudio.Stations.MarkupCollection.CopyTo(ABB.Robotics.RobotStudio.Stations.Markup[],System.Int32)"></member>
    <member name="M:ABB.Robotics.RobotStudio.Stations.MarkupCollection.CopyTo(System.Array,System.Int32)"></member>
    <member name="P:ABB.Robotics.RobotStudio.Stations.MarkupCollection.Count"></member>
    <member name="M:ABB.Robotics.RobotStudio.Stations.MarkupCollection.GetEnumerator"></member>
    <member name="P:ABB.Robotics.RobotStudio.Stations.MarkupCollection.IsSynchronized"></member>
    <member name="P:ABB.Robotics.RobotStudio.Stations.MarkupCollection.Item(System.Int32)"></member>
    <member name="P:ABB.Robotics.RobotStudio.Stations.MarkupCollection.Parent"></member>
    <member name="M:ABB.Robotics.RobotStudio.Stations.MarkupCollection.Remove(ABB.Robotics.RobotStudio.Stations.Markup)"></member>
    <member name="P:ABB.Robotics.RobotStudio.Stations.MarkupCollection.SyncRoot"></member>
    <member name="M:ABB.Robotics.RobotStudio.Stations.MarkupCollection.ToArray"></member>
    <member name="T:ABB.Robotics.RobotStudio.Stations.Material"></member>
    <member name="M:ABB.Robotics.RobotStudio.Stations.Material.#ctor">
      <summary>
            Creates a new <see cref="T:ABB.Robotics.RobotStudio.Stations.Material" /> with a default (gray) color.
            </summary>
    </member>
    <member name="M:ABB.Robotics.RobotStudio.Stations.Material.#ctor(ABB.Robotics.RobotStudio.Stations.Texture)">
      <summary>
            Creates a new <see cref="T:ABB.Robotics.RobotStudio.Stations.Material" /> with the given texture. 
            </summary>
    </member>
    <member name="M:ABB.Robotics.RobotStudio.Stations.Material.#ctor(System.Drawing.Color)">
      <summary>
            Creates a new <see cref="T:ABB.Robotics.RobotStudio.Stations.Material" /> with the given color.
            </summary>
    </member>
    <member name="M:ABB.Robotics.RobotStudio.Stations.Material.#ctor(System.Drawing.Color,System.Drawing.Color,System.Drawing.Color,System.Drawing.Color,System.Int32)">
      <summary>
            Creates a new <see cref="T:ABB.Robotics.RobotStudio.Stations.Material" /> with the given color parameters
            </summary>
      <param name="ambient">Ambient color component. See <see cref="P:ABB.Robotics.RobotStudio.Stations.Material.Ambient" />.</param>
      <param name="diffuse">Diffuse color component. See <see cref="P:ABB.Robotics.RobotStudio.Stations.Material.Diffuse" />.</param>
      <param name="specular">Specular color component. See <see cref="P:ABB.Robotics.RobotStudio.Stations.Material.Specular" />.</param>
      <param name="emissive">Emissive color component. See <see cref="P:ABB.Robotics.RobotStudio.Stations.Material.Emissive" />.</param>
      <param name="shininess">Sets the shininess value. See <see cref="P:ABB.Robotics.RobotStudio.Stations.Material.Shininess" />.</param>
    </member>
    <member name="P:ABB.Robotics.RobotStudio.Stations.Material.Ambient">
      <summary>
            Gets or sets the ambient color component. The ambient color is applied uniformly to an 
            object regardless of light and view direction.
            </summary>
    </member>
    <member name="P:ABB.Robotics.RobotStudio.Stations.Material.BaseTexture">
      <summary>
            Gets or sets the base color texture. 
            </summary>
    </member>
    <member name="P:ABB.Robotics.RobotStudio.Stations.Material.Blend">
      <summary>
            Gets or sets whether the result of the color properties (ambient, diffuse, specular, emissive, shininess) should be blended
            with the texture-based effects.
            </summary>
    </member>
    <member name="P:ABB.Robotics.RobotStudio.Stations.Material.BlendMode">
      <summary>
            Gets or sets how the result of the color properties (ambient, diffuse, specular, emissive, shininess) should be blended
            with the texture-based effects.
            </summary>
    </member>
    <member name="M:ABB.Robotics.RobotStudio.Stations.Material.Clone"></member>
    <member name="P:ABB.Robotics.RobotStudio.Stations.Material.Diffuse">
      <summary>
            Gets or sets the diffuse color component. The diffuse color represents the light reflected from a 
            matte surface.
            </summary>
    </member>
    <member name="P:ABB.Robotics.RobotStudio.Stations.Material.Effect"></member>
    <member name="P:ABB.Robotics.RobotStudio.Stations.Material.Emissive">
      <summary>
            Gets or sets the emissive color component. It behaves similar to the ambient color, except it is independent
            of the color of the light source.
            </summary>
    </member>
    <member name="F:ABB.Robotics.RobotStudio.Stations.Material.Empty"></member>
    <member name="P:ABB.Robotics.RobotStudio.Stations.Material.EnvironmentMap">
      <summary>
            Gets or sets the environment map texture. The environment map is used to simulate a reflective surface. 
            The texture in the environment map will be reflected by the surface it is applied to.
            </summary>
    </member>
    <member name="M:ABB.Robotics.RobotStudio.Stations.Material.Equals(System.Object)"></member>
    <member name="M:ABB.Robotics.RobotStudio.Stations.Material.GetHashCode"></member>
    <member name="M:ABB.Robotics.RobotStudio.Stations.Material.GetSimpleColor">
      <summary>
            Gets the basic color from the material.
            </summary>
    </member>
    <member name="P:ABB.Robotics.RobotStudio.Stations.Material.IsEmpty"></member>
    <member name="P:ABB.Robotics.RobotStudio.Stations.Material.NormalMap">
      <summary>
            Gets or sets the normal map texture. The normal map contains perturbations of the surface normal encoded as RGB values.
            It is used by the various bump mapping effects.
            </summary>
    </member>
    <member name="M:ABB.Robotics.RobotStudio.Stations.Material.SetSimpleColor(System.Drawing.Color)">
      <summary>
            Sets the basic color and automatically calculate material properties like specular color, diffuse color etc.
            </summary>
    </member>
    <member name="P:ABB.Robotics.RobotStudio.Stations.Material.Shininess">
      <summary>
            Gets or sets the coefficent for specular lighting. It affects the tightness of the specular highlight.
            The value has to be between 0 and 128. The default value is 30.
            </summary>
    </member>
    <member name="P:ABB.Robotics.RobotStudio.Stations.Material.Specular">
      <summary>
            Gets or sets the specular color component. The specular color represents the shiny effect resulting
            from a reflective surface.
            </summary>
    </member>
    <member name="P:ABB.Robotics.RobotStudio.Stations.Material.TextureLuminosity">
      <summary>
            Gets or sets the luminosity of the base texture, which defines how
            the texture is lighted.
            </summary>
    </member>
    <member name="P:ABB.Robotics.RobotStudio.Stations.Material.TextureSize">
      <summary>
            Gets or sets a desired width and height, in meters, of the base texture and normal map when applied to a surface.
            </summary>
    </member>
    <member name="T:ABB.Robotics.RobotStudio.Stations.MaterialEffect"></member>
    <member name="F:ABB.Robotics.RobotStudio.Stations.MaterialEffect.Basic"></member>
    <member name="F:ABB.Robotics.RobotStudio.Stations.MaterialEffect.Anisotropic"></member>
    <member name="F:ABB.Robotics.RobotStudio.Stations.MaterialEffect.BumpMapping"></member>
    <member name="F:ABB.Robotics.RobotStudio.Stations.MaterialEffect.ParallaxBumpMapping"></member>
    <member name="F:ABB.Robotics.RobotStudio.Stations.MaterialEffect.EnvironmentBumpMapping"></member>
    <member name="F:ABB.Robotics.RobotStudio.Stations.MaterialEffect.GoochShading"></member>
    <member name="T:ABB.Robotics.RobotStudio.Stations.MechanicalUnitActivationMode"></member>
    <member name="F:ABB.Robotics.RobotStudio.Stations.MechanicalUnitActivationMode.Active"></member>
    <member name="F:ABB.Robotics.RobotStudio.Stations.MechanicalUnitActivationMode.Deactive"></member>
    <member name="T:ABB.Robotics.RobotStudio.Stations.MechanicalUnitType"></member>
    <member name="F:ABB.Robotics.RobotStudio.Stations.MechanicalUnitType.Undefined"></member>
    <member name="F:ABB.Robotics.RobotStudio.Stations.MechanicalUnitType.TCPRobot"></member>
    <member name="F:ABB.Robotics.RobotStudio.Stations.MechanicalUnitType.Robot"></member>
    <member name="F:ABB.Robotics.RobotStudio.Stations.MechanicalUnitType.Single"></member>
    <member name="T:ABB.Robotics.RobotStudio.Stations.Mechanism"></member>
    <member name="M:ABB.Robotics.RobotStudio.Stations.Mechanism.CalculateForwardKinematics(System.Double[],ABB.Robotics.RobotStudio.Stations.ForwardKinematicsResult@)">
      <summary>
            Calculates forward kinematics for the mechanism. Given the specified mechanism joint values, the resulting TCP (tool0) transform is returned.
            </summary>
      <param name="jointValues">Array of mechanism joint values, for which to calculate forward kinematics.</param>
      <param name="insideLimits">Out parameter that specifies if the forward kinematics calculation failed or succeded.</param>
      <returns>The transform of the TCP (tool0) if the mechanism were positioned according to the specified joint values.</returns>
    </member>
    <member name="M:ABB.Robotics.RobotStudio.Stations.Mechanism.CalculateInverseKinematics(ABB.Robotics.Math.Matrix4,ABB.Robotics.Math.Matrix4,System.Boolean,System.Double[]@)"></member>
    <member name="M:ABB.Robotics.RobotStudio.Stations.Mechanism.CalculateInverseKinematics(ABB.Robotics.Math.Matrix4,System.Double[],System.Double[],ABB.Robotics.Math.Matrix4,System.Boolean,System.Double[]@)"></member>
    <member name="M:ABB.Robotics.RobotStudio.Stations.Mechanism.CalculateInverseKinematics(ABB.Robotics.RobotStudio.Stations.RsRobTarget,ABB.Robotics.RobotStudio.Stations.RsWorkObject,ABB.Robotics.RobotStudio.Stations.RsToolData,System.Int32[],System.Double[]@)"></member>
    <member name="M:ABB.Robotics.RobotStudio.Stations.Mechanism.CalculateInverseKinematics(ABB.Robotics.RobotStudio.Stations.RsTarget,ABB.Robotics.RobotStudio.Stations.RsToolData,System.Boolean,System.Double[]@)">
      <summary>
            Calculates inverse kinematics for the mechanism. Given the specified <see cref="T:ABB.Robotics.RobotStudio.Stations.RsTarget" /> and <see cref="T:ABB.Robotics.RobotStudio.Stations.RsToolData" />, this method returns the joint values the mechanism would have if it was moved to the pose.
            A mechanism can often reach the specified pose with different arm configurations. Using the <b>useConfiguration</b> you force the arm configuration stored in the <b>RsTarget</b> to be used.
            </summary>
      <param name="target">The target position. This is the position that shall coincide with the tool.</param>
      <param name="tool">The tool that should coincide with the target. The <b>RobotHold</b> property is used to determince if the tool is stationary or held by the robot.</param>
      <param name="useConfiguration">Specifies if the exact arm configuration stored in the target shall be used for the calculation. If set to true, the arm configuration is used.
            In this case this method returns true only if the mechanism can move to the specified target with its specified arm configuration. If the parameter is set to false, the arm configuration that is closes to the current mechanism joint values is returned, if the target is reachable.</param>
      <param name="resultJointVector">Out parameter that contains the joint values, the mechanism would have if it was moved to the target position. If this method returns false, the joint values are undefined.</param>
      <returns> True, if the mechanism can move to the target position, otherwise false.</returns>
    </member>
    <member name="M:ABB.Robotics.RobotStudio.Stations.Mechanism.CanReach(ABB.Robotics.Math.Matrix4,ABB.Robotics.Math.Matrix4)">
      <summary>
            Checks if the specified target position can be reached with the specified tool.
            A mechanism can often reach the specified target with different arm configurations. This method returns true as long as there is at least one arm configuration with which the robot can reach the target.
            </summary>
      <param name="pose">The target position. This is the position that shall coincide with the tool.</param>
      <param name="toolMat">The tool frame that should coincide with the target.</param>
      <returns> True, if the mechanism can move to the target position, otherwise false.</returns>
    </member>
    <member name="M:ABB.Robotics.RobotStudio.Stations.Mechanism.CanReach(ABB.Robotics.RobotStudio.Stations.RsRobTarget,ABB.Robotics.RobotStudio.Stations.RsWorkObject,ABB.Robotics.RobotStudio.Stations.RsToolData)">
      <summary>
            Checks if the specified target position can be reached with the specified tool.
            A mechanism can often reach the specified target with different arm configurations. This method returns true as long as there is at least one arm configuration with which the robot can reach the target.
            </summary>
      <param name="robTarget">The target position. This is the position that shall coincide with the tool.</param>
      <param name="workObject">The workobject to use.</param>
      <param name="tool">The tool that should coincide with the target. The <b>RobotHold</b> property is used to determine if the tool is stationary or held by the robot.</param>
      <returns> True, if the mechanism can move to the target position, otherwise false.</returns>
    </member>
    <member name="M:ABB.Robotics.RobotStudio.Stations.Mechanism.ClearTrace"></member>
    <member name="M:ABB.Robotics.RobotStudio.Stations.Mechanism.CreateFromScript(System.String)">
      <summary>
            This method is for internal use only.
            </summary>
    </member>
    <member name="M:ABB.Robotics.RobotStudio.Stations.Mechanism.GetActiveJoints">
      <summary>
            This method returns the indices of the joints used by this mechanism, as an array of <see cref="T:System.Int32">integers</see>.
            The length of the array depends on how many joints are used. Some mechnism models has less than six axis.
            The indices can be used together with the result from <see cref="M:ABB.Robotics.RobotStudio.Stations.Mechanism.GetJointValues" /></summary>
      <returns>
            An array containing the indices of each joint that is used by this mechanism.
            </returns>
      <exception cref="T:System.ArgumentException" />
      <exception cref="T:System.ArgumentNullException" />
    </member>
    <member name="M:ABB.Robotics.RobotStudio.Stations.Mechanism.GetAllConfigurations(ABB.Robotics.RobotStudio.Stations.RsMoveInstruction)">
      <summary>
            Returns reachable arm configurations for the specified move instruction.
            </summary>
      <param name="moveInstruction">The move instruction for which to find reachable configurations. The target, tool and workobject specified in the instruction is used.</param>
      <returns>An array of <see cref="T:ABB.Robotics.RobotStudio.Stations.ConfigurationData" /> with which the mechanism can reach the specified target.</returns>
    </member>
    <member name="M:ABB.Robotics.RobotStudio.Stations.Mechanism.GetAllConfigurations(ABB.Robotics.RobotStudio.Stations.RsMoveInstruction,System.Boolean)">
      <summary>
            Returns reachable arm configurations for the specified move instruction.
            </summary>
      <param name="moveInstruction">The move instruction for which to find reachable configurations. The target, tool and workobject specified in the instruction is used.</param>
      <param name="includeTurns">Only the base configurations will be returned if this parameter is set to false. If true, the turns of the base configurations will be added.</param>
      <returns>An array of <see cref="T:ABB.Robotics.RobotStudio.Stations.ConfigurationData" /> with which the mechanism can reach the specified target.</returns>
    </member>
    <member name="M:ABB.Robotics.RobotStudio.Stations.Mechanism.GetAllConfigurations(ABB.Robotics.RobotStudio.Stations.RsTarget,ABB.Robotics.RobotStudio.Stations.RsToolData)">
      <summary>
            Returns reachable arm configurations for the specified target.
            </summary>
      <param name="target">The target for which to find reachable configurations.</param>
      <param name="tool">The tool that should coincide with the target. The <b>RobotHold</b> property is used to determince if the tool is stationary or held by the robot.</param>
      <returns>An array of <see cref="T:ABB.Robotics.RobotStudio.Stations.ConfigurationData" /> with which the mechanism can reach the specified target.</returns>
    </member>
    <member name="M:ABB.Robotics.RobotStudio.Stations.Mechanism.GetAllConfigurations(ABB.Robotics.RobotStudio.Stations.RsTarget,ABB.Robotics.RobotStudio.Stations.RsToolData,System.Boolean)">
      <summary>
            Returns reachable arm configurations for the specified target.
            </summary>
      <param name="target">The target for which to find reachable arm configurations.</param>
      <param name="tool">The tool that should coincide with the target. The <b>RobotHold</b> property is used to determince if the tool is stationary or held by the robot.</param>
      <param name="includeTurns">Only the base configurations will be returned if this parameter is set to false. If true, the turns of the base configurations will be added.</param>
      <returns>An array of <see cref="T:ABB.Robotics.RobotStudio.Stations.ConfigurationData" /> with which the mechanism can reach the specified target.</returns>
    </member>
    <member name="M:ABB.Robotics.RobotStudio.Stations.Mechanism.GetAllConfigurations(ABB.Robotics.RobotStudio.Stations.RsTarget,ABB.Robotics.RobotStudio.Stations.RsToolData,System.Int32[])">
      <summary>
            Returns reachable arm configurations for the specified target.
            </summary>
      <param name="target">The target for which to find reachable configurations.</param>
      <param name="tool">The tool that should coincide with the target. The <b>RobotHold</b> property is used to determince if the tool is stationary or held by the robot.</param>
      <param name="cfxFilter">An array of integers which specifies Cfx values to be included in the resulting array. This parameter is only applicable for a bending bacwards robot. Cfx values which are not specified in the filter will not be considered, which will improver performance. Often you know that you are only interested in configurations where, for example, the wrist is in front of axis 1. , for<b>RobotHold</b> property is used to determince if the tool is stationary or held by the robot.</param>
      <returns>An array of <see cref="T:ABB.Robotics.RobotStudio.Stations.ConfigurationData" /> with which the mechanism can reach the specified target.</returns>
    </member>
    <member name="M:ABB.Robotics.RobotStudio.Stations.Mechanism.GetAllConfigurations(ABB.Robotics.RobotStudio.Stations.RsTarget,ABB.Robotics.RobotStudio.Stations.RsToolData,System.Int32[],System.Boolean)">
      <summary>
            Returns reachable arm configurations for the specified target.
            </summary>
      <param name="target">The target for which to find reachable configurations.</param>
      <param name="tool">The tool that should coincide with the target. The <b>RobotHold</b> property is used to determince if the tool is stationary or held by the robot.</param>
      <param name="cfxFilter">An array of integers which specifies Cfx values to be included in the resulting array. This parameter is only applicable for a bending bacwards robot. Cfx values which are not specified in the filter will not be considered, which will improver performance. Often you know that you are only interested in configurations where, for example, the wrist is in front of axis 1. , for<b>RobotHold</b> property is used to determince if the tool is stationary or held by the robot.</param>
      <param name="includeTurns">Only the base configurations will be returned if this parameter is set to false. If true, the turns of the base configurations will be added.</param>
      <returns>An array of <see cref="T:ABB.Robotics.RobotStudio.Stations.ConfigurationData" /> with which the mechanism can reach the specified target.</returns>
    </member>
    <member name="M:ABB.Robotics.RobotStudio.Stations.Mechanism.GetCalibrationPosition(System.Int32)">
      <summary>
            Returns the calibration transform for a joint.
            </summary>
      <param name="jointIndex"></param>
      <returns>Calibration transform (relative to model zero position)</returns>
    </member>
    <member name="M:ABB.Robotics.RobotStudio.Stations.Mechanism.GetConfiguration"></member>
    <member name="M:ABB.Robotics.RobotStudio.Stations.Mechanism.GetConfiguration(System.Double[])"></member>
    <member name="M:ABB.Robotics.RobotStudio.Stations.Mechanism.GetDenavitHartenbergParameters">
      <summary>
            Gets the <see cref="T:ABB.Robotics.RobotStudio.Stations.DenavitHartenbergParameters" /> for all joints.
            </summary>
      <returns>An array with all <see cref="T:ABB.Robotics.RobotStudio.Stations.DenavitHartenbergParameters" /> or null when none are available.</returns>
    </member>
    <member name="M:ABB.Robotics.RobotStudio.Stations.Mechanism.GetFlanges"></member>
    <member name="M:ABB.Robotics.RobotStudio.Stations.Mechanism.GetHomePosition">
      <summary>
            Returns the defined home position in form of a collection of values. The
            number of values are 0-6 depending on the number of joints used for
            corresponding mechanism.
            </summary>
      <returns>
            An array of home position for each joint.
            </returns>
      <exception cref="T:System.ArgumentException" />
      <exception cref="T:System.ArgumentNullException" />
      <exception cref="T:System.IO.DirectoryNotFoundException" />
      <exception cref="T:System.IO.FileNotFoundException" />
      <exception cref="T:System.UnauthorizedAccessException" />
      <exception cref="T:System.IO.IOException" />
    </member>
    <member name="M:ABB.Robotics.RobotStudio.Stations.Mechanism.GetJointLimits(System.Double[],System.Double[]@,System.Double[]@)"></member>
    <member name="M:ABB.Robotics.RobotStudio.Stations.Mechanism.GetJointLimits(System.Double[]@,System.Double[]@)"></member>
    <member name="M:ABB.Robotics.RobotStudio.Stations.Mechanism.GetJointTransform(System.Int32)">
      <summary>
            Get the transform for a joint
            <param name="jointIndex">The index of the joint for which the transform shall be retrieved. Must be a value between 0 and <see cref="P:ABB.Robotics.RobotStudio.Stations.Mechanism.NumJoints" />.</param><returns>Returns the transform of the specified joint, in <see cref="T:ABB.Robotics.RobotStudio.Stations.Mechanism" /> coordinates.</returns></summary>
    </member>
    <member name="M:ABB.Robotics.RobotStudio.Stations.Mechanism.GetJointTypes"></member>
    <member name="M:ABB.Robotics.RobotStudio.Stations.Mechanism.GetJointValues"></member>
    <member name="M:ABB.Robotics.RobotStudio.Stations.Mechanism.GetParentJoint(ABB.Robotics.RobotStudio.Stations.GraphicComponent,System.Int32@)">
      <summary>
            Returns the joint index of a link, or -1.
            </summary>
      <param name="link">The link.</param>
      <param name="jointIndex">Zero-based joint index.</param>
      <returns></returns>
    </member>
    <member name="M:ABB.Robotics.RobotStudio.Stations.Mechanism.GetParentLink(System.Int32,ABB.Robotics.RobotStudio.Stations.GraphicComponent@)">
      <summary>
            Returns the parent link of a joint.
            </summary>
      <param name="jointIndex">Zero-based joint index.</param>
      <param name="link"></param>
      <returns></returns>
    </member>
    <member name="M:ABB.Robotics.RobotStudio.Stations.Mechanism.GetStaticJointLimits(System.Double[]@,System.Double[]@)"></member>
    <member name="M:ABB.Robotics.RobotStudio.Stations.Mechanism.GetSyncPosition">
      <summary>
            Returns the defined sync position in form of a collection of values. The
            number of values are 0-6 depending on the number of joints used for
            corresponding mechanism.
            </summary>
      <returns>An array of sync position for each joint.</returns>
    </member>
    <member name="M:ABB.Robotics.RobotStudio.Stations.Mechanism.GetToolDataInfo"></member>
    <member name="M:ABB.Robotics.RobotStudio.Stations.Mechanism.GetTransitionTimes"></member>
    <member name="M:ABB.Robotics.RobotStudio.Stations.Mechanism.GetUserDefinedJointPositions"></member>
    <member name="P:ABB.Robotics.RobotStudio.Stations.Mechanism.GraphicComponents">
      <summary>
            Gets a GraphicComponentCollection object that represents all the graphic components
            on this Mechanism object.
            </summary>
    </member>
    <member name="M:ABB.Robotics.RobotStudio.Stations.Mechanism.InsideLimits(System.Double[])"></member>
    <member name="P:ABB.Robotics.RobotStudio.Stations.Mechanism.Irc5Conveyor">
      <summary>
            Gets conveyor tracking specific extensions of a Mechanism of type <see cref="T:MechanismType.Irc5Conveyor" />.
            </summary>
    </member>
    <member name="E:ABB.Robotics.RobotStudio.Stations.Mechanism.JointValuesChanged"></member>
    <member name="P:ABB.Robotics.RobotStudio.Stations.Mechanism.Mass"></member>
    <member name="P:ABB.Robotics.RobotStudio.Stations.Mechanism.MechanismType"></member>
    <member name="P:ABB.Robotics.RobotStudio.Stations.Mechanism.ModelBaseFrame">
      <summary>
            Returns the nominal base frame of this model
            </summary>
    </member>
    <member name="P:ABB.Robotics.RobotStudio.Stations.Mechanism.ModelName"></member>
    <member name="M:ABB.Robotics.RobotStudio.Stations.Mechanism.MoveToPose(System.String)"></member>
    <member name="P:ABB.Robotics.RobotStudio.Stations.Mechanism.MultiAxisRobot">
      <summary>
            Returns true if this is a multi axis robot (more then six active joints)
            </summary>
    </member>
    <member name="M:ABB.Robotics.RobotStudio.Stations.Mechanism.SetActiveJoints(System.Int32[])">
      <summary>
            This method sets the indices of the joints used by this mechanism, as an array of <see cref="T:System.Int32">integers</see>.
            The length of the array depends on how many joints are used. Some mechnism models has less than six axis.
            </summary>
      <param name="jointMask">The indices of the joints used by this mechanism.</param>
      <exception cref="T:System.ArgumentException" />
      <exception cref="T:System.ArgumentNullException" />
    </member>
    <member name="M:ABB.Robotics.RobotStudio.Stations.Mechanism.SetHomePosition(System.Double[])"></member>
    <member name="M:ABB.Robotics.RobotStudio.Stations.Mechanism.SetJointLimits(System.Int32,System.Double,System.Double)"></member>
    <member name="M:ABB.Robotics.RobotStudio.Stations.Mechanism.SetJointValues(System.Double[],System.Boolean)"></member>
    <member name="M:ABB.Robotics.RobotStudio.Stations.Mechanism.SetJointValues(System.Double[],System.Boolean,System.Boolean)"></member>
    <member name="M:ABB.Robotics.RobotStudio.Stations.Mechanism.SetJointValues(System.Double[],System.Boolean,System.Double)">
      <summary>
            ABB Internal use only
            </summary>
    </member>
    <member name="M:ABB.Robotics.RobotStudio.Stations.Mechanism.SetSyncPosition(System.Double[])">
      <summary>
            Sets the defined sync position in form of a collection of values. The
            number of values are 0-6 depending on the number of joints used for
            corresponding mechanism.
            </summary>
    </member>
    <member name="M:ABB.Robotics.RobotStudio.Stations.Mechanism.SetTransitionTimes(System.Collections.Generic.Dictionary{System.String[],System.Double})"></member>
    <member name="M:ABB.Robotics.RobotStudio.Stations.Mechanism.SetUserDefinedJointPositions(System.Collections.Generic.Dictionary{System.String,System.Double[]})"></member>
    <member name="E:ABB.Robotics.RobotStudio.Stations.Mechanism.TargetReachEvent"></member>
    <member name="P:ABB.Robotics.RobotStudio.Stations.Mechanism.Task"></member>
    <member name="P:ABB.Robotics.RobotStudio.Stations.Mechanism.TraceTCP"></member>
    <member name="P:ABB.Robotics.RobotStudio.Stations.Mechanism.UsesCfx">
      <summary>
            Returns true if the Cfx parameter is used by this robot model, otherwise false.
            The performance of GetAllConfigurations is better for robots that does not use Cfx since the number of possible configurations are smaller.
            </summary>
    </member>
    <member name="T:ABB.Robotics.RobotStudio.Stations.MechanismBuilder"></member>
    <member name="M:ABB.Robotics.RobotStudio.Stations.MechanismBuilder.#ctor(ABB.Robotics.RobotStudio.Stations.MechanismType)"></member>
    <member name="M:ABB.Robotics.RobotStudio.Stations.MechanismBuilder.AddFlange(System.String,System.String,ABB.Robotics.Math.Matrix4,System.Boolean)"></member>
    <member name="M:ABB.Robotics.RobotStudio.Stations.MechanismBuilder.AddFrame(System.String,ABB.Robotics.Math.Matrix4,ABB.Robotics.RobotStudio.Stations.FrameType)"></member>
    <member name="M:ABB.Robotics.RobotStudio.Stations.MechanismBuilder.AddJoint(System.String,System.String,System.String,ABB.Robotics.Math.Vector3,ABB.Robotics.Math.Vector3,ABB.Robotics.RobotStudio.Stations.JointType,System.Boolean)"></member>
    <member name="M:ABB.Robotics.RobotStudio.Stations.MechanismBuilder.AddLink(System.String,ABB.Robotics.RobotStudio.Stations.GraphicComponent)">
      <summary>
            Adds a link to be a member of the mechanism.
            </summary>
      <param name="linkName">A name to identify the link.</param>
      <param name="linkPart">A component which will become a link.</param>
    </member>
    <member name="M:ABB.Robotics.RobotStudio.Stations.MechanismBuilder.AddToolData(System.String,System.String,ABB.Robotics.Math.Matrix4)"></member>
    <member name="M:ABB.Robotics.RobotStudio.Stations.MechanismBuilder.AddToolData(System.String,System.String,ABB.Robotics.Math.Matrix4,ABB.Robotics.Math.Vector3,ABB.Robotics.Math.Vector3)"></member>
    <member name="P:ABB.Robotics.RobotStudio.Stations.MechanismBuilder.BaseFrame"></member>
    <member name="P:ABB.Robotics.RobotStudio.Stations.MechanismBuilder.BaseLink">
      <summary>
            Gets or sets the base link. This is where the "calculation chain" starts.
            </summary>
    </member>
    <member name="M:ABB.Robotics.RobotStudio.Stations.MechanismBuilder.CompileMechanism">
      <summary>
            When all data, Links, Joints etc. are set to the modeler call CompileMechanism.
            </summary>
      <returns>The mechanism instance.</returns>
    </member>
    <member name="P:ABB.Robotics.RobotStudio.Stations.MechanismBuilder.DefaultControllerName"></member>
    <member name="P:ABB.Robotics.RobotStudio.Stations.MechanismBuilder.DefaultControllerVersion"></member>
    <member name="M:ABB.Robotics.RobotStudio.Stations.MechanismBuilder.InternalSetConveyorJointLimits(System.Double,System.Double)"></member>
    <member name="P:ABB.Robotics.RobotStudio.Stations.MechanismBuilder.KinematicBaseFrame"></member>
    <member name="P:ABB.Robotics.RobotStudio.Stations.MechanismBuilder.Mass"></member>
    <member name="P:ABB.Robotics.RobotStudio.Stations.MechanismBuilder.MechanismType"></member>
    <member name="P:ABB.Robotics.RobotStudio.Stations.MechanismBuilder.ModelName">
      <summary>
            Gets or sets the model name.
            </summary>
    </member>
    <member name="P:ABB.Robotics.RobotStudio.Stations.MechanismBuilder.Name">
      <summary>
            Gets or sets the name of mechanism.
            </summary>
    </member>
    <member name="M:ABB.Robotics.RobotStudio.Stations.MechanismBuilder.SetAttachmentPoints(ABB.Robotics.Math.Matrix4[])">
      <summary>
            Sets an array of matrices that will become the frames used for attaching parts and workobjects on a conveyor tracking mecahnism.
            </summary>
      <param>A <see cref="T:ABB.Robotics.Math.Matrix4" /> representing the positions of the attachment points of the conveyor mechanism.</param>
    </member>
    <member name="M:ABB.Robotics.RobotStudio.Stations.MechanismBuilder.SetCalibrationPosition(ABB.Robotics.Math.Matrix4[])"></member>
    <member name="M:ABB.Robotics.RobotStudio.Stations.MechanismBuilder.SetCustomKinematics(System.String,System.Double[])">
      <summary>
            ABB Internal use only.
            </summary>
    </member>
    <member name="M:ABB.Robotics.RobotStudio.Stations.MechanismBuilder.SetDependency(System.String,System.String)">
      <summary>
            Sets an expression to calculate a joints value that depend on other joint values.
            </summary>
      <param name="jointName"> A name to identify the joint.</param>
      <param name="expression">A string containig an expression.</param>
    </member>
    <member name="M:ABB.Robotics.RobotStudio.Stations.MechanismBuilder.SetDependency(System.String,System.String,System.Double)"></member>
    <member name="M:ABB.Robotics.RobotStudio.Stations.MechanismBuilder.SetJointMask(System.Int32[])">
      <summary>
            This method sets a mask that defines which joints that are used for mechanism being built. The mask is specified as an array of <see cref="T:System.int">integers</see>.
            The length of the array must be between 6 and 12. Each element specifies if the corresponding axis is used or not. The value 0 means not used and the value 1 means used.
            For example the array {1,1,1,1,0,1} means that all axis except axis 5 are used.
            </summary>
      <param name="maskValues">An array of <see cref="T:System.int">integers</see> with mask values that specifies if a joint with the same number as the position in the array is used or not.</param>
      <exception cref="T:System.ArgumentException" />
      <exception cref="T:System.ArgumentNullException" />
    </member>
    <member name="M:ABB.Robotics.RobotStudio.Stations.MechanismBuilder.SetLoadData(System.Double,ABB.Robotics.Math.Vector3,ABB.Robotics.Math.Quaternion,ABB.Robotics.Math.Vector3)"></member>
    <member name="M:ABB.Robotics.RobotStudio.Stations.MechanismBuilder.SetSyncJointPosition(System.Double[])">
      <summary>
            Sets the defined sync position in form of a collection of values. The
            number of values are 0-6 depending on the number of joints used for the
            mechanism beeing built.
            </summary>
    </member>
    <member name="M:ABB.Robotics.RobotStudio.Stations.MechanismBuilder.SetWorkRange(ABB.Robotics.Math.Vector3,ABB.Robotics.Math.Vector3)"></member>
    <member name="M:ABB.Robotics.RobotStudio.Stations.MechanismBuilder.ValidateDependencyExpression(System.String[],System.String)"></member>
    <member name="T:ABB.Robotics.RobotStudio.Stations.MechanismType"></member>
    <member name="F:ABB.Robotics.RobotStudio.Stations.MechanismType.Undefined"></member>
    <member name="F:ABB.Robotics.RobotStudio.Stations.MechanismType.Tool"></member>
    <member name="F:ABB.Robotics.RobotStudio.Stations.MechanismType.Robot"></member>
    <member name="F:ABB.Robotics.RobotStudio.Stations.MechanismType.ExternalAxis"></member>
    <member name="F:ABB.Robotics.RobotStudio.Stations.MechanismType.Irc5Conveyor"></member>
    <member name="F:ABB.Robotics.RobotStudio.Stations.MechanismType.Other"></member>
    <member name="T:ABB.Robotics.RobotStudio.Stations.Mesh">
      <summary>
            A collection of MeshParts representing different detail levels of a Part.
            </summary>
    </member>
    <member name="M:ABB.Robotics.RobotStudio.Stations.Mesh.#ctor"></member>
    <member name="M:ABB.Robotics.RobotStudio.Stations.Mesh.Clear">
      <summary>
            Clears managed vertex data cached by this Mesh.
            </summary>
    </member>
    <member name="M:ABB.Robotics.RobotStudio.Stations.Mesh.Closest(ABB.Robotics.RobotStudio.Stations.DetailLevels)">
      <summary>
            Returns the available detail level, which is as close as possible to the one specified.
            </summary>
      <param name="detailLevel"></param>
      <returns></returns>
    </member>
    <member name="M:ABB.Robotics.RobotStudio.Stations.Mesh.GetEnumerator"></member>
    <member name="M:ABB.Robotics.RobotStudio.Stations.Mesh.GetInfo">
      <summary>
            Returns the size and memory usage of this Mesh.
            </summary>
    </member>
    <member name="P:ABB.Robotics.RobotStudio.Stations.Mesh.Item(ABB.Robotics.RobotStudio.Stations.DetailLevels)"></member>
    <member name="M:ABB.Robotics.RobotStudio.Stations.Mesh.Load(System.String)">
      <summary>
            Loads a Mesh from an .rsgfx file
            </summary>
    </member>
    <member name="M:ABB.Robotics.RobotStudio.Stations.Mesh.Rebuild">
      <summary>
            Rebuilds the mesh.
            </summary>
      <exception cref="T:System.ApplicationException">Thrown if the structure of the mesh is not valid.</exception>
    </member>
    <member name="M:ABB.Robotics.RobotStudio.Stations.Mesh.Save(System.String)">
      <summary>
            Saves this Mesh to an .rsgfx file
            </summary>
    </member>
    <member name="P:ABB.Robotics.RobotStudio.Stations.Mesh.Shape">
      <summary>
            Internal use
            </summary>
    </member>
    <member name="M:ABB.Robotics.RobotStudio.Stations.Mesh.Transform(ABB.Robotics.Math.Matrix4)"></member>
    <member name="T:ABB.Robotics.RobotStudio.Stations.MeshBody">
      <summary>
            Graphical representation of a Body.
            </summary>
    </member>
    <member name="M:ABB.Robotics.RobotStudio.Stations.MeshBody.#ctor">
      <summary>
            Creates an empty MeshBody.
            </summary>
    </member>
    <member name="M:ABB.Robotics.RobotStudio.Stations.MeshBody.#ctor(System.Collections.Generic.IEnumerable{ABB.Robotics.RobotStudio.Stations.MeshFace})">
      <summary>
            Creates a MeshBody that contains MeshFace objects from the specified collection.
            </summary>
    </member>
    <member name="P:ABB.Robotics.RobotStudio.Stations.MeshBody.Body">
      <summary>
            Returns the corresponding <see cref="P:ABB.Robotics.RobotStudio.Stations.MeshBody.Body" />.
            </summary>
    </member>
    <member name="P:ABB.Robotics.RobotStudio.Stations.MeshBody.BodyId">
      <summary>
            Internal use
            </summary>
    </member>
    <member name="M:ABB.Robotics.RobotStudio.Stations.MeshBody.Clone">
      <summary>
            Returns a deep clone of this MeshBody.
            </summary>
      <returns>The cloned body.</returns>
    </member>
    <member name="P:ABB.Robotics.RobotStudio.Stations.MeshBody.Faces">
      <summary>
            Gets or sets the MeshFace objects contained in this MeshBody.
            </summary>
    </member>
    <member name="M:ABB.Robotics.RobotStudio.Stations.MeshBody.GetBoundingBox"></member>
    <member name="M:ABB.Robotics.RobotStudio.Stations.MeshBody.Transform(ABB.Robotics.Math.Matrix4)"></member>
    <member name="T:ABB.Robotics.RobotStudio.Stations.MeshFace">
      <summary>
            Graphical representation of a Face.
            </summary>
    </member>
    <member name="M:ABB.Robotics.RobotStudio.Stations.MeshFace.#ctor"></member>
    <member name="P:ABB.Robotics.RobotStudio.Stations.MeshFace.BodyId">
      <summary>
            Internal use.
            </summary>
    </member>
    <member name="P:ABB.Robotics.RobotStudio.Stations.MeshFace.BoundingBox"></member>
    <member name="P:ABB.Robotics.RobotStudio.Stations.MeshFace.CenterPoints"></member>
    <member name="M:ABB.Robotics.RobotStudio.Stations.MeshFace.Clone">
      <summary>
            Returns a deep clone of this MeshFace.
            </summary>
      <returns>The cloned face.</returns>
    </member>
    <member name="P:ABB.Robotics.RobotStudio.Stations.MeshFace.EndPoints"></member>
    <member name="P:ABB.Robotics.RobotStudio.Stations.MeshFace.Face"></member>
    <member name="P:ABB.Robotics.RobotStudio.Stations.MeshFace.FaceId">
      <summary>
            Internal use.
            </summary>
    </member>
    <member name="P:ABB.Robotics.RobotStudio.Stations.MeshFace.Flags"></member>
    <member name="P:ABB.Robotics.RobotStudio.Stations.MeshFace.Material"></member>
    <member name="P:ABB.Robotics.RobotStudio.Stations.MeshFace.MidPoints"></member>
    <member name="P:ABB.Robotics.RobotStudio.Stations.MeshFace.Normals"></member>
    <member name="P:ABB.Robotics.RobotStudio.Stations.MeshFace.TextureCoordinates"></member>
    <member name="M:ABB.Robotics.RobotStudio.Stations.MeshFace.Transform(ABB.Robotics.Math.Matrix4)"></member>
    <member name="P:ABB.Robotics.RobotStudio.Stations.MeshFace.TriangleIndices">
      <summary>
            Indices for the surface representation of this mesh.
            </summary>
    </member>
    <member name="P:ABB.Robotics.RobotStudio.Stations.MeshFace.Vertices"></member>
    <member name="P:ABB.Robotics.RobotStudio.Stations.MeshFace.WireIndices">
      <summary>
            Indices for the wire representation of this mesh.
            </summary>
    </member>
    <member name="T:ABB.Robotics.RobotStudio.Stations.MeshFlags">
      <summary> Controls how a MeshFace is rendered. </summary>
    </member>
    <member name="F:ABB.Robotics.RobotStudio.Stations.MeshFlags.None"></member>
    <member name="F:ABB.Robotics.RobotStudio.Stations.MeshFlags.DisableBackFaceCull"></member>
    <member name="F:ABB.Robotics.RobotStudio.Stations.MeshFlags.TwoSidedLighting"></member>
    <member name="F:ABB.Robotics.RobotStudio.Stations.MeshFlags.FlatShade"></member>
    <member name="F:ABB.Robotics.RobotStudio.Stations.MeshFlags.NoDefaultWire"></member>
    <member name="T:ABB.Robotics.RobotStudio.Stations.MeshInfo">
      <summary> Contains quantitative information about a Mesh. </summary>
    </member>
    <member name="F:ABB.Robotics.RobotStudio.Stations.MeshInfo.BoundingBoxBytes">
      <summary>
            Gets the amount of memory in bytes, which is used to store the bounding box heierarchy of the mesh.
            </summary>
    </member>
    <member name="F:ABB.Robotics.RobotStudio.Stations.MeshInfo.NumberOfBodies">
      <summary>
            Gets the number of bodies in the mesh.
            </summary>
    </member>
    <member name="F:ABB.Robotics.RobotStudio.Stations.MeshInfo.NumberOfDetailLevels">
      <summary>
            Gets the number of detail levels of the mesh.
            </summary>
    </member>
    <member name="F:ABB.Robotics.RobotStudio.Stations.MeshInfo.NumberOfFaces">
      <summary>
            Gets the number of faces in the mesh.
            </summary>
    </member>
    <member name="F:ABB.Robotics.RobotStudio.Stations.MeshInfo.NumberOfTriangles">
      <summary>
            Gets the number of triangles in the mesh.
            </summary>
    </member>
    <member name="F:ABB.Robotics.RobotStudio.Stations.MeshInfo.NumberOfVertices">
      <summary>
            Gets the number of vertices in the mesh.
            </summary>
    </member>
    <member name="F:ABB.Robotics.RobotStudio.Stations.MeshInfo.NumberOfWires">
      <summary>
            Gets the number of wires in the mesh.
            </summary>
    </member>
    <member name="F:ABB.Robotics.RobotStudio.Stations.MeshInfo.PersistentBytes">
      <summary>
            Gets the amount of memory in bytes, which is used to store persistent information about the mesh.
            </summary>
    </member>
    <member name="T:ABB.Robotics.RobotStudio.Stations.MeshPart">
      <summary>
            Graphical representation of a Part.
            </summary>
    </member>
    <member name="M:ABB.Robotics.RobotStudio.Stations.MeshPart.#ctor"></member>
    <member name="M:ABB.Robotics.RobotStudio.Stations.MeshPart.#ctor(System.Collections.Generic.IEnumerable{ABB.Robotics.RobotStudio.Stations.MeshBody})"></member>
    <member name="P:ABB.Robotics.RobotStudio.Stations.MeshPart.Bodies">
      <summary>
            Gets or sets the MeshBody objects contained in this MeshPart.
            </summary>
    </member>
    <member name="M:ABB.Robotics.RobotStudio.Stations.MeshPart.Clone">
      <summary>
            Returns a deep clone of this MeshPart.
            </summary>
      <returns>The cloned part.</returns>
    </member>
    <member name="M:ABB.Robotics.RobotStudio.Stations.MeshPart.GetBoundingBox"></member>
    <member name="M:ABB.Robotics.RobotStudio.Stations.MeshPart.Transform(ABB.Robotics.Math.Matrix4)"></member>
    <member name="T:ABB.Robotics.RobotStudio.Stations.MotionType"></member>
    <member name="F:ABB.Robotics.RobotStudio.Stations.MotionType.Joint"></member>
    <member name="F:ABB.Robotics.RobotStudio.Stations.MotionType.Linear"></member>
    <member name="F:ABB.Robotics.RobotStudio.Stations.MotionType.Circular"></member>
    <member name="F:ABB.Robotics.RobotStudio.Stations.MotionType.None"></member>
    <member name="F:ABB.Robotics.RobotStudio.Stations.MotionType.Undefined"></member>
    <member name="T:ABB.Robotics.RobotStudio.Stations.ParameterAccessMode"></member>
    <member name="F:ABB.Robotics.RobotStudio.Stations.ParameterAccessMode.InOut"></member>
    <member name="F:ABB.Robotics.RobotStudio.Stations.ParameterAccessMode.Persistent"></member>
    <member name="F:ABB.Robotics.RobotStudio.Stations.ParameterAccessMode.Variable"></member>
    <member name="F:ABB.Robotics.RobotStudio.Stations.ParameterAccessMode.In"></member>
    <member name="F:ABB.Robotics.RobotStudio.Stations.ParameterAccessMode.Invalid"></member>
    <member name="T:ABB.Robotics.RobotStudio.Stations.ParameterRange">
      <summary>
            Represents the range of a spline surface in U or V direction.
            </summary>
    </member>
    <member name="P:ABB.Robotics.RobotStudio.Stations.ParameterRange.End">
      <summary>
            Gets end of the valid parameter range.
            </summary>
    </member>
    <member name="P:ABB.Robotics.RobotStudio.Stations.ParameterRange.Start">
      <summary>
            Gets the start of the valid parameter range.
            </summary>
    </member>
    <member name="T:ABB.Robotics.RobotStudio.Stations.Part">
      <summary>
            A Part is a container for bodies, and can hold zero or more bodies. A Part also contains an orientation.
            </summary>
    </member>
    <member name="M:ABB.Robotics.RobotStudio.Stations.Part.#ctor"></member>
    <member name="M:ABB.Robotics.RobotStudio.Stations.Part.#ctor(System.Boolean)"></member>
    <member name="M:ABB.Robotics.RobotStudio.Stations.Part.Attach(ABB.Robotics.RobotStudio.Stations.IAttachableChild,System.Boolean,ABB.Robotics.Math.Matrix4)">
      <summary>Attach the supplied child to this <see cref="T:ABB.Robotics.RobotStudio.Stations.Part" />.</summary>
      <param name="child">The child to be attached.</param>
      <param name="mount">Set to <b>true</b> if you want to mount the child to the parent. False to keep the current position.</param>
      <param name="offset">Only to be used when mount is set to <b>true</b>. This is the transform from the parent to the child.</param>
      <returns>True if the attachment is not <b>null</b>. Otherwise false.</returns>
    </member>
    <member name="P:ABB.Robotics.RobotStudio.Stations.Part.Bodies">
      <summary>Gets the <see cref="T:ABB.Robotics.RobotStudio.Stations.BodyCollection" /> that belongs to this <see cref="T:ABB.Robotics.RobotStudio.Stations.Part" />.</summary>
    </member>
    <member name="M:ABB.Robotics.RobotStudio.Stations.Part.CanAttachChild(ABB.Robotics.RobotStudio.Stations.IAttachableChild)">
      <summary>Test if the supplied child can be attached.</summary>
      <param name="child">The child to test for attachment.</param>
      <returns>True.</returns>
    </member>
    <member name="M:ABB.Robotics.RobotStudio.Stations.Part.Delete"></member>
    <member name="M:ABB.Robotics.RobotStudio.Stations.Part.Detach(ABB.Robotics.RobotStudio.Stations.IAttachableChild)">
      <summary>Detach the supplied child from this <see cref="T:ABB.Robotics.RobotStudio.Stations.Part" />. If the child was mounted to the parent when the attachment was created, the child will move back to its original position.</summary>
      <param name="child">The child to be detached.</param>
      <returns>
        <b>True</b> if the child could be detached. <b>False</b> if the child never was attached to the parent.</returns>
    </member>
    <member name="M:ABB.Robotics.RobotStudio.Stations.Part.Facet(ABB.Robotics.RobotStudio.Stations.DetailLevels)">
      <summary>
            Re-creates the graphical representation of this Part.
            </summary>
      <param name="detailLevels"></param>
    </member>
    <member name="M:ABB.Robotics.RobotStudio.Stations.Part.Facet(ABB.Robotics.RobotStudio.Stations.DetailLevels,System.Boolean)">
      <summary>
            Re-creates the graphical representation of this Part.
            </summary>
      <param name="detailLevels"></param>
      <param name="surfaceModel"></param>
    </member>
    <member name="M:ABB.Robotics.RobotStudio.Stations.Part.Facet(ABB.Robotics.RobotStudio.Stations.DetailLevels,System.Boolean,ABB.Robotics.RobotStudio.ProgressNotification)">
      <summary>
            Re-creates the graphical representation of this Part.
            </summary>
      <param name="detailLevels"></param>
      <param name="surfaceModel"></param>
      <param name="progress"></param>
    </member>
    <member name="M:ABB.Robotics.RobotStudio.Stations.Part.FindClosestVertex(ABB.Robotics.Math.Vector3)">
      <summary>Returns the <see cref="T:ABB.Robotics.RobotStudio.Stations.Vertex" /> of the <see cref="T:ABB.Robotics.RobotStudio.Stations.Loop" /> that is closest to the provided point.</summary>
      <param name="testPoint">The point which to find the closest vertex to.</param>
      <returns>The closest <see cref="T:ABB.Robotics.RobotStudio.Stations.Vertex" />.</returns>
    </member>
    <member name="M:ABB.Robotics.RobotStudio.Stations.Part.GetGraphicInfo(System.Int32@,System.Int32@,System.Int32@,System.Int32@,System.Int32@)"></member>
    <member name="M:ABB.Robotics.RobotStudio.Stations.Part.GetMaterial"></member>
    <member name="P:ABB.Robotics.RobotStudio.Stations.Part.HasGeometry">
      <summary>
            True if the part has CAD geometry, false otherwise.
            </summary>
    </member>
    <member name="M:ABB.Robotics.RobotStudio.Stations.Part.IntersectRay(ABB.Robotics.Math.Vector3,ABB.Robotics.Math.Vector3,ABB.Robotics.Math.Vector3@,ABB.Robotics.RobotStudio.Stations.Face@)">
      <summary>Checks a if ray instersects with this part and return the closest intersection point.</summary>
      <param name="rayStart">Starting point of the ray (in global coordinates).</param>
      <param name="rayDirection">Direction of the ray (in global coordinates).</param>
      <param name="hitPoint">Returns the intersection point closest to rayStart.</param>
      <param name="hitFace">Returns the face corresponding to the closest intersection point.</param>
      <returns>True if the ray intersects with this part, false otherwise.</returns>
    </member>
    <member name="M:ABB.Robotics.RobotStudio.Stations.Part.IntersectVolume(ABB.Robotics.Math.BoundingBox,ABB.Robotics.Math.Matrix4)">
      <summary>
            Checks if this parts intersects with a volume defined by a <see cref="T:ABB.Robotics.RobotStudio.Stations.BoundingBox" />.
            </summary>
      <param name="box"></param>
      <param name="boxTransform"></param>
      <returns></returns>
    </member>
    <member name="M:ABB.Robotics.RobotStudio.Stations.Part.Load(System.String)">
      <summary>
            Loads a part from file.
            </summary>
      <param name="fileName">Specifies the file to load.</param>
      <returns>The loaded Part, or null if the file was loaded successfully but no valid entities were found.</returns>
      <exception cref="T:ABB.Robotics.RobotStudio.RobotStudioLicenseException">Failed to acquire a valid license for the specified file format.</exception>
      <exception cref="T:System.ApplicationException">Failed to load the file. The exception object contains a description of the problem.</exception>
      <exception cref="T:System.ArgumentNullException" />
      <exception cref="T:System.IO.IOException" />
      <exception cref="T:System.IO.FileNotFoundException" />
      <exception cref="T:System.UnauthorizedAccessException" />
      <exception cref="T:System.IO.DirectoryNotFoundException" />
    </member>
    <member name="M:ABB.Robotics.RobotStudio.Stations.Part.Load(System.String,ABB.Robotics.RobotStudio.IProgressCallback,System.Boolean,System.Boolean,System.Boolean,ABB.Robotics.RobotStudio.Stations.DetailLevels)"></member>
    <member name="M:ABB.Robotics.RobotStudio.Stations.Part.Load(System.String,ABB.Robotics.RobotStudio.ProgressNotification,System.Boolean,ABB.Robotics.RobotStudio.Stations.DetailLevels)">
      <summary>
            Loads a part from file.
            </summary>
      <param name="fileName">Specifies the file to load.</param>
      <param name="progressDelegate">A delegate of type <see cref="T:ABB.Robotics.RobotStudio.ProgressNotification" /> that receives notifications about the progress of the load operation.</param>
      <param name="surfaceModel">If true, backfacing surfaces will not be culled when the part is rendered.</param>
      <param name="detail">Specifies the <see cref="T:ABB.Robotics.RobotStudio.Stations.DetailLevels">detail level(s)</see> to use when creating the graphical representation of geometric entities.</param>
      <returns>The loaded Part, or null if the file was loaded successfully but no valid entities were found.</returns>
      <exception cref="T:ABB.Robotics.RobotStudio.RobotStudioLicenseException">Failed to acquire a valid license for the specified file format.</exception>
      <exception cref="T:System.ApplicationException">Failed to load the file. The exception object contains a description of the problem.</exception>
      <exception cref="T:System.ArgumentNullException" />
      <exception cref="T:System.IO.IOException" />
      <exception cref="T:System.IO.FileNotFoundException" />
      <exception cref="T:System.UnauthorizedAccessException" />
      <exception cref="T:System.IO.DirectoryNotFoundException" />
    </member>
    <member name="M:ABB.Robotics.RobotStudio.Stations.Part.Load(System.String,ABB.Robotics.RobotStudio.ProgressNotification,System.Boolean,System.Boolean,System.Boolean,ABB.Robotics.RobotStudio.Stations.DetailLevels)">
      <summary>
            Loads a part from file.
            </summary>
      <param name="fileName">Specifies the file to load.</param>
      <param name="progressDelegate">A delegate of type <see cref="T:ABB.Robotics.RobotStudio.ProgressNotification" /> that receives notifications about the progress of the load operation.</param>
      <param name="surfaceModel">If true, backfacing surfaces will not be culled when the part is rendered.</param>
      <param name="translateHidden">Controls whether hidden entities are translated or discarded when importing a non-Acis CAD file.</param>
      <param name="healing">Controls whether an attempt is made to automatically <see cref="M:ABB.Robotics.RobotStudio.Stations.Body.Heal(ABB.Robotics.RobotStudio.Stations.Body)">heal</see> geometric entitites.</param>
      <param name="detail">Specifies the <see cref="T:ABB.Robotics.RobotStudio.Stations.DetailLevels">detail level(s)</see> to use when creating the graphical representation of geometric entities.</param>
      <returns>The loaded Part, or null if the file was loaded successfully but no valid entities were found.</returns>
      <exception cref="T:ABB.Robotics.RobotStudio.RobotStudioLicenseException">Failed to acquire a valid license for the specified file format.</exception>
      <exception cref="T:System.ApplicationException">Failed to load the file. The exception object contains a description of the problem.</exception>
      <exception cref="T:System.ArgumentNullException" />
      <exception cref="T:System.IO.IOException" />
      <exception cref="T:System.IO.FileNotFoundException" />
      <exception cref="T:System.UnauthorizedAccessException" />
      <exception cref="T:System.IO.DirectoryNotFoundException" />
    </member>
    <member name="P:ABB.Robotics.RobotStudio.Stations.Part.Mesh">
      <summary>
            Returns the graphic representation of this <see cref="T:ABB.Robotics.RobotStudio.Stations.Part" />.
            </summary>
    </member>
    <member name="M:ABB.Robotics.RobotStudio.Stations.Part.NormalizeTextureCoordinates(System.Boolean,System.Boolean)"></member>
    <member name="M:ABB.Robotics.RobotStudio.Stations.Part.ReplaceMaterial(ABB.Robotics.RobotStudio.Stations.Material,ABB.Robotics.RobotStudio.Stations.Material)"></member>
    <member name="M:ABB.Robotics.RobotStudio.Stations.Part.SaveAs(System.String)">
      <summary>
            Saves (exports) the Part to the specified format.
            </summary>
      <param name="fileName">A string that contains the name of the file to which to save the Part.</param>
    </member>
    <member name="M:ABB.Robotics.RobotStudio.Stations.Part.SaveAs(System.String,System.Int32)">
      <summary>
            Saves (exports) the Part to the specified format.
            </summary>
      <param name="fileName">A string that contains the name of the file to which to save the Part.</param>
      <param name="version">The version of the chosen format, if supported (0 means default).</param>
    </member>
    <member name="M:ABB.Robotics.RobotStudio.Stations.Part.SetMaterial(ABB.Robotics.RobotStudio.Stations.Material)"></member>
    <member name="P:ABB.Robotics.RobotStudio.Stations.Part.Source">
      <summary>
            Gets or sets the file that was the source of this part.
            </summary>
    </member>
    <member name="P:ABB.Robotics.RobotStudio.Stations.Part.SourceDateTime">
      <summary>
            Gets or sets a time stamp of the last update from Part.Source (in UTC)
            </summary>
    </member>
    <member name="P:ABB.Robotics.RobotStudio.Stations.Part.Visible">
      <summary> Gets or sets whether the part is visible or not in the graphics.</summary>
    </member>
    <member name="T:ABB.Robotics.RobotStudio.Stations.PartFileFormat"></member>
    <member name="F:ABB.Robotics.RobotStudio.Stations.PartFileFormat.ACIS"></member>
    <member name="T:ABB.Robotics.RobotStudio.Stations.ParticleSystem"></member>
    <member name="M:ABB.Robotics.RobotStudio.Stations.ParticleSystem.#ctor(ABB.Robotics.RobotStudio.Stations.ParticleSystemData)"></member>
    <member name="P:ABB.Robotics.RobotStudio.Stations.ParticleSystem.Data"></member>
    <member name="P:ABB.Robotics.RobotStudio.Stations.ParticleSystem.Gfx"></member>
    <member name="P:ABB.Robotics.RobotStudio.Stations.ParticleSystem.Transform"></member>
    <member name="P:ABB.Robotics.RobotStudio.Stations.ParticleSystem.Visible"></member>
    <member name="T:ABB.Robotics.RobotStudio.Stations.ParticleSystemCollection"></member>
    <member name="T:ABB.Robotics.RobotStudio.Stations.ParticleSystemData">
      <summary>
            Provides data for drawing a particle system.
            </summary>
    </member>
    <member name="F:ABB.Robotics.RobotStudio.Stations.ParticleSystemData.Acceleration">
      <summary>
            Acceleration vector of particles (in m/s²).
            </summary>
    </member>
    <member name="F:ABB.Robotics.RobotStudio.Stations.ParticleSystemData.Color">
      <summary>
            Color of particles.
            </summary>
    </member>
    <member name="F:ABB.Robotics.RobotStudio.Stations.ParticleSystemData.LifeTime">
      <summary>
            Maximum lifetime of particles (in seconds)
            </summary>
    </member>
    <member name="F:ABB.Robotics.RobotStudio.Stations.ParticleSystemData.OpacityRate">
      <summary>
            Rate of change of the opacity of particles (per second)
            </summary>
    </member>
    <member name="F:ABB.Robotics.RobotStudio.Stations.ParticleSystemData.SizeRate">
      <summary>
            Rate of change of the size of particles (in m/s)
            </summary>
    </member>
    <member name="F:ABB.Robotics.RobotStudio.Stations.ParticleSystemData.SpawnRate">
      <summary>
            Number of particles to spawn per second
            </summary>
    </member>
    <member name="F:ABB.Robotics.RobotStudio.Stations.ParticleSystemData.StartPositionRnd">
      <summary>
            Amount to randomize the start position of particles.
            </summary>
    </member>
    <member name="F:ABB.Robotics.RobotStudio.Stations.ParticleSystemData.StartSize">
      <summary>
            Initial diameter of particles (in m).
            </summary>
    </member>
    <member name="F:ABB.Robotics.RobotStudio.Stations.ParticleSystemData.StartSizeRnd">
      <summary>
            Amount to randomize the initial size of particles.
            </summary>
    </member>
    <member name="F:ABB.Robotics.RobotStudio.Stations.ParticleSystemData.StartVelocity">
      <summary>
            Initial velocity vector of particles (in m/s).
            </summary>
    </member>
    <member name="F:ABB.Robotics.RobotStudio.Stations.ParticleSystemData.StartVelocityRnd">
      <summary>
            Amount to randomize the start velocity.
            </summary>
    </member>
    <member name="T:ABB.Robotics.RobotStudio.Stations.PointCloud"></member>
    <member name="M:ABB.Robotics.RobotStudio.Stations.PointCloud.#ctor"></member>
    <member name="P:ABB.Robotics.RobotStudio.Stations.PointCloud.Color">
      <summary>
            Get or set the color used for all points. Only used if <see cref="P:ABB.Robotics.RobotStudio.Stations.PointCloud.Colors" /> is null.
            </summary>
    </member>
    <member name="P:ABB.Robotics.RobotStudio.Stations.PointCloud.Colors">
      <summary>
            Sets individual colors per point. If null, <see cref="P:ABB.Robotics.RobotStudio.Stations.PointCloud.Color" /> is used for all points.
            </summary>
    </member>
    <member name="P:ABB.Robotics.RobotStudio.Stations.PointCloud.Gfx"></member>
    <member name="P:ABB.Robotics.RobotStudio.Stations.PointCloud.Points"></member>
    <member name="P:ABB.Robotics.RobotStudio.Stations.PointCloud.PointSize"></member>
    <member name="P:ABB.Robotics.RobotStudio.Stations.PointCloud.Transform"></member>
    <member name="P:ABB.Robotics.RobotStudio.Stations.PointCloud.Visible"></member>
    <member name="T:ABB.Robotics.RobotStudio.Stations.PointCloudCollection"></member>
    <member name="T:ABB.Robotics.RobotStudio.Stations.ProcessTimerEnableChangedEventArgs">
      <summary>
            Provides data for the <b>ProcessTimerEnableChanged</b> event
            </summary>
    </member>
    <member name="P:ABB.Robotics.RobotStudio.Stations.ProcessTimerEnableChangedEventArgs.Enabled"></member>
    <member name="T:ABB.Robotics.RobotStudio.Stations.ProjectObjectTag">
      <summary>
            Represents a tag that can be applied to any object that is part of a Station
            </summary>
    </member>
    <member name="M:ABB.Robotics.RobotStudio.Stations.ProjectObjectTag.#ctor"></member>
    <member name="M:ABB.Robotics.RobotStudio.Stations.ProjectObjectTag.AddObject(ABB.Robotics.RobotStudio.ProjectObject)"></member>
    <member name="M:ABB.Robotics.RobotStudio.Stations.ProjectObjectTag.AddObjects(System.Collections.Generic.IEnumerable{ABB.Robotics.RobotStudio.ProjectObject})"></member>
    <member name="M:ABB.Robotics.RobotStudio.Stations.ProjectObjectTag.ContainsObject(ABB.Robotics.RobotStudio.ProjectObject)"></member>
    <member name="M:ABB.Robotics.RobotStudio.Stations.ProjectObjectTag.GetObjects"></member>
    <member name="M:ABB.Robotics.RobotStudio.Stations.ProjectObjectTag.RemoveObject(ABB.Robotics.RobotStudio.ProjectObject)"></member>
    <member name="P:ABB.Robotics.RobotStudio.Stations.ProjectObjectTag.Visible">
      <summary>
            Gets or sets whether tagged objects should be visible in browsers and graphics.
            </summary>
    </member>
    <member name="T:ABB.Robotics.RobotStudio.Stations.ProjectObjectTagCollection">
      <summary>
            A collection of <see cref="T:ABB.Robotics.RobotStudio.Stations.ProjectObjectTag" /> objects.
            </summary>
    </member>
    <member name="M:ABB.Robotics.RobotStudio.Stations.ProjectObjectTagCollection.Remove(ABB.Robotics.RobotStudio.Stations.ProjectObjectTag)"></member>
    <member name="T:ABB.Robotics.RobotStudio.Stations.PropertyAttributeCollection">
      <summary>
            Represents a collection of key-value <see cref="T:System.String" /> pairs attached to a <see cref="T:ABB.Robotics.RobotStudio.Stations.DynamicProperty" />.
            </summary>
    </member>
    <member name="M:ABB.Robotics.RobotStudio.Stations.PropertyAttributeCollection.Add(System.String,System.String)">
      <summary> Adds the specified key and value to the collection. </summary>
    </member>
    <member name="M:ABB.Robotics.RobotStudio.Stations.PropertyAttributeCollection.Clear">
      <summary> Removes all keys and values from the collection. </summary>
    </member>
    <member name="M:ABB.Robotics.RobotStudio.Stations.PropertyAttributeCollection.ContainsKey(System.String)">
      <summary> Determines whether the collection contains the specified key. </summary>
    </member>
    <member name="M:ABB.Robotics.RobotStudio.Stations.PropertyAttributeCollection.GetEnumerator">
      <summary> Returns an <see cref="T:System.Collections.IEnumerator" /> that iterates over the key/value pairs in the collection. </summary>
    </member>
    <member name="P:ABB.Robotics.RobotStudio.Stations.PropertyAttributeCollection.Item(System.String)"></member>
    <member name="M:ABB.Robotics.RobotStudio.Stations.PropertyAttributeCollection.Remove(System.String)">
      <summary> Removes the value with the specified key from the collection. </summary>
    </member>
    <member name="M:ABB.Robotics.RobotStudio.Stations.PropertyAttributeCollection.TryGetValue(System.String,System.String@)">
      <summary> Gets the value associated with the specified key. </summary>
    </member>
    <member name="T:ABB.Robotics.RobotStudio.Stations.PropertyBinding">
      <summary>
            Represents a binding from a source <see cref="T:ABB.Robotics.RobotStudio.Stations.DynamicProperty">property</see> to
            a target property.
            </summary>
    </member>
    <member name="M:ABB.Robotics.RobotStudio.Stations.PropertyBinding.#ctor(ABB.Robotics.RobotStudio.ProjectObject,System.String,ABB.Robotics.RobotStudio.ProjectObject,System.String)">
      <summary>
            Creates a new instance of the PropertyBinding class.
            </summary>
      <param name="sourceObject">The object that contains the source property.
            <remarks> The object should be a <see cref="T:ABB.Robotics.RobotStudio.Stations.IHasDynamicProperties" />.</remarks></param>
      <param name="sourceProperty">The id of the source property.</param>
      <param name="targetObject">The object that contains the target property.</param>
      <param name="targetProperty">The id of the target property.
            <remarks> The value should be either the Id of a <see cref="T:ABB.Robotics.RobotStudio.Stations.DynamicProperty" /> or the name
            of a CLR property.</remarks></param>
    </member>
    <member name="M:ABB.Robotics.RobotStudio.Stations.PropertyBinding.#ctor(ABB.Robotics.RobotStudio.ProjectObject,System.String,ABB.Robotics.RobotStudio.ProjectObject,System.String,System.Boolean)">
      <summary>
            Creates a new instance of the PropertyBinding class.
            </summary>
      <param name="sourceObject">The object that contains the source property.
            <remarks> The object should be a <see cref="T:ABB.Robotics.RobotStudio.Stations.IHasDynamicProperties" />.</remarks></param>
      <param name="sourceProperty">The id of the source property.</param>
      <param name="targetObject">The object that contains the target property.</param>
      <param name="targetProperty">The id of the target property.
            <remarks> The value should be either the Id of a <see cref="T:ABB.Robotics.RobotStudio.Stations.DynamicProperty" /> or the name
            of a CLR property.</remarks></param>
      <param name="allowCycle">Indicates if the target property is allowed to be set twice in the same context.</param>
    </member>
    <member name="P:ABB.Robotics.RobotStudio.Stations.PropertyBinding.AllowCycle">
      <summary>
            Returns a value indicating if the target property is allowd to be set more than once in the same context
            </summary>
    </member>
    <member name="P:ABB.Robotics.RobotStudio.Stations.PropertyBinding.Parent"></member>
    <member name="P:ABB.Robotics.RobotStudio.Stations.PropertyBinding.SourceObject">
      <summary>
            Returns the object on which <see cref="P:ABB.Robotics.RobotStudio.Stations.PropertyBinding.SourceProperty" /> can be found
            </summary>
    </member>
    <member name="P:ABB.Robotics.RobotStudio.Stations.PropertyBinding.SourceProperty">
      <summary>
            Returns the name of the property that acts as the binding source
            </summary>
    </member>
    <member name="P:ABB.Robotics.RobotStudio.Stations.PropertyBinding.TargetObject">
      <summary>
            Returns the object on which <see cref="P:ABB.Robotics.RobotStudio.Stations.PropertyBinding.TargetProperty" /> can be found
            </summary>
    </member>
    <member name="P:ABB.Robotics.RobotStudio.Stations.PropertyBinding.TargetProperty">
      <summary>
            Returns the name of the property that acts as the binding target
            </summary>
    </member>
    <member name="M:ABB.Robotics.RobotStudio.Stations.PropertyBinding.Update"></member>
    <member name="T:ABB.Robotics.RobotStudio.Stations.PropertyBindingCollection"></member>
    <member name="M:ABB.Robotics.RobotStudio.Stations.PropertyBindingCollection.Add(ABB.Robotics.RobotStudio.Stations.PropertyBinding)"></member>
    <member name="E:ABB.Robotics.RobotStudio.Stations.PropertyBindingCollection.Changed">
      <summary>
            Raised when an item is added to or removed from the collection
            </summary>
    </member>
    <member name="M:ABB.Robotics.RobotStudio.Stations.PropertyBindingCollection.Clear"></member>
    <member name="M:ABB.Robotics.RobotStudio.Stations.PropertyBindingCollection.CopyTo(ABB.Robotics.RobotStudio.Stations.PropertyBinding[],System.Int32)"></member>
    <member name="M:ABB.Robotics.RobotStudio.Stations.PropertyBindingCollection.CopyTo(System.Array,System.Int32)"></member>
    <member name="P:ABB.Robotics.RobotStudio.Stations.PropertyBindingCollection.Count"></member>
    <member name="M:ABB.Robotics.RobotStudio.Stations.PropertyBindingCollection.GetEnumerator"></member>
    <member name="P:ABB.Robotics.RobotStudio.Stations.PropertyBindingCollection.IsSynchronized"></member>
    <member name="P:ABB.Robotics.RobotStudio.Stations.PropertyBindingCollection.Item(System.Int32)"></member>
    <member name="M:ABB.Robotics.RobotStudio.Stations.PropertyBindingCollection.Remove(ABB.Robotics.RobotStudio.Stations.PropertyBinding)"></member>
    <member name="P:ABB.Robotics.RobotStudio.Stations.PropertyBindingCollection.SyncRoot"></member>
    <member name="T:ABB.Robotics.RobotStudio.Stations.RapidModuleExistsException"></member>
    <member name="T:ABB.Robotics.RobotStudio.Stations.RapidStorageType">
      <summary>
            Specifies the storage type of a RAPID data declaration. Please refer to the RAPID reference manual for more information.
            This enumeration is used to express compile time information about a RAPID data declaration. For example a <see cref="T:ABB.Robotics.RobotStudio.Stations.RsDataDeclaration" /> with its <see cref="T:ABB.Robotics.RobotStudio.Stations.RsDataDeclaration" /> set to <b>Constant</b> is possible to modify in RobotStudio. So it is not considered constant in the station. Only at runtime in the controller.
            </summary>
    </member>
    <member name="F:ABB.Robotics.RobotStudio.Stations.RapidStorageType.Constant"></member>
    <member name="F:ABB.Robotics.RobotStudio.Stations.RapidStorageType.Persistent"></member>
    <member name="F:ABB.Robotics.RobotStudio.Stations.RapidStorageType.TaskPersistent"></member>
    <member name="F:ABB.Robotics.RobotStudio.Stations.RapidStorageType.Variable"></member>
    <member name="F:ABB.Robotics.RobotStudio.Stations.RapidStorageType.Invalid"></member>
    <member name="T:ABB.Robotics.RobotStudio.Stations.RapidSynchronizationEventArgs"></member>
    <member name="P:ABB.Robotics.RobotStudio.Stations.RapidSynchronizationEventArgs.Identifier"></member>
    <member name="P:ABB.Robotics.RobotStudio.Stations.RapidSynchronizationEventArgs.SynchronizationDirection"></member>
    <member name="T:ABB.Robotics.RobotStudio.Stations.RapidSynchronizationEventHandler"></member>
    <member name="T:ABB.Robotics.RobotStudio.Stations.RobotAxisValues">
      <summary>
            Represents the axis positions in radians of the robot axes.
            This class contains the same information as the RAPID data type <b>robjoint</b>.
            </summary>
    </member>
    <member name="M:ABB.Robotics.RobotStudio.Stations.RobotAxisValues.#ctor(System.Double[])"></member>
    <member name="M:ABB.Robotics.RobotStudio.Stations.RobotAxisValues.GetAxisValues">
      <summary>
            Returns the axes values in Rax_1 to Rax_6 as an array.
            </summary>
    </member>
    <member name="M:ABB.Robotics.RobotStudio.Stations.RobotAxisValues.GetAxisValues(System.Int32[])">
      <summary>
            Returns the axes values for the active axes in Rax_1 to Rax_6 as an array.
            This method is used when getting axes values for robots that has less than 6 axes.
            </summary>
      <param name="activeJoints">An array of int that specifies for which positions (Rax_1 to Rax_6) the values shall be get.</param>
    </member>
    <member name="P:ABB.Robotics.RobotStudio.Stations.RobotAxisValues.Rax_1">
      <summary>
            Gets/sets the position for robot axis 1.		
            </summary>
    </member>
    <member name="P:ABB.Robotics.RobotStudio.Stations.RobotAxisValues.Rax_2">
      <summary>
            Gets/sets the position for robot axis 2.
            </summary>
    </member>
    <member name="P:ABB.Robotics.RobotStudio.Stations.RobotAxisValues.Rax_3">
      <summary>
            Gets/sets the position for robot axis 3.
            </summary>
    </member>
    <member name="P:ABB.Robotics.RobotStudio.Stations.RobotAxisValues.Rax_4">
      <summary>
            Gets/sets the position for robot axis 4.
            </summary>
    </member>
    <member name="P:ABB.Robotics.RobotStudio.Stations.RobotAxisValues.Rax_5">
      <summary>
            Gets/sets the position for robot axis 5.
            </summary>
    </member>
    <member name="P:ABB.Robotics.RobotStudio.Stations.RobotAxisValues.Rax_6">
      <summary>
            Gets/sets the position for robot axis 6.
            </summary>
    </member>
    <member name="M:ABB.Robotics.RobotStudio.Stations.RobotAxisValues.SetAxisValues(ABB.Robotics.RobotStudio.Stations.RobotAxisValues@,System.Double[])">
      <summary>
            Sets the values of the specified <see cref="T:ABB.Robotics.RobotStudio.Stations.RobotAxisValues" />, given the specified array of doubles.
            </summary>
      <exception cref="T:System.ArgumentException">
            The axisValue array is not of length 6.
            </exception>
    </member>
    <member name="M:ABB.Robotics.RobotStudio.Stations.RobotAxisValues.SetAxisValues(ABB.Robotics.RobotStudio.Stations.RobotAxisValues@,System.Double[],System.Int32[])">
      <summary>
            Sets only the values of the active axes. One array contains the values for the active axes, and another arrays specifies the position in the <see cref="T:ABB.Robotics.RobotStudio.Stations.RobotAxisValues" />, where the values will be set.
            This method is used when setting axes values for robots that has less than 6 axes.
            </summary>
      <param name="robotAxes">The <see cref="T:ABB.Robotics.RobotStudio.Stations.RobotAxisValues" /> which values shall be set. Which axes (Rax_1 - Rax_6), that will be affected depends on <b>activeJoints</b>.</param>
      <param name="activeAxisValues">An array of double that contains the values to set.</param>
      <param name="activeJoints">An array of int that specifies in which positions (Rax_1 to Rax_6) the values shall be set.</param>
      <exception cref="T:System.ArgumentException">
            The different reasons are:
            The axisValue is not of the same length as the activeJoints array.
            The arrays have a length that is not between 1 and 6.
            The values in the activeJoints array are not in the range 1 to 6. Since they are used to define which values from Rax_1 to Rax_6 that are set, it must be in the range 1 to 6.
            </exception>
    </member>
    <member name="M:ABB.Robotics.RobotStudio.Stations.RobotAxisValues.ToString"></member>
    <member name="T:ABB.Robotics.RobotStudio.Stations.RsActionInstruction"></member>
    <member name="M:ABB.Robotics.RobotStudio.Stations.RsActionInstruction.#ctor(ABB.Robotics.RobotStudio.Stations.RsTask,System.String,System.String)">
      <summary>
            Initializes a new instance of the RsActionInstruction class, which is based on the specified instruction description and template.
            </summary>
      <param name="task">The task to create the Action instruction for</param>
      <param name="descriptionName">The name of the instruction description, that specifies which kind of Action Instruction that shall be created.</param>
      <param name="instructionTemplateName">The name of the instruction template to use. The template specifies default argument values for the instruction.</param>
    </member>
    <member name="P:ABB.Robotics.RobotStudio.Stations.RsActionInstruction.FrameSize">
      <summary>
            Gets or sets the size of RsActionInstructions that have a graphical representation, e.g. SetBrush. 
            </summary>
    </member>
    <member name="P:ABB.Robotics.RobotStudio.Stations.RsActionInstruction.InstructionTemplateName">
      <summary>
            Gets the instruction template name.
            </summary>
    </member>
    <member name="T:ABB.Robotics.RobotStudio.Stations.RsActionInstructionDescription">
      <summary>
            An Instruction Description that defines which arguments the instruction has
            </summary>
    </member>
    <member name="M:ABB.Robotics.RobotStudio.Stations.RsActionInstructionDescription.#ctor(System.String)">
      <summary>
            Initializes a new instance of the RsActionInstructionDescription class.
            </summary>
      <param name="name">The Name of the RsActionInstructionDescription to create.</param>
    </member>
    <member name="P:ABB.Robotics.RobotStudio.Stations.RsActionInstructionDescription.ActiveTemplate">
      <summary>
            Gets or sets the active instruction template.
            </summary>
    </member>
    <member name="P:ABB.Robotics.RobotStudio.Stations.RsActionInstructionDescription.InstructionTemplates">
      <summary>
            Gets the collection of instruction templates contained within this Action Instruction Description.
            </summary>
    </member>
    <member name="T:ABB.Robotics.RobotStudio.Stations.RsDataDeclaration">
      <summary>
            This is an Abstract base class for RsRobTarget, RsGenericDataDeclaration, RsJointTarget, RsToolData and RsWorkObject.
            It corresponds to a RAPID concept used to create instances of variables or data types, like num or tooldata.
            </summary>
    </member>
    <member name="M:ABB.Robotics.RobotStudio.Stations.RsDataDeclaration.Copy">
      <summary>
            Creates a copy of the DataDeclaration.
            </summary>
    </member>
    <member name="P:ABB.Robotics.RobotStudio.Stations.RsDataDeclaration.DataType">
      <summary>
            Gets or Sets the DataType of the Data Declaration.
            </summary>
    </member>
    <member name="P:ABB.Robotics.RobotStudio.Stations.RsDataDeclaration.DisplayName"></member>
    <member name="M:ABB.Robotics.RobotStudio.Stations.RsDataDeclaration.GetReferencingInstructions">
      <summary>
            Returns all instructions that are referencing this DataDeclaration.
            </summary>
      <returns>An Array of all the <see cref="T:ABB.Robotics.RobotStudio.Stations.RsInstruction" /> that is referencing this object.</returns>
    </member>
    <member name="P:ABB.Robotics.RobotStudio.Stations.RsDataDeclaration.Local">
      <summary>
             Gets or sets if the DataDeclaration is declared local in a module. (Corresponds to the LOCAL keyword in RAPID).
            </summary>
    </member>
    <member name="P:ABB.Robotics.RobotStudio.Stations.RsDataDeclaration.ModuleName">
      <summary>
            Gets or sets the ModuleName that the DataDeclaration will be synchronized to.
            </summary>
    </member>
    <member name="P:ABB.Robotics.RobotStudio.Stations.RsDataDeclaration.Name">
      <summary>
            Gets or sets the Name of the DataDeclaration
            </summary>
    </member>
    <member name="P:ABB.Robotics.RobotStudio.Stations.RsDataDeclaration.StorageType">
      <summary>
            Gets or sets the RapidStorageType of the DataDeclaration 
            </summary>
    </member>
    <member name="P:ABB.Robotics.RobotStudio.Stations.RsDataDeclaration.Synchronize">
      <summary>
            Gets or sets whether the DataDeclaration should be Synchronized to the VC when the Path is.
            </summary>
    </member>
    <member name="T:ABB.Robotics.RobotStudio.Stations.RsDataDeclarationCollection">
      <summary>
            A collection of RsDataDeclaration objects.
            </summary>
    </member>
    <member name="M:ABB.Robotics.RobotStudio.Stations.RsDataDeclarationCollection.Add(ABB.Robotics.RobotStudio.Stations.RsDataDeclaration)">
      <summary>
            Adds a <see cref="T:ABB.Robotics.RobotStudio.Stations.RsDataDeclaration" /> to the collection.
            </summary>
      <param name="dataDeclaration">The <see cref="T:ABB.Robotics.RobotStudio.Stations.RsDataDeclaration" /> to add to the collection.</param>
    </member>
    <member name="M:ABB.Robotics.RobotStudio.Stations.RsDataDeclarationCollection.Contains(ABB.Robotics.RobotStudio.Stations.RsDataDeclaration)"></member>
    <member name="M:ABB.Robotics.RobotStudio.Stations.RsDataDeclarationCollection.Contains(System.String)">
      <summary>
            Adds a <see cref="T:ABB.Robotics.RobotStudio.Stations.Camera" /> to the collection.
            </summary>
      <param name="name">The name of the <see cref="T:ABB.Robotics.RobotStudio.Stations.RsDataDeclaration" /> to look for.</param>
      <returns>True if the collection contains a DataDeclaration with the specified name.</returns>
    </member>
    <member name="M:ABB.Robotics.RobotStudio.Stations.RsDataDeclarationCollection.CopyTo(ABB.Robotics.RobotStudio.Stations.RsDataDeclaration[],System.Int32)"></member>
    <member name="M:ABB.Robotics.RobotStudio.Stations.RsDataDeclarationCollection.CopyTo(System.Array,System.Int32)"></member>
    <member name="P:ABB.Robotics.RobotStudio.Stations.RsDataDeclarationCollection.Count"></member>
    <member name="M:ABB.Robotics.RobotStudio.Stations.RsDataDeclarationCollection.GetEnumerator"></member>
    <member name="P:ABB.Robotics.RobotStudio.Stations.RsDataDeclarationCollection.IsSynchronized"></member>
    <member name="P:ABB.Robotics.RobotStudio.Stations.RsDataDeclarationCollection.Item(System.Int32)"></member>
    <member name="P:ABB.Robotics.RobotStudio.Stations.RsDataDeclarationCollection.Item(System.String)">
      <summary>Gets the declaration with the specified name.</summary>
      <param name="name">The name of the declaration to get.</param>
      <returns>The <see cref="T:ABB.Robotics.RobotStudio.Stations.RsDataDeclaration" /> mathcing the name.</returns>
      <exception cref="T:System.ArgumentException">Invalid name, if no mathcing <see cref="T:ABB.Robotics.RobotStudio.Stations.RsDataDeclaration" /> is found.</exception>
    </member>
    <member name="P:ABB.Robotics.RobotStudio.Stations.RsDataDeclarationCollection.Parent"></member>
    <member name="M:ABB.Robotics.RobotStudio.Stations.RsDataDeclarationCollection.Remove(ABB.Robotics.RobotStudio.Stations.RsDataDeclaration)">
      <summary>
            Removes a <see cref="T:ABB.Robotics.RobotStudio.Stations.RsDataDeclaration" /> from the collection.
            </summary>
      <param name="dataDeclaration">The <see cref="T:ABB.Robotics.RobotStudio.Stations.RsDataDeclaration" /> to remove from the collection.</param>
    </member>
    <member name="P:ABB.Robotics.RobotStudio.Stations.RsDataDeclarationCollection.SyncRoot"></member>
    <member name="M:ABB.Robotics.RobotStudio.Stations.RsDataDeclarationCollection.ToArray"></member>
    <member name="M:ABB.Robotics.RobotStudio.Stations.RsDataDeclarationCollection.TryGetDataDeclaration(System.String,ABB.Robotics.RobotStudio.Stations.RsDataDeclaration@)">
      <summary>Gets the data declaration with the specified name.</summary>
      <param name="name">The name of the declaration to get.</param>
      <param name="dataDeclaration">When this method returns, contains the declaration associated with the specified name,
            if the name is found; otherwise, null.</param>
      <returns>true if the RsDataDeclarationCollection contains an element with the specified name; otherwise, false.</returns>
      <exception cref="T:System.ArgumentException">name is a null reference.</exception>
    </member>
    <member name="T:ABB.Robotics.RobotStudio.Stations.RsGenericDataDeclaration">
      <summary>
            Represents a Rapid Data Declaration that does not have corresponding RobotStudio class,
            but that still should be possible to syncronized and/or modify
            </summary>
    </member>
    <member name="M:ABB.Robotics.RobotStudio.Stations.RsGenericDataDeclaration.#ctor(System.String,System.String)">
      <summary>
            Initializes a new instance of the <see cref="T:ABB.Robotics.RobotStudio.Stations.RsGenericDataDeclaration" /> class.
            </summary>
      <param name="name">The RAPID name of the RsGenericDataDeclaration.</param>
      <param name="dataType">The RAPID datatype of the RsGenericDataDeclaration</param>
    </member>
    <member name="M:ABB.Robotics.RobotStudio.Stations.RsGenericDataDeclaration.#ctor(System.String,System.String,System.Int32[])">
      <summary>
            Initializes a new instance of the <see cref="T:ABB.Robotics.RobotStudio.Stations.RsGenericDataDeclaration" /> class.
            </summary>
      <param name="name">The RAPID name of the RsGenericDataDeclaration.</param>
      <param name="dataType">The RAPID datatype of the RsGenericDataDeclaration</param>
      <param name="dimensions">Defines the dimensions of the InitialExpression string.
            It should be an array of length 1, 2 or 3, where each element defines the size of the corresponding dimension.</param>
    </member>
    <member name="M:ABB.Robotics.RobotStudio.Stations.RsGenericDataDeclaration.GetDimensions">
      <summary>Gets the Dimensions array from the Data Declaration.</summary>
      <returns>The Array or dimensions.</returns>
    </member>
    <member name="P:ABB.Robotics.RobotStudio.Stations.RsGenericDataDeclaration.InitialExpression">
      <summary>
            Gets or Sets the InitialExpression of the Data Declaration.
            </summary>
    </member>
    <member name="T:ABB.Robotics.RobotStudio.Stations.RsInstruction"></member>
    <member name="M:ABB.Robotics.RobotStudio.Stations.RsInstruction.Copy">
      <summary>
            Creates a deep copy of the RsInstruction
            </summary>
      <returns>The new RsInstruction object</returns>
    </member>
    <member name="P:ABB.Robotics.RobotStudio.Stations.RsInstruction.DisplayName"></member>
    <member name="P:ABB.Robotics.RobotStudio.Stations.RsInstruction.InstructionArguments">
      <summary>
            Gets the <see cref="T:ABB.Robotics.RobotStudio.Stations.RsInstructionArgumentCollection" /> of the RsInstruction.
            </summary>
    </member>
    <member name="M:ABB.Robotics.RobotStudio.Stations.RsInstruction.SetInstructionTemplate(ABB.Robotics.RobotStudio.Stations.RsInstructionTemplate)">
      <summary>
            Sets the instruction template of the RsInstruction
            </summary>
    </member>
    <member name="T:ABB.Robotics.RobotStudio.Stations.RsInstructionArgument">
      <summary>
            Represents an argument of a RsInstruction or a RsInstructionTemplate.
            </summary>
    </member>
    <member name="M:ABB.Robotics.RobotStudio.Stations.RsInstructionArgument.#ctor(System.String,System.String)">
      <summary>
            Creates and initializes a new RsInstructionArgument object.
            </summary>
      <param name="name">The name of the <see cref="T:ABB.Robotics.RobotStudio.Stations.RsInstructionArgument" /> to create.</param>
      <param name="value">The value of the <see cref="T:ABB.Robotics.RobotStudio.Stations.RsInstructionArgument" /> to create.</param>
      <returns>The new <see cref="T:ABB.Robotics.RobotStudio.Stations.RsInstructionArgument" /> object.</returns>
    </member>
    <member name="P:ABB.Robotics.RobotStudio.Stations.RsInstructionArgument.Enabled">
      <summary>
            Gets or sets the Enabled. Set Enabled to false to not use the instruction argument.
            </summary>
    </member>
    <member name="P:ABB.Robotics.RobotStudio.Stations.RsInstructionArgument.Parent">
      <summary>
            Get the parent of the instruction argument		
            </summary>
    </member>
    <member name="P:ABB.Robotics.RobotStudio.Stations.RsInstructionArgument.Value">
      <summary>
            Get or sets the value of the instruction argument
            </summary>
    </member>
    <member name="T:ABB.Robotics.RobotStudio.Stations.RsInstructionArgumentCollection">
      <summary>
            A collection of <see cref="T:ABB.Robotics.RobotStudio.Stations.RsInstructionArgument" /> objects.
            </summary>
    </member>
    <member name="M:ABB.Robotics.RobotStudio.Stations.RsInstructionArgumentCollection.Add(ABB.Robotics.RobotStudio.Stations.RsInstructionArgument)">
      <summary>
            Add a RsInstructionArgument to the collection.
            </summary>
      <param name="instructionArgument">The instruction argument to be added.</param>
    </member>
    <member name="M:ABB.Robotics.RobotStudio.Stations.RsInstructionArgumentCollection.Contains(ABB.Robotics.RobotStudio.Stations.RsInstructionArgument)"></member>
    <member name="M:ABB.Robotics.RobotStudio.Stations.RsInstructionArgumentCollection.Contains(System.String)">
      <summary>
            Check to see if a named item is part of the collection.
            </summary>
      <param name="name">The name to look for.</param>
      <returns>True if the named item is part of the collection, false otherwise.</returns>
    </member>
    <member name="M:ABB.Robotics.RobotStudio.Stations.RsInstructionArgumentCollection.CopyTo(ABB.Robotics.RobotStudio.Stations.RsInstructionArgument[],System.Int32)"></member>
    <member name="M:ABB.Robotics.RobotStudio.Stations.RsInstructionArgumentCollection.CopyTo(System.Array,System.Int32)"></member>
    <member name="P:ABB.Robotics.RobotStudio.Stations.RsInstructionArgumentCollection.Count"></member>
    <member name="M:ABB.Robotics.RobotStudio.Stations.RsInstructionArgumentCollection.GetEnumerator"></member>
    <member name="P:ABB.Robotics.RobotStudio.Stations.RsInstructionArgumentCollection.IsSynchronized"></member>
    <member name="P:ABB.Robotics.RobotStudio.Stations.RsInstructionArgumentCollection.Item(System.Int32)"></member>
    <member name="P:ABB.Robotics.RobotStudio.Stations.RsInstructionArgumentCollection.Item(System.String)">
      <summary>
            Gets the named item in the collection
            </summary>
    </member>
    <member name="P:ABB.Robotics.RobotStudio.Stations.RsInstructionArgumentCollection.Parent"></member>
    <member name="M:ABB.Robotics.RobotStudio.Stations.RsInstructionArgumentCollection.Remove(ABB.Robotics.RobotStudio.Stations.RsInstructionArgument)">
      <summary>
            Removes a RsInstructionArgument from the collection.
            </summary>
      <param name="instructionArgument">The instruction argument to be removed.</param>
    </member>
    <member name="P:ABB.Robotics.RobotStudio.Stations.RsInstructionArgumentCollection.SyncRoot"></member>
    <member name="M:ABB.Robotics.RobotStudio.Stations.RsInstructionArgumentCollection.ToArray"></member>
    <member name="M:ABB.Robotics.RobotStudio.Stations.RsInstructionArgumentCollection.TryGetInstructionArgument(System.String,ABB.Robotics.RobotStudio.Stations.RsInstructionArgument@)">
      <summary>Gets the argument with the specified name.</summary>
      <param name="name">The name of the argument to get.</param>
      <param name="instructionArgument">When this method returns, contains the argument associated with the specified name,
            if the name is found; otherwise, null.</param>
      <returns>true if the RsInstructionArgumentCollection contains an element with the specified name; otherwise, false.</returns>
      <exception cref="T:System.ArgumentException">name is a null reference.</exception>
    </member>
    <member name="T:ABB.Robotics.RobotStudio.Stations.RsInstructionCollection">
      <summary>
            A collection of <see cref="T:ABB.Robotics.RobotStudio.Stations.RsInstruction" /> objects.
            </summary>
    </member>
    <member name="M:ABB.Robotics.RobotStudio.Stations.RsInstructionCollection.Add(ABB.Robotics.RobotStudio.Stations.RsInstruction)">
      <summary>
            Add an instruction to a path procedure.
            </summary>
      <param name="instruction">The instruction to be added.</param>
      <exception cref="T:System.ArgumentException" />
      <exception cref="T:System.ArgumentNullException" />
      <exception cref="T:System.Exception">Object must be removed from it's current parent first.</exception>
    </member>
    <member name="M:ABB.Robotics.RobotStudio.Stations.RsInstructionCollection.Add(ABB.Robotics.RobotStudio.Stations.RsInstruction,ABB.Robotics.RobotStudio.Stations.RsInstruction)">
      <summary>
            Add an instruction to a path procedure.
            </summary>
      <param name="instruction">The instruction to be added.</param>
      <param name="afterThisInstruction">The afterThisInstruction that instruction should be added after.
            If this null, instruction is added before the first instruction.</param>
      <exception cref="T:System.ArgumentException" />
      <exception cref="T:System.ArgumentNullException" />
      <exception cref="T:System.Exception">Object must be removed from it's current parent first.</exception>
    </member>
    <member name="M:ABB.Robotics.RobotStudio.Stations.RsInstructionCollection.Contains(ABB.Robotics.RobotStudio.Stations.RsInstruction)"></member>
    <member name="M:ABB.Robotics.RobotStudio.Stations.RsInstructionCollection.CopyTo(ABB.Robotics.RobotStudio.Stations.RsInstruction[],System.Int32)"></member>
    <member name="M:ABB.Robotics.RobotStudio.Stations.RsInstructionCollection.CopyTo(System.Array,System.Int32)"></member>
    <member name="P:ABB.Robotics.RobotStudio.Stations.RsInstructionCollection.Count"></member>
    <member name="M:ABB.Robotics.RobotStudio.Stations.RsInstructionCollection.GetEnumerator"></member>
    <member name="P:ABB.Robotics.RobotStudio.Stations.RsInstructionCollection.IsSynchronized"></member>
    <member name="P:ABB.Robotics.RobotStudio.Stations.RsInstructionCollection.Item(System.Int32)"></member>
    <member name="P:ABB.Robotics.RobotStudio.Stations.RsInstructionCollection.Parent"></member>
    <member name="M:ABB.Robotics.RobotStudio.Stations.RsInstructionCollection.Remove(ABB.Robotics.RobotStudio.Stations.RsInstruction)">
      <summary>
            Removes an instruction from a path procedure.
            </summary>
      <param name="instruction">The instruction to be removed.</param>
    </member>
    <member name="P:ABB.Robotics.RobotStudio.Stations.RsInstructionCollection.SyncRoot"></member>
    <member name="M:ABB.Robotics.RobotStudio.Stations.RsInstructionCollection.ToArray"></member>
    <member name="T:ABB.Robotics.RobotStudio.Stations.RsInstructionDescription">
      <summary>
            An instruction description defines which arguments the corresponding instruction has.
            </summary>
    </member>
    <member name="M:ABB.Robotics.RobotStudio.Stations.RsInstructionDescription.FindInstructionParameter(System.String)">
      <summary>
            Tries to find the InstructionParamenter with the supplies name
            </summary>
      <param name="parameterName">The name of the RsInstructionParameter to look for</param>
      <returns>
            The RsInstructionParameter if a matching if exists, otherwise null.
            </returns>
    </member>
    <member name="P:ABB.Robotics.RobotStudio.Stations.RsInstructionDescription.InformationText">
      <summary>
            Gets or sets the InfromationText of the instruction description.
            </summary>
    </member>
    <member name="P:ABB.Robotics.RobotStudio.Stations.RsInstructionDescription.InstructionParameterGroups">
      <summary>
            Gets the <see cref="T:ABB.Robotics.RobotStudio.Stations.RsInstructionParameterGroupCollection" /> of the instruction description.
            </summary>
    </member>
    <member name="T:ABB.Robotics.RobotStudio.Stations.RsInstructionDescriptionCollection">
      <summary>
            A collection of <see cref="T:ABB.Robotics.RobotStudio.Stations.RsInstructionDescription" /> objects.
            </summary>
    </member>
    <member name="M:ABB.Robotics.RobotStudio.Stations.RsInstructionDescriptionCollection.Add(ABB.Robotics.RobotStudio.Stations.RsInstructionDescription)">
      <summary>
            Adds the supplied <see cref="T:ABB.Robotics.RobotStudio.Stations.RsInstructionDescription" /> to the collection.
            </summary>
      <param name="instructionDescription">The Instruction Description to add to the collection.</param>
    </member>
    <member name="M:ABB.Robotics.RobotStudio.Stations.RsInstructionDescriptionCollection.Contains(ABB.Robotics.RobotStudio.Stations.RsInstructionDescription)"></member>
    <member name="M:ABB.Robotics.RobotStudio.Stations.RsInstructionDescriptionCollection.Contains(System.String)">
      <summary>
            Checks to see if a named item is contained by the collection.
            </summary>
      <param name="name">The name of the item to look for.</param>
      <returns>
            True if the named item is a member, false otherwise.
            </returns>
    </member>
    <member name="M:ABB.Robotics.RobotStudio.Stations.RsInstructionDescriptionCollection.CopyTo(ABB.Robotics.RobotStudio.Stations.RsInstructionDescription[],System.Int32)"></member>
    <member name="M:ABB.Robotics.RobotStudio.Stations.RsInstructionDescriptionCollection.CopyTo(System.Array,System.Int32)"></member>
    <member name="P:ABB.Robotics.RobotStudio.Stations.RsInstructionDescriptionCollection.Count"></member>
    <member name="M:ABB.Robotics.RobotStudio.Stations.RsInstructionDescriptionCollection.GetEnumerator"></member>
    <member name="P:ABB.Robotics.RobotStudio.Stations.RsInstructionDescriptionCollection.IsSynchronized"></member>
    <member name="P:ABB.Robotics.RobotStudio.Stations.RsInstructionDescriptionCollection.Item(System.Int32)"></member>
    <member name="P:ABB.Robotics.RobotStudio.Stations.RsInstructionDescriptionCollection.Item(System.String)">
      <summary>
            Gets the named item.
            </summary>
    </member>
    <member name="P:ABB.Robotics.RobotStudio.Stations.RsInstructionDescriptionCollection.Parent"></member>
    <member name="M:ABB.Robotics.RobotStudio.Stations.RsInstructionDescriptionCollection.Remove(ABB.Robotics.RobotStudio.Stations.RsInstructionDescription)">
      <summary>
            Removes the supplied <see cref="T:ABB.Robotics.RobotStudio.Stations.RsInstructionDescription" /> from the collection.
            </summary>
      <param name="instructionDescription">The Instruction Description to remove from the collection.</param>
    </member>
    <member name="P:ABB.Robotics.RobotStudio.Stations.RsInstructionDescriptionCollection.SyncRoot"></member>
    <member name="M:ABB.Robotics.RobotStudio.Stations.RsInstructionDescriptionCollection.ToArray"></member>
    <member name="M:ABB.Robotics.RobotStudio.Stations.RsInstructionDescriptionCollection.TryGetInstructionDescription(System.String,ABB.Robotics.RobotStudio.Stations.RsInstructionDescription@)">
      <summary>Gets the description with the specified name.</summary>
      <param name="name">The name of the description to get.</param>
      <param name="instructionDescription">When this method returns, contains the description associated with the specified name,
            if the name is found; otherwise, null.</param>
      <returns>true if the RsInstructionDescriptionCollection contains an element with the specified name; otherwise, false.</returns>
      <exception cref="T:System.ArgumentException">name is a null reference.</exception>
    </member>
    <member name="T:ABB.Robotics.RobotStudio.Stations.RsInstructionParameter">
      <summary>
            An Instruction Parameter object respresents an argument of a RAPID instruction.
            </summary>
    </member>
    <member name="M:ABB.Robotics.RobotStudio.Stations.RsInstructionParameter.#ctor(System.String)">
      <summary>
            Creates and initializes a new <see cref="T:ABB.Robotics.RobotStudio.Stations.RsInstructionParameter" /> object.
            </summary>
      <param name="name">The name of the <see cref="T:ABB.Robotics.RobotStudio.Stations.RsInstructionParameter" />.</param>
      <returns>
            The new <see cref="T:ABB.Robotics.RobotStudio.Stations.RsInstructionParameter" /> object.
            </returns>
    </member>
    <member name="P:ABB.Robotics.RobotStudio.Stations.RsInstructionParameter.AccessMode">
      <summary>
            Get or sets the AccessMode of the Instruction Parameter.
            </summary>
    </member>
    <member name="P:ABB.Robotics.RobotStudio.Stations.RsInstructionParameter.DataType">
      <summary>
            Get or sets the DataType of an Instruction Parameter.
            </summary>
    </member>
    <member name="P:ABB.Robotics.RobotStudio.Stations.RsInstructionParameter.Dimensions">
      <summary>
            Get or sets the dimension of the Instruction Parameter.
            </summary>
    </member>
    <member name="P:ABB.Robotics.RobotStudio.Stations.RsInstructionParameter.Optional">
      <summary>
            Get or sets whether the Instruction Parameter is an optional argument or not.
            </summary>
    </member>
    <member name="P:ABB.Robotics.RobotStudio.Stations.RsInstructionParameter.PointType">
      <summary>
            Get or sets the PointType of the Instruction Parameter.
            </summary>
    </member>
    <member name="P:ABB.Robotics.RobotStudio.Stations.RsInstructionParameter.ReadOnly">
      <summary>
            Get or sets whether the Instruction Parameter should be ReadOnly or not in RobotStudio.
            </summary>
    </member>
    <member name="P:ABB.Robotics.RobotStudio.Stations.RsInstructionParameter.SyncReferencedData">
      <summary>
            Get or sets whether the Instruction Parameter should be syncronized to and from the VC.
            If set to true when syncing form the VC data declerations corresponding to the Parameter will be added to the station
            </summary>
    </member>
    <member name="T:ABB.Robotics.RobotStudio.Stations.RsInstructionParameterCollection">
      <summary>
            A collection of <see cref="T:ABB.Robotics.RobotStudio.Stations.RsInstructionParameter" /> objects.
            </summary>
    </member>
    <member name="M:ABB.Robotics.RobotStudio.Stations.RsInstructionParameterCollection.Add(ABB.Robotics.RobotStudio.Stations.RsInstructionParameter)">
      <summary>
            Adds a <see cref="T:ABB.Robotics.RobotStudio.Stations.RsInstructionParameter" /> object to the collection.
            </summary>
      <param name="instructionParameter">The <see cref="T:ABB.Robotics.RobotStudio.Stations.RsInstructionParameter" /> to add.</param>
    </member>
    <member name="M:ABB.Robotics.RobotStudio.Stations.RsInstructionParameterCollection.Contains(ABB.Robotics.RobotStudio.Stations.RsInstructionParameter)"></member>
    <member name="M:ABB.Robotics.RobotStudio.Stations.RsInstructionParameterCollection.CopyTo(ABB.Robotics.RobotStudio.Stations.RsInstructionParameter[],System.Int32)"></member>
    <member name="M:ABB.Robotics.RobotStudio.Stations.RsInstructionParameterCollection.CopyTo(System.Array,System.Int32)"></member>
    <member name="P:ABB.Robotics.RobotStudio.Stations.RsInstructionParameterCollection.Count"></member>
    <member name="M:ABB.Robotics.RobotStudio.Stations.RsInstructionParameterCollection.GetEnumerator"></member>
    <member name="P:ABB.Robotics.RobotStudio.Stations.RsInstructionParameterCollection.IsSynchronized"></member>
    <member name="P:ABB.Robotics.RobotStudio.Stations.RsInstructionParameterCollection.Item(System.Int32)"></member>
    <member name="P:ABB.Robotics.RobotStudio.Stations.RsInstructionParameterCollection.Parent"></member>
    <member name="M:ABB.Robotics.RobotStudio.Stations.RsInstructionParameterCollection.Remove(ABB.Robotics.RobotStudio.Stations.RsInstructionParameter)">
      <summary>
            Removes a <see cref="T:ABB.Robotics.RobotStudio.Stations.RsInstructionParameter" /> object from the collection.
            </summary>
      <param name="instructionParameter">The <see cref="T:ABB.Robotics.RobotStudio.Stations.RsInstructionParameter" /> to remove.</param>
    </member>
    <member name="P:ABB.Robotics.RobotStudio.Stations.RsInstructionParameterCollection.SyncRoot"></member>
    <member name="M:ABB.Robotics.RobotStudio.Stations.RsInstructionParameterCollection.ToArray"></member>
    <member name="T:ABB.Robotics.RobotStudio.Stations.RsInstructionParameterGroup">
      <summary>
            An RsInstructionParameterGroup acts as a node object for a collection of Instruction Parameters.
            The instruction parameters in its collection are mutualy exclusive ones fro the RAPID instruction.
            </summary>
    </member>
    <member name="M:ABB.Robotics.RobotStudio.Stations.RsInstructionParameterGroup.#ctor">
      <summary>
            Creates and initializes a new <see cref="T:ABB.Robotics.RobotStudio.Stations.RsInstructionParameterGroup" /> object.
            </summary>
      <returns>
            The new <see cref="T:ABB.Robotics.RobotStudio.Stations.RsInstructionParameterGroup" /> object.
            </returns>
    </member>
    <member name="P:ABB.Robotics.RobotStudio.Stations.RsInstructionParameterGroup.InstructionParameters">
      <summary>
            Gets the collection of <see cref="T:ABB.Robotics.RobotStudio.Stations.RsInstructionParameter" /> object.
            </summary>
    </member>
    <member name="T:ABB.Robotics.RobotStudio.Stations.RsInstructionParameterGroupCollection">
      <summary>
            A collection of <see cref="T:ABB.Robotics.RobotStudio.Stations.RsInstructionParameterGroup" /> objects.
            </summary>
    </member>
    <member name="M:ABB.Robotics.RobotStudio.Stations.RsInstructionParameterGroupCollection.Add(ABB.Robotics.RobotStudio.Stations.RsInstructionParameterGroup)">
      <summary>
            Add a <see cref="T:ABB.Robotics.RobotStudio.Stations.RsInstructionParameterGroup" /> object to the collection.
            </summary>
      <param name="instructionParameterGroup">The <see cref="T:ABB.Robotics.RobotStudio.Stations.RsInstructionParameterGroup" /> to add.</param>
    </member>
    <member name="M:ABB.Robotics.RobotStudio.Stations.RsInstructionParameterGroupCollection.Contains(ABB.Robotics.RobotStudio.Stations.RsInstructionParameterGroup)"></member>
    <member name="M:ABB.Robotics.RobotStudio.Stations.RsInstructionParameterGroupCollection.CopyTo(ABB.Robotics.RobotStudio.Stations.RsInstructionParameterGroup[],System.Int32)"></member>
    <member name="M:ABB.Robotics.RobotStudio.Stations.RsInstructionParameterGroupCollection.CopyTo(System.Array,System.Int32)"></member>
    <member name="P:ABB.Robotics.RobotStudio.Stations.RsInstructionParameterGroupCollection.Count"></member>
    <member name="M:ABB.Robotics.RobotStudio.Stations.RsInstructionParameterGroupCollection.GetEnumerator"></member>
    <member name="P:ABB.Robotics.RobotStudio.Stations.RsInstructionParameterGroupCollection.IsSynchronized"></member>
    <member name="P:ABB.Robotics.RobotStudio.Stations.RsInstructionParameterGroupCollection.Item(System.Int32)"></member>
    <member name="P:ABB.Robotics.RobotStudio.Stations.RsInstructionParameterGroupCollection.Parent"></member>
    <member name="M:ABB.Robotics.RobotStudio.Stations.RsInstructionParameterGroupCollection.Remove(ABB.Robotics.RobotStudio.Stations.RsInstructionParameterGroup)">
      <summary>
            Removes a <see cref="T:ABB.Robotics.RobotStudio.Stations.RsInstructionParameterGroup" /> object from the collection.
            </summary>
      <param name="instructionParameterGroup">The <see cref="T:ABB.Robotics.RobotStudio.Stations.RsInstructionParameterGroup" /> to remove.</param>
    </member>
    <member name="P:ABB.Robotics.RobotStudio.Stations.RsInstructionParameterGroupCollection.SyncRoot"></member>
    <member name="M:ABB.Robotics.RobotStudio.Stations.RsInstructionParameterGroupCollection.ToArray"></member>
    <member name="T:ABB.Robotics.RobotStudio.Stations.RsInstructionTemplate">
      <summary>
            An instruction template containa a predefined set of argument values that are applied to the instructions you create using the template.
            You can create templates for all instructions in the system running on the virtual controller.
            </summary>
    </member>
    <member name="M:ABB.Robotics.RobotStudio.Stations.RsInstructionTemplate.#ctor">
      <summary>
            Creates and initializes a new <see cref="T:ABB.Robotics.RobotStudio.Stations.RsInstructionTemplate" /> object.
            </summary>
      <returns>
            The new <see cref="T:ABB.Robotics.RobotStudio.Stations.RsInstructionTemplate" /> object.
            </returns>
    </member>
    <member name="P:ABB.Robotics.RobotStudio.Stations.RsInstructionTemplate.InstructionArguments">
      <summary>
            Gets the InstructionArguments collection of the template.
            </summary>
    </member>
    <member name="T:ABB.Robotics.RobotStudio.Stations.RsInstructionTemplateCollection">
      <summary>
            A collection of <see cref="T:ABB.Robotics.RobotStudio.Stations.RsInstructionTemplate" /> objects.
            </summary>
    </member>
    <member name="M:ABB.Robotics.RobotStudio.Stations.RsInstructionTemplateCollection.Add(ABB.Robotics.RobotStudio.Stations.RsInstructionTemplate)">
      <summary>
            Adds a <see cref="T:ABB.Robotics.RobotStudio.Stations.RsInstructionTemplate" /> object to the collection.
            </summary>
      <param name="instructionTemplate">The <see cref="T:ABB.Robotics.RobotStudio.Stations.RsInstructionTemplate" /> to add.</param>
    </member>
    <member name="M:ABB.Robotics.RobotStudio.Stations.RsInstructionTemplateCollection.Contains(ABB.Robotics.RobotStudio.Stations.RsInstructionTemplate)"></member>
    <member name="M:ABB.Robotics.RobotStudio.Stations.RsInstructionTemplateCollection.CopyTo(ABB.Robotics.RobotStudio.Stations.RsInstructionTemplate[],System.Int32)"></member>
    <member name="M:ABB.Robotics.RobotStudio.Stations.RsInstructionTemplateCollection.CopyTo(System.Array,System.Int32)"></member>
    <member name="P:ABB.Robotics.RobotStudio.Stations.RsInstructionTemplateCollection.Count"></member>
    <member name="M:ABB.Robotics.RobotStudio.Stations.RsInstructionTemplateCollection.GetEnumerator"></member>
    <member name="P:ABB.Robotics.RobotStudio.Stations.RsInstructionTemplateCollection.IsSynchronized"></member>
    <member name="P:ABB.Robotics.RobotStudio.Stations.RsInstructionTemplateCollection.Item(System.Int32)"></member>
    <member name="P:ABB.Robotics.RobotStudio.Stations.RsInstructionTemplateCollection.Parent"></member>
    <member name="M:ABB.Robotics.RobotStudio.Stations.RsInstructionTemplateCollection.Remove(ABB.Robotics.RobotStudio.Stations.RsInstructionTemplate)">
      <summary>
            Removes a <see cref="T:ABB.Robotics.RobotStudio.Stations.RsInstructionTemplate" /> object from the collection.
            </summary>
      <param name="instructionTemplate">The <see cref="T:ABB.Robotics.RobotStudio.Stations.RsInstructionTemplate" /> to remove.</param>
    </member>
    <member name="P:ABB.Robotics.RobotStudio.Stations.RsInstructionTemplateCollection.SyncRoot"></member>
    <member name="M:ABB.Robotics.RobotStudio.Stations.RsInstructionTemplateCollection.ToArray"></member>
    <member name="M:ABB.Robotics.RobotStudio.Stations.RsInstructionTemplateCollection.TryGetInstructionDescription(System.String,ABB.Robotics.RobotStudio.Stations.RsInstructionTemplate@)">
      <summary>Gets the template with the specified name.</summary>
      <param name="name">The name of the template to get.</param>
      <param name="instructionTemplate">When this method returns, contains the template associated with the specified name,
            if the name is found; otherwise, null.</param>
      <returns>true if the RsInstructionTemplateCollection contains an element with the specified name; otherwise, false.</returns>
      <exception cref="T:System.ArgumentException">name is a null reference.</exception>
    </member>
    <member name="T:ABB.Robotics.RobotStudio.Stations.RsIrc5Controller"></member>
    <member name="M:ABB.Robotics.RobotStudio.Stations.RsIrc5Controller.#ctor(System.String)">
      <summary>
            Creates a new RsIrc5Controller
            </summary>
      <param name="systemPath">Path to the Virtual Controller system directory</param>
    </member>
    <member name="M:ABB.Robotics.RobotStudio.Stations.RsIrc5Controller.Assert(System.Boolean)"></member>
    <member name="M:ABB.Robotics.RobotStudio.Stations.RsIrc5Controller.AssociateMechanismWithMechanicalUnits(ABB.Robotics.RobotStudio.Stations.Mechanism,ABB.Robotics.RobotStudio.Stations.RsMechanicalUnit[],System.Boolean)">
      <summary>
            Associates a mechanism to one or several mechunits. 
            </summary>
      <param name="mechanism">The mechanism to be associated with the mechanical units</param>
      <param name="mechanicalUnits">An array with the affected mechanical units</param>
      <param name="updateTransform">Boolean to be set to true if the mechanism should be alogned with the baseframe of the mechanical unit</param>
    </member>
    <member name="M:ABB.Robotics.RobotStudio.Stations.RsIrc5Controller.ChangeMechanismInMechanicalUnits(ABB.Robotics.RobotStudio.Stations.Mechanism,ABB.Robotics.RobotStudio.Stations.RsMechanicalUnit[])">
      <summary>
            Changes the association from one or several mechunits from a mechanism to an other mechanism
            </summary>
      <param name="mechanism">The mechanism to be associated with the mechanical units</param>
      <param name="mechanicalUnits">An array with the affected mechanical units</param>
    </member>
    <member name="P:ABB.Robotics.RobotStudio.Stations.RsIrc5Controller.ControllerConnection">
      <summary>
            Internal use only
            </summary>
    </member>
    <member name="P:ABB.Robotics.RobotStudio.Stations.RsIrc5Controller.ConveyorEncoderUnits"></member>
    <member name="M:ABB.Robotics.RobotStudio.Stations.RsIrc5Controller.FindMechanicalUnitsByMechanism(ABB.Robotics.RobotStudio.Stations.Mechanism)"></member>
    <member name="M:ABB.Robotics.RobotStudio.Stations.RsIrc5Controller.FindMechanicalUnitsByTask(ABB.Robotics.RobotStudio.Stations.RsTask)"></member>
    <member name="P:ABB.Robotics.RobotStudio.Stations.RsIrc5Controller.InformationStream">
      <summary>
            Gets the <see cref="P:ABB.Robotics.RobotStudio.Stations.RsIrc5Controller.InformationStream" /> objects which can be used to subscribe on events that are synchronized with robot motion.
            </summary>
    </member>
    <member name="P:ABB.Robotics.RobotStudio.Stations.RsIrc5Controller.MechanicalUnits"></member>
    <member name="P:ABB.Robotics.RobotStudio.Stations.RsIrc5Controller.Name">
      <summary>
            Gets or set the name for this RsIrc5Controller object.
            </summary>
    </member>
    <member name="P:ABB.Robotics.RobotStudio.Stations.RsIrc5Controller.NonMotionTasks"></member>
    <member name="P:ABB.Robotics.RobotStudio.Stations.RsIrc5Controller.Parent">
      <summary>
            The Parent property returns a reference to the parent Station object.
            </summary>
    </member>
    <member name="P:ABB.Robotics.RobotStudio.Stations.RsIrc5Controller.ProcessTime"></member>
    <member name="P:ABB.Robotics.RobotStudio.Stations.RsIrc5Controller.RunMode">
      <summary>
            The number of execution cycles to be used when running a simulation.
            </summary>
      <returns>Number of cycles (1-32767), <b>Forever</b> (-1) or <b>AsIs</b> (-3).</returns>
    </member>
    <member name="M:ABB.Robotics.RobotStudio.Stations.RsIrc5Controller.SetFrameToTask(ABB.Robotics.RobotStudio.Stations.RsTask,ABB.Robotics.Math.Matrix4)"></member>
    <member name="M:ABB.Robotics.RobotStudio.Stations.RsIrc5Controller.SetTaskFrameTransform(ABB.Robotics.RobotStudio.Stations.RsTask,ABB.Robotics.Math.Matrix4,System.Boolean)"></member>
    <member name="M:ABB.Robotics.RobotStudio.Stations.RsIrc5Controller.StartAsync(ABB.Robotics.RobotStudio.Stations.VirtualControllerRestartMode,System.Collections.Generic.IEnumerable{ABB.Robotics.RobotStudio.Stations.Mechanism})">
      <summary>
            Starts (or restarts) the Virtual Controller
            </summary>
    </member>
    <member name="M:ABB.Robotics.RobotStudio.Stations.RsIrc5Controller.StartAsync(ABB.Robotics.RobotStudio.Stations.VirtualControllerRestartMode,System.Collections.Generic.IEnumerable{ABB.Robotics.RobotStudio.Stations.Mechanism},System.Boolean)">
      <summary>
            Starts (or restarts) the Virtual Controller
            </summary>
    </member>
    <member name="P:ABB.Robotics.RobotStudio.Stations.RsIrc5Controller.StopAtBreakpoints">
      <summary>
            Returns if program execution shall stop at breakpoints or not.
            </summary>
      <returns>True if execution stops at breakpoints, false if not.</returns>
    </member>
    <member name="P:ABB.Robotics.RobotStudio.Stations.RsIrc5Controller.SystemId"></member>
    <member name="P:ABB.Robotics.RobotStudio.Stations.RsIrc5Controller.SystemPath"></member>
    <member name="E:ABB.Robotics.RobotStudio.Stations.RsIrc5Controller.SystemStateChanged"></member>
    <member name="P:ABB.Robotics.RobotStudio.Stations.RsIrc5Controller.Tasks"></member>
    <member name="M:ABB.Robotics.RobotStudio.Stations.RsIrc5Controller.ValidateControllerContent"></member>
    <member name="P:ABB.Robotics.RobotStudio.Stations.RsIrc5Controller.Visible"></member>
    <member name="T:ABB.Robotics.RobotStudio.Stations.RsIrc5ControllerCollection"></member>
    <member name="M:ABB.Robotics.RobotStudio.Stations.RsIrc5ControllerCollection.Add(ABB.Robotics.RobotStudio.Stations.RsIrc5Controller)"></member>
    <member name="M:ABB.Robotics.RobotStudio.Stations.RsIrc5ControllerCollection.Contains(ABB.Robotics.RobotStudio.Stations.RsIrc5Controller)"></member>
    <member name="M:ABB.Robotics.RobotStudio.Stations.RsIrc5ControllerCollection.CopyTo(ABB.Robotics.RobotStudio.Stations.RsIrc5Controller[],System.Int32)"></member>
    <member name="M:ABB.Robotics.RobotStudio.Stations.RsIrc5ControllerCollection.CopyTo(System.Array,System.Int32)"></member>
    <member name="P:ABB.Robotics.RobotStudio.Stations.RsIrc5ControllerCollection.Count"></member>
    <member name="M:ABB.Robotics.RobotStudio.Stations.RsIrc5ControllerCollection.GetEnumerator"></member>
    <member name="P:ABB.Robotics.RobotStudio.Stations.RsIrc5ControllerCollection.IsSynchronized"></member>
    <member name="P:ABB.Robotics.RobotStudio.Stations.RsIrc5ControllerCollection.Item(System.Int32)"></member>
    <member name="P:ABB.Robotics.RobotStudio.Stations.RsIrc5ControllerCollection.Parent"></member>
    <member name="M:ABB.Robotics.RobotStudio.Stations.RsIrc5ControllerCollection.RemoveAsync(ABB.Robotics.RobotStudio.Stations.RsIrc5Controller)">
      <summary>
            Removes the virtual controller from the station. If the controller is running, it will be stopped as a result.
            </summary>
    </member>
    <member name="P:ABB.Robotics.RobotStudio.Stations.RsIrc5ControllerCollection.SyncRoot"></member>
    <member name="M:ABB.Robotics.RobotStudio.Stations.RsIrc5ControllerCollection.ToArray"></member>
    <member name="M:ABB.Robotics.RobotStudio.Stations.RsIrc5ControllerCollection.TryGetIrc5Controller(System.String,ABB.Robotics.RobotStudio.Stations.RsIrc5Controller@)">
      <summary>Gets the controller with the specified name.</summary>
      <param name="name">The name of the controller to get.</param>
      <param name="irc5Controller">When this method returns, contains the path associated with the specified name,
            if the name is found; otherwise, null.</param>
      <returns>true if the RsIrc5ControllerCollection contains an element with the specified name; otherwise, false.</returns>
      <exception cref="T:System.ArgumentException">name is a null reference.</exception>
    </member>
    <member name="T:ABB.Robotics.RobotStudio.Stations.RsIrc5ConveyorEncoderUnit">
      <summary>
            Represents the IRC5 Conveyor Encoder Unit that is connected to a controller that has the option Conveyor Tracking.
            This class provides access to conveyor tracking specific controller system parameters and I/O signals.
            </summary>
    </member>
    <member name="P:ABB.Robotics.RobotStudio.Stations.RsIrc5ConveyorEncoderUnit.ConnectedSignalName">
      <summary>
            Returns the name of the encoders connected signal
            </summary>
      <returns>Signal name</returns>
    </member>
    <member name="P:ABB.Robotics.RobotStudio.Stations.RsIrc5ConveyorEncoderUnit.ConnectionState">
      <summary>
            Sets or gets the connection status of the encoder, if true an object is connected
            </summary>
      <returns>Connection State</returns>
    </member>
    <member name="P:ABB.Robotics.RobotStudio.Stations.RsIrc5ConveyorEncoderUnit.DropWobjSignalName">
      <summary>
            Returns the name of the encoders Drop Workobject signal
            </summary>
      <returns>Signal name</returns>
    </member>
    <member name="P:ABB.Robotics.RobotStudio.Stations.RsIrc5ConveyorEncoderUnit.MaximumDistance">
      <summary>
            Sets or gets the length of the Maximum Distance (cfg parameter)
            </summary>
      <returns />
    </member>
    <member name="P:ABB.Robotics.RobotStudio.Stations.RsIrc5ConveyorEncoderUnit.MechanicalUnit">
      <summary>
            Returns the mechanical unit associated with the encoder unit
            </summary>
      <returns>RsMechanicalUnit</returns>
    </member>
    <member name="P:ABB.Robotics.RobotStudio.Stations.RsIrc5ConveyorEncoderUnit.MinimumDistance">
      <summary>
            Sets or gets the length of the Minimum Distance (cfg parameter)
            </summary>
      <returns />
    </member>
    <member name="P:ABB.Robotics.RobotStudio.Stations.RsIrc5ConveyorEncoderUnit.NullSpeedSignalName">
      <summary>
            Returns the name of the encoders null signal
            </summary>
      <returns>Signal name</returns>
    </member>
    <member name="P:ABB.Robotics.RobotStudio.Stations.RsIrc5ConveyorEncoderUnit.PassedStartWindowSignalName">
      <summary>
            Returns the name of the encoders Passed Start Window signal
            </summary>
      <returns>Signal name</returns>
    </member>
    <member name="P:ABB.Robotics.RobotStudio.Stations.RsIrc5ConveyorEncoderUnit.PositionSignalName">
      <summary>
            Returns the name of the encoders position signal
            </summary>
      <returns>Signal name</returns>
    </member>
    <member name="P:ABB.Robotics.RobotStudio.Stations.RsIrc5ConveyorEncoderUnit.QueueTrackingDistance">
      <summary>
            Sets or gets the length of the QueueTrackingDistance (cfg parameter)
            </summary>
      <returns />
    </member>
    <member name="P:ABB.Robotics.RobotStudio.Stations.RsIrc5ConveyorEncoderUnit.Speed">
      <summary>
            Gets or sets the speed of the conveyor.
            </summary>
    </member>
    <member name="P:ABB.Robotics.RobotStudio.Stations.RsIrc5ConveyorEncoderUnit.StartWindowWidth">
      <summary>
            Sets or gets the length of the start window
            </summary>
      <returns />
    </member>
    <member name="P:ABB.Robotics.RobotStudio.Stations.RsIrc5ConveyorEncoderUnit.WaitWobjSignalName">
      <summary>
            Returns the name of the encoders Wait Workobject signal
            </summary>
      <returns>Signal name</returns>
    </member>
    <member name="P:ABB.Robotics.RobotStudio.Stations.RsIrc5ConveyorEncoderUnit.VelocitySignalName">
      <summary>
            Returns the name of the encoders velocity signal
            </summary>
      <returns>Signal name</returns>
    </member>
    <member name="T:ABB.Robotics.RobotStudio.Stations.RsIrc5ConveyorEncoderUnitCollection"></member>
    <member name="M:ABB.Robotics.RobotStudio.Stations.RsIrc5ConveyorEncoderUnitCollection.Contains(ABB.Robotics.RobotStudio.Stations.RsIrc5ConveyorEncoderUnit)"></member>
    <member name="M:ABB.Robotics.RobotStudio.Stations.RsIrc5ConveyorEncoderUnitCollection.Contains(System.String)"></member>
    <member name="M:ABB.Robotics.RobotStudio.Stations.RsIrc5ConveyorEncoderUnitCollection.CopyTo(ABB.Robotics.RobotStudio.Stations.RsIrc5ConveyorEncoderUnit[],System.Int32)"></member>
    <member name="M:ABB.Robotics.RobotStudio.Stations.RsIrc5ConveyorEncoderUnitCollection.CopyTo(System.Array,System.Int32)"></member>
    <member name="P:ABB.Robotics.RobotStudio.Stations.RsIrc5ConveyorEncoderUnitCollection.Count"></member>
    <member name="M:ABB.Robotics.RobotStudio.Stations.RsIrc5ConveyorEncoderUnitCollection.GetEnumerator"></member>
    <member name="P:ABB.Robotics.RobotStudio.Stations.RsIrc5ConveyorEncoderUnitCollection.IsSynchronized"></member>
    <member name="P:ABB.Robotics.RobotStudio.Stations.RsIrc5ConveyorEncoderUnitCollection.Item(System.Int32)"></member>
    <member name="P:ABB.Robotics.RobotStudio.Stations.RsIrc5ConveyorEncoderUnitCollection.Item(System.String)"></member>
    <member name="P:ABB.Robotics.RobotStudio.Stations.RsIrc5ConveyorEncoderUnitCollection.Parent"></member>
    <member name="P:ABB.Robotics.RobotStudio.Stations.RsIrc5ConveyorEncoderUnitCollection.SyncRoot"></member>
    <member name="M:ABB.Robotics.RobotStudio.Stations.RsIrc5ConveyorEncoderUnitCollection.ToArray"></member>
    <member name="M:ABB.Robotics.RobotStudio.Stations.RsIrc5ConveyorEncoderUnitCollection.TryGetIrc5ConveyorEncoderUnit(System.String,ABB.Robotics.RobotStudio.Stations.RsIrc5ConveyorEncoderUnit@)">
      <summary>Gets the conveyor encoder unit with the specified name.</summary>
      <param name="name">The name of the unit to get.</param>
      <param name="conveyorEncoderUnit">When this method returns, contains the mechunit associated with the specified name,
            if the name is found; otherwise, null.</param>
      <returns>true if the RsIrc5ConveyorEncoderUnitCollection contains an element with the specified name; otherwise, false.</returns>
      <exception cref="T:System.ArgumentException">name is a null reference.</exception>
    </member>
    <member name="T:ABB.Robotics.RobotStudio.Stations.RsJointTarget">
      <summary>
            A RsJointTarget corresponds to a <c>jointtarget</c> declaration in RAPID.
            It defines each individual axis position, for both the robot and the external axes.
            Jointtargets are used to define the positions that the robot and the external axes
            will move to with the instruction MoveAbsJ.
            </summary>
    </member>
    <member name="M:ABB.Robotics.RobotStudio.Stations.RsJointTarget.#ctor">
      <summary>
            Creates and initializes a new <see cref="T:ABB.Robotics.RobotStudio.Stations.RsJointTarget" /> object.
            </summary>
      <returns>The new <see cref="T:ABB.Robotics.RobotStudio.Stations.RsJointTarget" /> object.</returns>
    </member>
    <member name="P:ABB.Robotics.RobotStudio.Stations.RsJointTarget.FrameSize">
      <summary>
            Gets or set the size of the graphical representation of the RsToolData.
            </summary>
    </member>
    <member name="M:ABB.Robotics.RobotStudio.Stations.RsJointTarget.GetExternalAxes(System.Boolean)">
      <summary>
            Gets the <see cref="T:ABB.Robotics.RobotStudio.Stations.ExternalAxisValues" /> of the jointtarget.
            </summary>
      <param name="convertFromRapidDataToSI">Specifies whether the ExternalAxisValues should be converted from the RAPID data format to SI or not.</param>
      <returns>
            The <see cref="T:ABB.Robotics.RobotStudio.Stations.ExternalAxisValues" /> of the jointtarget.
            </returns>
    </member>
    <member name="M:ABB.Robotics.RobotStudio.Stations.RsJointTarget.GetJointValues(ABB.Robotics.RobotStudio.Stations.Mechanism,System.Boolean)"></member>
    <member name="M:ABB.Robotics.RobotStudio.Stations.RsJointTarget.GetRobotAxes(System.Boolean)">
      <summary>
            Gets the <see cref="T:ABB.Robotics.RobotStudio.Stations.RobotAxisValues" /> of the jointtarget.
            </summary>
      <param name="convertFromRapidDataToSI">Specifies whether the RobotAxisValues should be converted from the RAPID data format to SI or not.</param>
      <returns>
            The <see cref="T:ABB.Robotics.RobotStudio.Stations.RobotAxisValues" /> of the jointtarget
            </returns>
    </member>
    <member name="M:ABB.Robotics.RobotStudio.Stations.RsJointTarget.Highlight(System.Drawing.Color)">
      <summary>
            Sets the highlight color of the target.
            </summary>
    </member>
    <member name="P:ABB.Robotics.RobotStudio.Stations.RsJointTarget.IsInline">
      <summary>
            Gets or sets whether the <see cref="T:ABB.Robotics.RobotStudio.Stations.RsJointTarget" /> will be decalared inline in the RAPID when syncronized.
            </summary>
    </member>
    <member name="M:ABB.Robotics.RobotStudio.Stations.RsJointTarget.JumpTo">
      <summary>
            Jumps the mechanism of the task that the jointtraget belongs to, to the position of the jointtarget.
            </summary>
      <returns>
            True if it is possible to jump to the target and the jump succeded, otherwise false.
            </returns>
    </member>
    <member name="M:ABB.Robotics.RobotStudio.Stations.RsJointTarget.JumpTo(System.Boolean)">
      <summary>
            Jumps the mechanism of the task that the jointtraget belongs to, to the position of the jointtarget. Optionally updates the joint values in the virtual controller. Updating the joint values in the controller is time consuning compared to only updating the <see cref="T:ABB.Robotics.RobotStudio.Stations.Mechanism" /> joint value. If you need to frequently call this method, it is recomended to update the joint values in the controller, only for the last call.
            </summary>
      <param name="updateController">Specifies if the joint values in the controller shall be updated in addition to the joint values of the mechanism.</param>
      <returns>
            True if it is possible to jump to the target and the jump succeded, otherwise false.
            </returns>
    </member>
    <member name="P:ABB.Robotics.RobotStudio.Stations.RsJointTarget.Name">
      <summary>
            Gets or sets the name of the object
            </summary>
    </member>
    <member name="M:ABB.Robotics.RobotStudio.Stations.RsJointTarget.ResetHighlight">
      <summary>
            Resets the highlight color of the target to the default color.
            </summary>
    </member>
    <member name="M:ABB.Robotics.RobotStudio.Stations.RsJointTarget.SetExternalAxes(ABB.Robotics.RobotStudio.Stations.ExternalAxisValues,System.Boolean)">
      <summary>
            Sets the <see cref="T:ABB.Robotics.RobotStudio.Stations.ExternalAxisValues" /> of the jointtarget.
            </summary>
      <param name="value">The <see cref="T:ABB.Robotics.RobotStudio.Stations.ExternalAxisValues" /> to be set for the jointtarget.</param>
      <param name="convertFromSIToRapidData">Specifies whether the ExternalAxisValues should be converted from the SI to RAPID data format or not.</param>
    </member>
    <member name="M:ABB.Robotics.RobotStudio.Stations.RsJointTarget.SetRobotAxes(ABB.Robotics.RobotStudio.Stations.RobotAxisValues,ABB.Robotics.RobotStudio.Stations.Mechanism,System.Boolean)"></member>
    <member name="M:ABB.Robotics.RobotStudio.Stations.RsJointTarget.SetRobotAxes(ABB.Robotics.RobotStudio.Stations.RobotAxisValues,System.Boolean)">
      <summary>
            Sets the <see cref="T:ABB.Robotics.RobotStudio.Stations.RobotAxisValues" /> of the jointtarget.
            </summary>
      <param name="value">The <see cref="T:ABB.Robotics.RobotStudio.Stations.RobotAxisValues" /> to be set for the jointtarget.</param>
      <param name="convertFromSIToRapidData">Specifies whether the RobotAxisValues should be converted from the SI to RAPID data format or not.</param>
    </member>
    <member name="P:ABB.Robotics.RobotStudio.Stations.RsJointTarget.ShowName">
      <summary>
            Gets or sets a value indicating whether the name of the JointTarge will
            be displayed in the graphics.
            </summary>
    </member>
    <member name="P:ABB.Robotics.RobotStudio.Stations.RsJointTarget.Visible">
      <summary>
            Geta or sets a value specifying whether the joint target should be visible in the graphics or not.
            </summary>
    </member>
    <member name="T:ABB.Robotics.RobotStudio.Stations.RsLoadData">
      <summary>
            Loaddata is used to describe loads attached to the mechanical interface of the robot
            Load data usually defines the payload (grip load is defined by the instruction Grip-
            Load) of the robot, i.e. the load held in the robot gripper.
            The tool load is specified in the tool data (tooldata) which includes load data.
            </summary>
    </member>
    <member name="M:ABB.Robotics.RobotStudio.Stations.RsLoadData.#ctor(System.Double,ABB.Robotics.Math.Vector3,ABB.Robotics.Math.Quaternion,ABB.Robotics.Math.Vector3)">
      <summary> 
             Initializes a new <see cref="T:ABB.Robotics.RobotStudio.Stations.RsLoadData" /> instance with the specified parameters.
             </summary>
      <param name="mass">The weight of the load.</param>
      <param name="cog">The centre of gravity of a tool load expressed in the wrist coordinate system.</param>
      <param name="aom">The orientation of the coordinate system defined by the inertial axes of the tool load.</param>
      <param name="inertia">The moment of inertia of the load around the x-, y- and z-axis of the tool load or payload
            coordinate system.</param>
    </member>
    <member name="P:ABB.Robotics.RobotStudio.Stations.RsLoadData.Aom">
      <summary>
            The orientation of the coordinate system defined by the inertial axes of the tool
            load. Expressed in the wrist coordinate system as a quaternion (q1, q2, q3, q4). If
            a stationary tool is used, it means the inertial axes for the tool holding the work
            object.
            </summary>
    </member>
    <member name="P:ABB.Robotics.RobotStudio.Stations.RsLoadData.Cog">
      <summary>
            The centre of gravity of a tool load expressed in the wrist coordinate system.
            If a stationary tool is used, it means the centre of gravity for the tool holding the
            work object.
            </summary>
    </member>
    <member name="M:ABB.Robotics.RobotStudio.Stations.RsLoadData.Equals(System.Object)">
      <summary>
            Indicates whether this instance and a specified object are equal.
            </summary>
      <param name="obj">Another object to compare to.</param>
      <returns>
        <b>True</b> if <b>obj</b> and this instance are the same type and represent the same value; otherwise, <b>false</b>.
            </returns>
    </member>
    <member name="M:ABB.Robotics.RobotStudio.Stations.RsLoadData.GetHashCode"></member>
    <member name="P:ABB.Robotics.RobotStudio.Stations.RsLoadData.Inertia">
      <summary>
            The moment of inertia of the load around the x-, y- and z-axis of the tool load or payload
            coordinate system.
            </summary>
    </member>
    <member name="P:ABB.Robotics.RobotStudio.Stations.RsLoadData.Mass">
      <summary>
            Gets or Sets the weight of the load.
            </summary>
    </member>
    <member name="M:ABB.Robotics.RobotStudio.Stations.RsLoadData.op_Equality(ABB.Robotics.RobotStudio.Stations.RsLoadData,ABB.Robotics.RobotStudio.Stations.RsLoadData)">
      <summary>
            Compares the two RsLoadData objects for equality.
            </summary>
      <param name="lhs">The first object to compare.</param>
      <param name="rhs">The second object to compare.</param>
      <returns>
        <b>True</b> if <b>lhs</b> and <b>rhs</b> represent the same values; otherwise, <b>false</b>.
            </returns>
    </member>
    <member name="M:ABB.Robotics.RobotStudio.Stations.RsLoadData.op_Inequality(ABB.Robotics.RobotStudio.Stations.RsLoadData,ABB.Robotics.RobotStudio.Stations.RsLoadData)">
      <summary>
            Compares the two RsLoadData objects for inequality.
            </summary>
      <param name="lhs">The first object to compare.</param>
      <param name="rhs">The second object to compare.</param>
      <returns>
        <b>True</b> if <b>lhs</b> and <b>rhs</b> represent different values; otherwise, <b>false</b>.
            </returns>
    </member>
    <member name="T:ABB.Robotics.RobotStudio.Stations.RsMechanicalUnit"></member>
    <member name="P:ABB.Robotics.RobotStudio.Stations.RsMechanicalUnit.ActivationAllowed"></member>
    <member name="P:ABB.Robotics.RobotStudio.Stations.RsMechanicalUnit.ActivationMode"></member>
    <member name="E:ABB.Robotics.RobotStudio.Stations.RsMechanicalUnit.ActivationModeChanged"></member>
    <member name="P:ABB.Robotics.RobotStudio.Stations.RsMechanicalUnit.BaseFrame"></member>
    <member name="P:ABB.Robotics.RobotStudio.Stations.RsMechanicalUnit.DeactivationAllowed"></member>
    <member name="M:ABB.Robotics.RobotStudio.Stations.RsMechanicalUnit.GetActiveJoints"></member>
    <member name="M:ABB.Robotics.RobotStudio.Stations.RsMechanicalUnit.GetBaseFrameMovedBy"></member>
    <member name="M:ABB.Robotics.RobotStudio.Stations.RsMechanicalUnit.GetLogicalAxis"></member>
    <member name="M:ABB.Robotics.RobotStudio.Stations.RsMechanicalUnit.GetMechanismJointIndex"></member>
    <member name="M:ABB.Robotics.RobotStudio.Stations.RsMechanicalUnit.GetRobotSingleName"></member>
    <member name="P:ABB.Robotics.RobotStudio.Stations.RsMechanicalUnit.MechanicalUnitType"></member>
    <member name="P:ABB.Robotics.RobotStudio.Stations.RsMechanicalUnit.Mechanism"></member>
    <member name="M:ABB.Robotics.RobotStudio.Stations.RsMechanicalUnit.SetBaseFrame(ABB.Robotics.RobotStudio.Stations.Transform,System.Boolean)"></member>
    <member name="M:ABB.Robotics.RobotStudio.Stations.RsMechanicalUnit.SetBaseFrameAsync(ABB.Robotics.Math.Matrix4,System.Boolean)"></member>
    <member name="M:ABB.Robotics.RobotStudio.Stations.RsMechanicalUnit.SetBaseFrameMovedBy(ABB.Robotics.RobotStudio.Stations.RsMechanicalUnit)"></member>
    <member name="T:ABB.Robotics.RobotStudio.Stations.RsMechanicalUnitCollection"></member>
    <member name="M:ABB.Robotics.RobotStudio.Stations.RsMechanicalUnitCollection.Contains(ABB.Robotics.RobotStudio.Stations.RsMechanicalUnit)"></member>
    <member name="M:ABB.Robotics.RobotStudio.Stations.RsMechanicalUnitCollection.Contains(System.String)"></member>
    <member name="M:ABB.Robotics.RobotStudio.Stations.RsMechanicalUnitCollection.CopyTo(ABB.Robotics.RobotStudio.Stations.RsMechanicalUnit[],System.Int32)"></member>
    <member name="M:ABB.Robotics.RobotStudio.Stations.RsMechanicalUnitCollection.CopyTo(System.Array,System.Int32)"></member>
    <member name="P:ABB.Robotics.RobotStudio.Stations.RsMechanicalUnitCollection.Count"></member>
    <member name="M:ABB.Robotics.RobotStudio.Stations.RsMechanicalUnitCollection.GetEnumerator"></member>
    <member name="P:ABB.Robotics.RobotStudio.Stations.RsMechanicalUnitCollection.IsSynchronized"></member>
    <member name="P:ABB.Robotics.RobotStudio.Stations.RsMechanicalUnitCollection.Item(System.Int32)"></member>
    <member name="P:ABB.Robotics.RobotStudio.Stations.RsMechanicalUnitCollection.Item(System.String)"></member>
    <member name="P:ABB.Robotics.RobotStudio.Stations.RsMechanicalUnitCollection.Parent"></member>
    <member name="P:ABB.Robotics.RobotStudio.Stations.RsMechanicalUnitCollection.SyncRoot"></member>
    <member name="M:ABB.Robotics.RobotStudio.Stations.RsMechanicalUnitCollection.ToArray"></member>
    <member name="M:ABB.Robotics.RobotStudio.Stations.RsMechanicalUnitCollection.TryGetMechanicalUnit(System.String,ABB.Robotics.RobotStudio.Stations.RsMechanicalUnit@)">
      <summary>Gets the mechunit with the specified name.</summary>
      <param name="name">The name of the mechunit to get.</param>
      <param name="mechanicalUnit">When this method returns, contains the mechunit associated with the specified name,
            if the name is found; otherwise, null.</param>
      <returns>true if the RsMechanicalUnitCollection contains an element with the specified name; otherwise, false.</returns>
      <exception cref="T:System.ArgumentException">name is a null reference.</exception>
    </member>
    <member name="T:ABB.Robotics.RobotStudio.Stations.RsMoveInstruction">
      <summary>
            A move instruction is an instruction for the robot to move to a specified target in a specified manner.
            </summary>
    </member>
    <member name="M:ABB.Robotics.RobotStudio.Stations.RsMoveInstruction.#ctor(ABB.Robotics.RobotStudio.Stations.RsTask,System.String,System.String,ABB.Robotics.RobotStudio.Stations.MotionType,System.String,System.String,System.String)">
      <summary>
            Initializes a new instance of the RsMoveInstruction class, which is based on the specified instruction description and template. 
            </summary>
      <param name="task">The task to create the Move Instruction for.</param>
      <param name="processDefinitionName">The name of the process definition of the Move Instruction.</param>
      <param name="processTemplateName">The name of the process template of the Move Instruction.</param>
      <param name="motionType">The <see cref="T:ABB.Robotics.RobotStudio.Stations.MotionType" /> of the Move Instruction.</param>
      <param name="wobjName">The name of the work object of the Move Instruction.</param>
      <param name="toPointName">The name of the to point ,i.e. the name of a RobTarget in the station, of the Move Instruction.</param>
      <param name="toolName">The name of the tool of the Move Instruction.</param>
      <returns>
            The new RsMoveInstruction.
            </returns>
    </member>
    <member name="M:ABB.Robotics.RobotStudio.Stations.RsMoveInstruction.#ctor(ABB.Robotics.RobotStudio.Stations.RsTask,System.String,System.String,System.String)">
      <summary>
            Creates and initializes a new RsMoveInstruction object that uses a joint position, no consideration is made regarding tool or workobject
            </summary>
      <param name="task">The task to create the Move Instruction for</param>
      <param name="processDefinitionName">The name of the process definition of the  Move Instruction</param>
      <param name="processTemplateName">The name of the process template of the  Move Instruction</param>
      <param name="jointTargetName">The name of a joint target in the station</param>
      <returns>
            The new RsMoveInstruction.
            </returns>
    </member>
    <member name="M:ABB.Robotics.RobotStudio.Stations.RsMoveInstruction.#ctor(ABB.Robotics.RobotStudio.Stations.RsTask,System.String,System.String,System.String,System.String,System.String,System.String)">
      <summary>
            Creates and initializes a new RsMoveInstruction object with circular motiontype 
            </summary>
      <param name="task">The task to create the Move Instruction for</param>
      <param name="processDefinitionName">The name of the process definition of the  Move Instruction</param>
      <param name="processTemplateName">The name of the process template of the  Move Instruction</param>
      <param name="wobjName">The name of the work object of the Move Instruction</param>
      <param name="cirPointName">The name of the cir point ,i.e. the name of a RobTarget in the station, of the Move Instruction</param>
      <param name="toPointName">The name of the to point ,i.e. the name of a RobTarget in the station, of the Move Instruction</param>
      <param name="toolName">The name of the tool of the Move Instruction</param>
      <returns>
            The new RsMoveInstruction.
            </returns>
    </member>
    <member name="P:ABB.Robotics.RobotStudio.Stations.RsMoveInstruction.Color">
      <summary>
            Gets or sets the color of the path segment that this instruction corresponds to
            </summary>
    </member>
    <member name="M:ABB.Robotics.RobotStudio.Stations.RsMoveInstruction.GetCirPointArgument">
      <summary>
            Gets the <see cref="T:ABB.Robotics.RobotStudio.Stations.RsInstructionArgument" /> corresponding to the circ point argument of the Move Instruction.
            </summary>
      <returns>
            The RsInstructionArgument.
            </returns>
    </member>
    <member name="M:ABB.Robotics.RobotStudio.Stations.RsMoveInstruction.GetProcessTemplate">
      <summary>
            Gets the <see cref="T:ABB.Robotics.RobotStudio.Stations.RsProcessTemplate" /> corresponding to the to process template argument of the Move Instruction.
            </summary>
      <returns>
            The RsProcessTemplate.
            </returns>
    </member>
    <member name="M:ABB.Robotics.RobotStudio.Stations.RsMoveInstruction.GetToJointPosArgument">
      <summary>
            Gets the <see cref="T:ABB.Robotics.RobotStudio.Stations.RsInstructionArgument" /> corresponding to the to joint pos argument of the Move Instruction.
            </summary>
      <returns>
            The RsInstructionArgument.
            </returns>
    </member>
    <member name="M:ABB.Robotics.RobotStudio.Stations.RsMoveInstruction.GetToolArgument">
      <summary>
            Gets the <see cref="T:ABB.Robotics.RobotStudio.Stations.RsInstructionArgument" /> corresponding to the to tool argument of the Move Instruction.
            </summary>
      <returns>
            The RsInstructionArgument.
            </returns>
    </member>
    <member name="M:ABB.Robotics.RobotStudio.Stations.RsMoveInstruction.GetToPointArgument">
      <summary>
            Gets the <see cref="T:ABB.Robotics.RobotStudio.Stations.RsInstructionArgument" /> corresponding to the to point argument of the Move Instruction.
            </summary>
      <returns>
            The RsInstructionArgument.
            </returns>
    </member>
    <member name="M:ABB.Robotics.RobotStudio.Stations.RsMoveInstruction.GetViaPointArgument">
      <summary>
            Gets the <see cref="T:ABB.Robotics.RobotStudio.Stations.RsInstructionArgument" /> corresponding to the to via point argument of the Move Instruction.
            </summary>
      <returns>
            The RsInstructionArgument.
            </returns>
    </member>
    <member name="M:ABB.Robotics.RobotStudio.Stations.RsMoveInstruction.GetWObjArgument">
      <summary>
            Gets the <see cref="T:ABB.Robotics.RobotStudio.Stations.RsInstructionArgument" /> corresponding to the wobj argument of the Move Instruction.
            </summary>
      <returns>
            The RsInstructionArgument.
            </returns>
    </member>
    <member name="M:ABB.Robotics.RobotStudio.Stations.RsMoveInstruction.Highlight(System.Drawing.Color)">
      <summary>
            Sets the highlight color of the graphical representation.
            </summary>
    </member>
    <member name="M:ABB.Robotics.RobotStudio.Stations.RsMoveInstruction.JumpTo">
      <summary>
            Jumps the mechanism, of corresponding task, to the position of the move instruction
            </summary>
      <returns>
            True if the operation is successfull, otherwise false.
            </returns>
    </member>
    <member name="M:ABB.Robotics.RobotStudio.Stations.RsMoveInstruction.JumpTo(System.Boolean)">
      <summary>
            Jumps the mechanism, of corresponding task, to the position of the move instruction. Optionally updates the joint values in the virtual controller. Updating the joint values in the controller is time consuning compared to only updating the <see cref="T:ABB.Robotics.RobotStudio.Stations.Mechanism" /> joint value. If you need to frequently call this method, it is recomended to update the joint values in the controller, only for the last call.
            </summary>
      <param name="updateController">Specifies if the joint values in the controller shall be updated in addition to the joint values of the mechanism.</param>
      <returns>
            True if the operation is successfull, otherwise false.
            </returns>
    </member>
    <member name="M:ABB.Robotics.RobotStudio.Stations.RsMoveInstruction.MoveTo">
      <summary>
            Moves the mechanism, of corresponding task, to the position of the move-
            instruction using its settings. A temporary RAPID program is created on
            the controller and is executed.
            </summary>
      <returns>
            true/false for allowed/not allowed to execute the operation.
            </returns>
      <exception cref="T:System.ArgumentException" />
      <exception cref="T:System.ArgumentNullException" />
      <exception cref="T:System.IO.DirectoryNotFoundException" />
      <exception cref="T:System.IO.FileNotFoundException" />
      <exception cref="T:System.UnauthorizedAccessException" />
      <exception cref="T:System.IO.IOException" />
    </member>
    <member name="M:ABB.Robotics.RobotStudio.Stations.RsMoveInstruction.MoveTo(System.Collections.ArrayList)">
      <summary>
            Moves the mechanism, of corresponding task, to the position of the move-
            instruction using its settings. A temporary RAPID program is created on
            the controller and is executed.
            The temporary RAPID program is created by using RapidSync. The synchronization log is returned from this overload.
            </summary>
      <param name="logMessageList">The list of log messages from the underlying RapidSync operation.</param>
      <returns>
            true/false for allowed/not allowed to execute the operation.
            </returns>
      <exception cref="T:System.ArgumentException" />
      <exception cref="T:System.ArgumentNullException" />
      <exception cref="T:System.IO.DirectoryNotFoundException" />
      <exception cref="T:System.IO.FileNotFoundException" />
      <exception cref="T:System.UnauthorizedAccessException" />
      <exception cref="T:System.IO.IOException" />
    </member>
    <member name="P:ABB.Robotics.RobotStudio.Stations.RsMoveInstruction.Name">
      <summary>
            Gets or Sets the name of the Move Instruction 
            </summary>
    </member>
    <member name="P:ABB.Robotics.RobotStudio.Stations.RsMoveInstruction.ProcessDefinitionName">
      <summary>
            Gets the name of the Process Definition of the Move Instruction   
            </summary>
    </member>
    <member name="P:ABB.Robotics.RobotStudio.Stations.RsMoveInstruction.ProcessTemplateName">
      <summary>
            Gets the name of the Process Template of the Move Instruction   
            </summary>
    </member>
    <member name="M:ABB.Robotics.RobotStudio.Stations.RsMoveInstruction.ResetHighlight">
      <summary>
            Resets the highlight color of the graphical representation to the default color.
            </summary>
    </member>
    <member name="P:ABB.Robotics.RobotStudio.Stations.RsMoveInstruction.Thickness">
      <summary>
            Gets or sets the thickness (in pixels) of the line, in the graphics, leading to the the Move Instruction   
            </summary>
    </member>
    <member name="T:ABB.Robotics.RobotStudio.Stations.RsMoveInstructionDescription">
      <summary>
            An instruction description that defines which arguments the instruction has.
            </summary>
    </member>
    <member name="M:ABB.Robotics.RobotStudio.Stations.RsMoveInstructionDescription.#ctor(System.String,ABB.Robotics.RobotStudio.Stations.MotionType)">
      <summary>
            Creates and initializes a new <see cref="T:ABB.Robotics.RobotStudio.Stations.RsMoveInstructionDescription" /> object.
            </summary>
      <param name="name">The name of the <see cref="T:ABB.Robotics.RobotStudio.Stations.RsMoveInstructionDescription" />.</param>
      <param name="motionType">The <see cref="P:ABB.Robotics.RobotStudio.Stations.RsMoveInstructionDescription.MotionType" /> of the <see cref="T:ABB.Robotics.RobotStudio.Stations.RsMoveInstructionDescription" />.</param>
      <returns>
            The new <see cref="T:ABB.Robotics.RobotStudio.Stations.RsMoveInstructionDescription" /> object.
            </returns>
    </member>
    <member name="P:ABB.Robotics.RobotStudio.Stations.RsMoveInstructionDescription.MotionType">
      <summary>
            Gets the <see cref="P:ABB.Robotics.RobotStudio.Stations.RsMoveInstructionDescription.MotionType" /> of the motions instruction description.
            </summary>
    </member>
    <member name="T:ABB.Robotics.RobotStudio.Stations.RsPathProcedure">
      <summary>
            A RsPathProcedure is a sequence of move and action instructions. Paths are used to make the robot move along a sequence of targets.
            A RsPathsProcedures corresponds to a to RAPID procedure and is synchronized to the virtual controller.
            </summary>
    </member>
    <member name="M:ABB.Robotics.RobotStudio.Stations.RsPathProcedure.#ctor(System.String)">
      <summary>
            Creates and initializes a new <see cref="T:ABB.Robotics.RobotStudio.Stations.RsPathProcedure" /> object.
            </summary>
      <param name="name">The name of the <see cref="T:ABB.Robotics.RobotStudio.Stations.RsPathProcedure" /> to create.</param>
      <returns>The new <see cref="T:ABB.Robotics.RobotStudio.Stations.RsPathProcedure" /> object.</returns>
    </member>
    <member name="M:ABB.Robotics.RobotStudio.Stations.RsPathProcedure.Copy">
      <summary>
            Creates a deep copy of the RsPathProcedure
            </summary>
      <returns>The new RsPathProcedure object</returns>
    </member>
    <member name="P:ABB.Robotics.RobotStudio.Stations.RsPathProcedure.DisplayName"></member>
    <member name="P:ABB.Robotics.RobotStudio.Stations.RsPathProcedure.Instructions">
      <summary>
            Gets the collection of <see cref="T:ABB.Robotics.RobotStudio.Stations.RsInstructionCollection" /> objects.
            </summary>
    </member>
    <member name="P:ABB.Robotics.RobotStudio.Stations.RsPathProcedure.Local">
      <summary>
             Gets if the RsPathProcedue is declared local in a module. (Corresponds to the LOCAL keyword in RAPID).
            </summary>
    </member>
    <member name="P:ABB.Robotics.RobotStudio.Stations.RsPathProcedure.ModuleName">
      <summary>
            Gets or sets the RAPID module name that he RsPathProcedue will have 
            when its syncronized to the VC
            </summary>
    </member>
    <member name="M:ABB.Robotics.RobotStudio.Stations.RsPathProcedure.MoveAlong">
      <summary>
            Moves the mechanism, of corresponding task, along the path procedure by
            creating a temporary RAPID program on the controller and executing it.
            </summary>
      <returns>
            true/false for allowed/not allowed to execute the operation.
            </returns>
      <exception cref="T:System.ArgumentException" />
      <exception cref="T:System.ArgumentNullException" />
      <exception cref="T:System.IO.DirectoryNotFoundException" />
      <exception cref="T:System.IO.FileNotFoundException" />
      <exception cref="T:System.UnauthorizedAccessException" />
      <exception cref="T:System.IO.IOException" />
    </member>
    <member name="M:ABB.Robotics.RobotStudio.Stations.RsPathProcedure.MoveAlong(System.Collections.ArrayList)">
      <summary>
            Moves the mechanism, of corresponding task, along the path procedure by
            creating a temporary RAPID program on the controller and executing it.
            The temporary RAPID program is created by using RapidSync. The synchronization log is returned from this overload.
            </summary>
      <param name="logMessageList">The list of log messages from the underlying RapidSync operation.</param>
      <returns>
            true/false for allowed/not allowed to execute the operation.
            </returns>
      <exception cref="T:System.ArgumentException" />
      <exception cref="T:System.ArgumentNullException" />
      <exception cref="T:System.IO.DirectoryNotFoundException" />
      <exception cref="T:System.IO.FileNotFoundException" />
      <exception cref="T:System.UnauthorizedAccessException" />
      <exception cref="T:System.IO.IOException" />
    </member>
    <member name="M:ABB.Robotics.RobotStudio.Stations.RsPathProcedure.MoveAlongAsync">
      <summary>
            Moves the mechanism, of corresponding task, along the path procedure by
            creating a temporary RAPID program on the controller and executing it.
            </summary>
    </member>
    <member name="P:ABB.Robotics.RobotStudio.Stations.RsPathProcedure.Name">
      <summary>
            Gets or Set the name of the PathProcedure.
            </summary>
    </member>
    <member name="P:ABB.Robotics.RobotStudio.Stations.RsPathProcedure.ShowName">
      <summary>
            Gets or sets a value indicating whether the name of the path will
            be displayed in the graphics
            </summary>
    </member>
    <member name="P:ABB.Robotics.RobotStudio.Stations.RsPathProcedure.Synchronize">
      <summary>
            Gets or sets a value indicating whether the RsPathProcedure should
            be syncronized to the VC
            </summary>
    </member>
    <member name="P:ABB.Robotics.RobotStudio.Stations.RsPathProcedure.Visible">
      <summary>
            Gets or sets a value indicating whether the RsPathProcedure will
            be displayed in the graphics
            </summary>
    </member>
    <member name="T:ABB.Robotics.RobotStudio.Stations.RsPathProcedureCollection"></member>
    <member name="M:ABB.Robotics.RobotStudio.Stations.RsPathProcedureCollection.Add(ABB.Robotics.RobotStudio.Stations.RsPathProcedure)">
      <summary>
            Adds a <see cref="T:ABB.Robotics.RobotStudio.Stations.RsPathProcedure" /> to the collection.
            </summary>
      <param name="pathProcedure">The <see cref="T:ABB.Robotics.RobotStudio.Stations.RsPathProcedure" /> to be added.</param>
    </member>
    <member name="M:ABB.Robotics.RobotStudio.Stations.RsPathProcedureCollection.Contains(ABB.Robotics.RobotStudio.Stations.RsPathProcedure)"></member>
    <member name="M:ABB.Robotics.RobotStudio.Stations.RsPathProcedureCollection.Contains(System.String)">
      <summary>
            Checks to see if a named item is contained by the collection.
            </summary>
      <param name="name">The name of the item to look for</param>
      <returns>
            True if the named item is a member, false otherwise
            </returns>
    </member>
    <member name="M:ABB.Robotics.RobotStudio.Stations.RsPathProcedureCollection.CopyTo(ABB.Robotics.RobotStudio.Stations.RsPathProcedure[],System.Int32)"></member>
    <member name="M:ABB.Robotics.RobotStudio.Stations.RsPathProcedureCollection.CopyTo(System.Array,System.Int32)"></member>
    <member name="P:ABB.Robotics.RobotStudio.Stations.RsPathProcedureCollection.Count"></member>
    <member name="M:ABB.Robotics.RobotStudio.Stations.RsPathProcedureCollection.GetEnumerator"></member>
    <member name="P:ABB.Robotics.RobotStudio.Stations.RsPathProcedureCollection.IsSynchronized"></member>
    <member name="P:ABB.Robotics.RobotStudio.Stations.RsPathProcedureCollection.Item(System.Int32)"></member>
    <member name="P:ABB.Robotics.RobotStudio.Stations.RsPathProcedureCollection.Item(System.String)">
      <summary>
            Gets the named item.
            </summary>
    </member>
    <member name="P:ABB.Robotics.RobotStudio.Stations.RsPathProcedureCollection.Parent"></member>
    <member name="M:ABB.Robotics.RobotStudio.Stations.RsPathProcedureCollection.Remove(ABB.Robotics.RobotStudio.Stations.RsPathProcedure)">
      <summary>
            Removes a <see cref="T:ABB.Robotics.RobotStudio.Stations.RsPathProcedure" /> from the collection.
            </summary>
      <param name="pathProcedure">The <see cref="T:ABB.Robotics.RobotStudio.Stations.RsPathProcedure" /> to be removed.</param>
    </member>
    <member name="P:ABB.Robotics.RobotStudio.Stations.RsPathProcedureCollection.SyncRoot"></member>
    <member name="M:ABB.Robotics.RobotStudio.Stations.RsPathProcedureCollection.ToArray"></member>
    <member name="M:ABB.Robotics.RobotStudio.Stations.RsPathProcedureCollection.TryGetPathProcedure(System.String,ABB.Robotics.RobotStudio.Stations.RsPathProcedure@)">
      <summary>Gets the path with the specified name.</summary>
      <param name="name">The name of the path to get.</param>
      <param name="pathProcedure">When this method returns, contains the path associated with the specified name,
            if the name is found; otherwise, null.</param>
      <returns>true if the RsPathProcedureCollection contains an element with the specified name; otherwise, false.</returns>
      <exception cref="T:System.ArgumentException">name is a null reference.</exception>
    </member>
    <member name="T:ABB.Robotics.RobotStudio.Stations.RsPointType"></member>
    <member name="F:ABB.Robotics.RobotStudio.Stations.RsPointType.None"></member>
    <member name="F:ABB.Robotics.RobotStudio.Stations.RsPointType.ToPoint"></member>
    <member name="F:ABB.Robotics.RobotStudio.Stations.RsPointType.CirPoint"></member>
    <member name="F:ABB.Robotics.RobotStudio.Stations.RsPointType.ToJointPos"></member>
    <member name="F:ABB.Robotics.RobotStudio.Stations.RsPointType.ViaPoint"></member>
    <member name="T:ABB.Robotics.RobotStudio.Stations.RsProcessDefinition">
      <summary>
            A process definition is a group of 1-3 RsMoveInstructionDescriptions and
            a collection of their corresponding RsProcessTemplates.
            For instance the <see cref="T:ABB.Robotics.RobotStudio.Stations.RsProcessDefinition" /> representing the 'Arc' process would
            contain references to the <see cref="T:ABB.Robotics.RobotStudio.Stations.RsMoveInstructionDescription" />s of 'ArcC' and 'ArcL' and their templates.
            </summary>
    </member>
    <member name="M:ABB.Robotics.RobotStudio.Stations.RsProcessDefinition.#ctor(System.String,System.String,System.String)">
      <summary>
            Creates and initializes a new <see cref="T:ABB.Robotics.RobotStudio.Stations.RsProcessDefinition" /> object.
            </summary>
      <param name="jointInstructionName">The name of the <see cref="T:ABB.Robotics.RobotStudio.Stations.RsMoveInstructionDescription" />s corresponding to the joint motion.</param>
      <param name="linearInstructionName">The name of the <see cref="T:ABB.Robotics.RobotStudio.Stations.RsMoveInstructionDescription" />s corresponding to the linear motion.</param>
      <param name="circularInstructionName">The name of the <see cref="T:ABB.Robotics.RobotStudio.Stations.RsMoveInstructionDescription" />s corresponding to the circular motion.</param>
      <returns>The new <see cref="T:ABB.Robotics.RobotStudio.Stations.RsProcessDefinition" /> object.</returns>
    </member>
    <member name="P:ABB.Robotics.RobotStudio.Stations.RsProcessDefinition.ActiveProcessTemplate">
      <summary>
            Gets or Sets the ActiveProcessTemplate.
            </summary>
    </member>
    <member name="M:ABB.Robotics.RobotStudio.Stations.RsProcessDefinition.GetMoveInstructionDescriptionName(ABB.Robotics.RobotStudio.Stations.MotionType)">
      <summary>
            Gets the name of the description name.
            </summary>
      <param name="motionType">The MotionType to find corresponding <see cref="T:ABB.Robotics.RobotStudio.Stations.RsMoveInstructionDescription" /> for.</param>
    </member>
    <member name="P:ABB.Robotics.RobotStudio.Stations.RsProcessDefinition.ProcessTemplates">
      <summary>
            Gets the collection of <see cref="T:ABB.Robotics.RobotStudio.Stations.RsProcessTemplate" /> objects.
            </summary>
    </member>
    <member name="T:ABB.Robotics.RobotStudio.Stations.RsProcessDefinitionCollection">
      <summary>
            A collection of <see cref="T:ABB.Robotics.RobotStudio.Stations.RsProcessDefinition" /> objects.
            </summary>
    </member>
    <member name="M:ABB.Robotics.RobotStudio.Stations.RsProcessDefinitionCollection.Add(ABB.Robotics.RobotStudio.Stations.RsProcessDefinition)">
      <summary>
            Adds a <see cref="T:ABB.Robotics.RobotStudio.Stations.RsProcessDefinition" /> to the collection.
            </summary>
      <param name="processDefinition">The <see cref="T:ABB.Robotics.RobotStudio.Stations.RsProcessDefinition" /> to be added.</param>
    </member>
    <member name="M:ABB.Robotics.RobotStudio.Stations.RsProcessDefinitionCollection.Contains(ABB.Robotics.RobotStudio.Stations.RsProcessDefinition)"></member>
    <member name="M:ABB.Robotics.RobotStudio.Stations.RsProcessDefinitionCollection.Contains(System.String)">
      <summary>
            Check to see if a named item is part of the collection.
            </summary>
      <param name="name">The name to look for.</param>
      <returns>True if the named item is part of the collection, false otherwise.</returns>
    </member>
    <member name="M:ABB.Robotics.RobotStudio.Stations.RsProcessDefinitionCollection.CopyTo(ABB.Robotics.RobotStudio.Stations.RsProcessDefinition[],System.Int32)"></member>
    <member name="M:ABB.Robotics.RobotStudio.Stations.RsProcessDefinitionCollection.CopyTo(System.Array,System.Int32)"></member>
    <member name="P:ABB.Robotics.RobotStudio.Stations.RsProcessDefinitionCollection.Count"></member>
    <member name="M:ABB.Robotics.RobotStudio.Stations.RsProcessDefinitionCollection.GetEnumerator"></member>
    <member name="P:ABB.Robotics.RobotStudio.Stations.RsProcessDefinitionCollection.IsSynchronized"></member>
    <member name="P:ABB.Robotics.RobotStudio.Stations.RsProcessDefinitionCollection.Item(System.Int32)"></member>
    <member name="P:ABB.Robotics.RobotStudio.Stations.RsProcessDefinitionCollection.Item(System.String)"></member>
    <member name="P:ABB.Robotics.RobotStudio.Stations.RsProcessDefinitionCollection.Parent"></member>
    <member name="M:ABB.Robotics.RobotStudio.Stations.RsProcessDefinitionCollection.Remove(ABB.Robotics.RobotStudio.Stations.RsProcessDefinition)">
      <summary>
            Removes a <see cref="T:ABB.Robotics.RobotStudio.Stations.RsProcessDefinition" /> from the collection.
            </summary>
      <param name="processDefinition">The <see cref="T:ABB.Robotics.RobotStudio.Stations.RsProcessDefinition" /> to be removed.</param>
    </member>
    <member name="P:ABB.Robotics.RobotStudio.Stations.RsProcessDefinitionCollection.SyncRoot"></member>
    <member name="M:ABB.Robotics.RobotStudio.Stations.RsProcessDefinitionCollection.ToArray"></member>
    <member name="M:ABB.Robotics.RobotStudio.Stations.RsProcessDefinitionCollection.TryGetProcessDefinition(System.String,ABB.Robotics.RobotStudio.Stations.RsProcessDefinition@)">
      <summary>Gets the definition with the specified name.</summary>
      <param name="name">The name of the definition to get.</param>
      <param name="processDefinition">When this method returns, contains the definition associated with the specified name,
            if the name is found; otherwise, null.</param>
      <returns>true if the RsProcessDefinitionCollection contains an element with the specified name; otherwise, false.</returns>
      <exception cref="T:System.ArgumentException">name is a null reference.</exception>
    </member>
    <member name="T:ABB.Robotics.RobotStudio.Stations.RsProcessTemplate">
      <summary>
            An <see cref="T:ABB.Robotics.RobotStudio.Stations.RsProcessTemplate" /> is an instance of a process definition.
            It contains a collection of 1-3 RsInstructionTemplates.
            The templates corresponds to the RsMoveInstructionDescriptions
            of the RsProcessDefinition that the RsProcessTemplate is a memeber of.
            </summary>
    </member>
    <member name="M:ABB.Robotics.RobotStudio.Stations.RsProcessTemplate.#ctor(ABB.Robotics.RobotStudio.Stations.RsInstructionTemplate,ABB.Robotics.RobotStudio.Stations.RsInstructionTemplate,ABB.Robotics.RobotStudio.Stations.RsInstructionTemplate)">
      <summary>
            Creates and initializes a new <see cref="T:ABB.Robotics.RobotStudio.Stations.RsProcessTemplate" /> object.
            </summary>
      <param name="jointInstructionTemplate">The <see cref="T:ABB.Robotics.RobotStudio.Stations.RsInstructionTemplate" /> corresponding to the joint motion type of the RsMoveInstructionDescription.</param>
      <param name="linearInstructionTemplate">The <see cref="T:ABB.Robotics.RobotStudio.Stations.RsInstructionTemplate" /> corresponding to the linear motion type of the RsMoveInstructionDescription.</param>
      <param name="circularInstructionTemplate">The <see cref="T:ABB.Robotics.RobotStudio.Stations.RsInstructionTemplate" /> corresponding to the circular motion type of the RsMoveInstructionDescription.</param>
      <returns>The new <see cref="T:ABB.Robotics.RobotStudio.Stations.RsProcessTemplate" /> object.</returns>
    </member>
    <member name="P:ABB.Robotics.RobotStudio.Stations.RsProcessTemplate.ActiveMotionType">
      <summary>
            Gets or Sets the ActiveMotionType.
            </summary>
    </member>
    <member name="M:ABB.Robotics.RobotStudio.Stations.RsProcessTemplate.GetTemplate(ABB.Robotics.RobotStudio.Stations.MotionType)">
      <summary>
            Gets the <see cref="T:ABB.Robotics.RobotStudio.Stations.RsProcessTemplate" /> corresponding to the supplied <see cref="T:ABB.Robotics.RobotStudio.Stations.MotionType" />.
            </summary>
      <param name="motionType">The MotionType to find corresponding template for</param>
      <returns>The <see cref="T:ABB.Robotics.RobotStudio.Stations.RsProcessTemplate" /> that correspåonds to the MotionType, if there is none the it returns Null.</returns>
    </member>
    <member name="M:ABB.Robotics.RobotStudio.Stations.RsProcessTemplate.SetTemplate(ABB.Robotics.RobotStudio.Stations.MotionType,ABB.Robotics.RobotStudio.Stations.RsInstructionTemplate)">
      <summary>
            Sets the supplied <see cref="T:ABB.Robotics.RobotStudio.Stations.RsProcessTemplate" /> as corresponding to the supplied <see cref="T:ABB.Robotics.RobotStudio.Stations.MotionType" />.
            </summary>
      <param name="motionType">MotionType to associate the supplied <see cref="T:ABB.Robotics.RobotStudio.Stations.RsInstructionTemplate" /> with.</param>
      <param name="instructionTemplate">The <see cref="T:ABB.Robotics.RobotStudio.Stations.RsInstructionTemplate" /> to associate with the supplied MotionType</param>
    </member>
    <member name="T:ABB.Robotics.RobotStudio.Stations.RsProcessTemplateCollection">
      <summary>
            A collection of <see cref="T:ABB.Robotics.RobotStudio.Stations.RsProcessTemplate" /> objects.
            </summary>
    </member>
    <member name="M:ABB.Robotics.RobotStudio.Stations.RsProcessTemplateCollection.Add(ABB.Robotics.RobotStudio.Stations.RsProcessTemplate)">
      <summary>
            Adds a <see cref="T:ABB.Robotics.RobotStudio.Stations.RsProcessTemplate" /> to the collection.
            </summary>
      <param name="processTemplate">The <see cref="T:ABB.Robotics.RobotStudio.Stations.RsProcessTemplate" /> to be added.</param>
    </member>
    <member name="M:ABB.Robotics.RobotStudio.Stations.RsProcessTemplateCollection.Contains(ABB.Robotics.RobotStudio.Stations.RsProcessTemplate)"></member>
    <member name="M:ABB.Robotics.RobotStudio.Stations.RsProcessTemplateCollection.CopyTo(ABB.Robotics.RobotStudio.Stations.RsProcessTemplate[],System.Int32)"></member>
    <member name="M:ABB.Robotics.RobotStudio.Stations.RsProcessTemplateCollection.CopyTo(System.Array,System.Int32)"></member>
    <member name="P:ABB.Robotics.RobotStudio.Stations.RsProcessTemplateCollection.Count"></member>
    <member name="M:ABB.Robotics.RobotStudio.Stations.RsProcessTemplateCollection.GetEnumerator"></member>
    <member name="P:ABB.Robotics.RobotStudio.Stations.RsProcessTemplateCollection.IsSynchronized"></member>
    <member name="P:ABB.Robotics.RobotStudio.Stations.RsProcessTemplateCollection.Item(System.Int32)"></member>
    <member name="P:ABB.Robotics.RobotStudio.Stations.RsProcessTemplateCollection.Parent"></member>
    <member name="M:ABB.Robotics.RobotStudio.Stations.RsProcessTemplateCollection.Remove(ABB.Robotics.RobotStudio.Stations.RsProcessTemplate)">
      <summary>
            Removes a <see cref="T:ABB.Robotics.RobotStudio.Stations.RsProcessTemplate" /> from the collection.
            </summary>
      <param name="processTemplate">The <see cref="T:ABB.Robotics.RobotStudio.Stations.RsProcessTemplate" /> to be removed.</param>
    </member>
    <member name="P:ABB.Robotics.RobotStudio.Stations.RsProcessTemplateCollection.SyncRoot"></member>
    <member name="M:ABB.Robotics.RobotStudio.Stations.RsProcessTemplateCollection.ToArray"></member>
    <member name="M:ABB.Robotics.RobotStudio.Stations.RsProcessTemplateCollection.TryGetProcessTemplate(System.String,ABB.Robotics.RobotStudio.Stations.RsProcessTemplate@)">
      <summary>Gets the template with the specified name.</summary>
      <param name="name">The name of the template to get.</param>
      <param name="processTemplate">When this method returns, contains the template associated with the specified name,
            if the name is found; otherwise, null.</param>
      <returns>true if the RsProcessTemplateCollection contains an element with the specified name; otherwise, false.</returns>
      <exception cref="T:System.ArgumentException">name is a null reference.</exception>
    </member>
    <member name="T:ABB.Robotics.RobotStudio.Stations.RsRobTarget">
      <summary>
            A RsRobTarget corresponds to a <c>robtarget</c> declaration in the RAPID.
            A <c>robtarget</c> is used to define the position of the robot and external axes.
            </summary>
    </member>
    <member name="M:ABB.Robotics.RobotStudio.Stations.RsRobTarget.#ctor">
      <summary>
            Creates and initializes a new <see cref="T:ABB.Robotics.RobotStudio.Stations.RsRobTarget" /> object.
            </summary>
      <returns>The new <see cref="T:ABB.Robotics.RobotStudio.Stations.RsRobTarget" /> object.</returns>
    </member>
    <member name="P:ABB.Robotics.RobotStudio.Stations.RsRobTarget.ConfigurationData">
      <summary>
            Gets or sets the <see cref="P:ABB.Robotics.RobotStudio.Stations.RsRobTarget.ConfigurationData" /> of the robtarget.
            </summary>
    </member>
    <member name="P:ABB.Robotics.RobotStudio.Stations.RsRobTarget.ConfigurationStatus">
      <summary>
            Gets or sets the <see cref="P:ABB.Robotics.RobotStudio.Stations.RsRobTarget.ConfigurationStatus" /> of the robtarget.
            </summary>
    </member>
    <member name="M:ABB.Robotics.RobotStudio.Stations.RsRobTarget.Copy"></member>
    <member name="P:ABB.Robotics.RobotStudio.Stations.RsRobTarget.Frame">
      <summary>
            Gets the <see cref="T:ABB.Robotics.RobotStudio.Stations.Transform" /> of the robtarget, defining its position.
            </summary>
    </member>
    <member name="M:ABB.Robotics.RobotStudio.Stations.RsRobTarget.GetExternalAxes(System.Boolean)">
      <summary>
            Gets the <see cref="T:ABB.Robotics.RobotStudio.Stations.ExternalAxisValues" /> of the robtarget.
            </summary>
      <param name="convertFromRapidDataToSI">Specifies whether the ExternalAxisValues should be converted from the RAPID data format to SI or not.</param>
      <returns>
            The <see cref="T:ABB.Robotics.RobotStudio.Stations.ExternalAxisValues" /> of the robtarget.
            </returns>
    </member>
    <member name="P:ABB.Robotics.RobotStudio.Stations.RsRobTarget.IsInline">
      <summary>
            Gets or sets whether the robtarget will be decalared inline in the RAPID when syncronized.
            </summary>
    </member>
    <member name="M:ABB.Robotics.RobotStudio.Stations.RsRobTarget.SetExternalAxes(ABB.Robotics.RobotStudio.Stations.ExternalAxisValues,System.Boolean)">
      <summary>
            Sets the <see cref="T:ABB.Robotics.RobotStudio.Stations.ExternalAxisValues" /> of the robtarget.
            </summary>
      <param name="value">The <see cref="T:ABB.Robotics.RobotStudio.Stations.ExternalAxisValues" /> to be set for the robtarget.</param>
      <param name="convertFromSIToRapidData">Specifies whether the ExternalAxisValues should be converted from the SI to RAPID data format or not.</param>
    </member>
    <member name="T:ABB.Robotics.RobotStudio.Stations.RsTarget"></member>
    <member name="M:ABB.Robotics.RobotStudio.Stations.RsTarget.#ctor(ABB.Robotics.RobotStudio.Stations.RsWorkObject,ABB.Robotics.RobotStudio.Stations.RsRobTarget)">
      <summary>
            Initializes a new instance of the RsTarget class.
            </summary>
      <param name="workObject">Workobject data declaration.</param>
      <param name="robTarget">Robtarget data declaration</param>
    </member>
    <member name="P:ABB.Robotics.RobotStudio.Stations.RsTarget.ApproachVector">
      <summary>
            Gets and sets the AxisDirection of the ApproachVector of the Target.
            </summary>
    </member>
    <member name="P:ABB.Robotics.RobotStudio.Stations.RsTarget.Color">
      <summary>
            Gets or sets the color of the graphical representation. Color.Empty means the
            target is color-coded in red/green/blue.
            </summary>
    </member>
    <member name="M:ABB.Robotics.RobotStudio.Stations.RsTarget.Copy">
      <summary>
            Creates a deep copy of the target, with the same workobject and robtarget
            </summary>
    </member>
    <member name="P:ABB.Robotics.RobotStudio.Stations.RsTarget.DisplayName"></member>
    <member name="P:ABB.Robotics.RobotStudio.Stations.RsTarget.FrameSize">
      <summary>
            Gets or Sets the size of the graphical representation of the target. Expressed in the SI unit.
            </summary>
    </member>
    <member name="M:ABB.Robotics.RobotStudio.Stations.RsTarget.Highlight(System.Drawing.Color)">
      <summary>
            Sets the highlight color of the target.
            </summary>
      <param name="color">The color that should be used to highlight the Target</param>
    </member>
    <member name="M:ABB.Robotics.RobotStudio.Stations.RsTarget.JumpTo(ABB.Robotics.RobotStudio.Stations.RsToolData)">
      <summary>
            Jumps the tool and the attached robot to the target.
            </summary>
      <param name="tool">The tool data to perform the jump with</param>
    </member>
    <member name="M:ABB.Robotics.RobotStudio.Stations.RsTarget.JumpTo(ABB.Robotics.RobotStudio.Stations.RsToolData,ABB.Robotics.RobotStudio.Stations.ConfigurationData)">
      <summary>
            Jumps the tool and the attached robot to the target with specified configuration. Completely ignores the configuration already defined.
            </summary>
      <param name="tool">The tool data to perform the jump with</param>
      <param name="configuration">The suggested configuration to be used instead of the defined one.</param>
    </member>
    <member name="M:ABB.Robotics.RobotStudio.Stations.RsTarget.JumpTo(ABB.Robotics.RobotStudio.Stations.RsToolData,ABB.Robotics.RobotStudio.Stations.ConfigurationData,System.Boolean)">
      <summary>
            Tries to jumps the tool and the attached robot to the target with specified configuration. Completely ignores the configuration already defined.
            </summary>
      <param name="tool">The tool data to perform the jump with</param>
      <param name="configuration">The suggested configuration to be used instead of the defined one.</param>
      <param name="updateController">Specifies if the joint values in the controller shall be updated in addition to the joint values of the mechanism.</param>
    </member>
    <member name="M:ABB.Robotics.RobotStudio.Stations.RsTarget.JumpTo(ABB.Robotics.RobotStudio.Stations.RsToolData,System.Boolean)">
      <summary>
            Jumps the tool and the attached robot to the target. Optionally updates the joint values in the virtual controller. Updating the joint values in the controller is time consuning compared to only updating the <see cref="T:ABB.Robotics.RobotStudio.Stations.Mechanism" /> joint value. If you need to frequently call this method, it is recomended to update the joint values in the controller, only for the last call.
            </summary>
      <param name="tool">The tool data to perform the jump with</param>
      <param name="updateController">Specifies if the joint values in the controller shall be updated in addition to the joint values of the mechanism.</param>
    </member>
    <member name="M:ABB.Robotics.RobotStudio.Stations.RsTarget.JumpTo(ABB.Robotics.RobotStudio.Stations.RsToolData,System.ValueType)">
      <summary>
            Jumps the tool and the attached robot to the target with specified configuration. Completely ignores the configuration already defined.
            </summary>
      <param name="tool">The tool data to perform the jump with</param>
      <param name="configuration">The suggested configuration to be used instead of the defined one.</param>
    </member>
    <member name="M:ABB.Robotics.RobotStudio.Stations.RsTarget.JumpTo(ABB.Robotics.RobotStudio.Stations.RsToolData,System.ValueType,System.Boolean)">
      <summary>
            Tries to jumps the tool and the attached robot to the target with specified configuration. Completely ignores the configuration already defined.
            </summary>
      <param name="tool">The tool data to perform the jump with</param>
      <param name="configuration">The suggested configuration to be used instead of the defined one.</param>
      <param name="updateController">Specifies if the joint values in the controller shall be updated in addition to the joint values of the mechanism.</param>
    </member>
    <member name="P:ABB.Robotics.RobotStudio.Stations.RsTarget.Name">
      <summary>
            Gets or sets the name of the object
            </summary>
    </member>
    <member name="P:ABB.Robotics.RobotStudio.Stations.RsTarget.ReferenceFrame">
      <summary>
            Gets the reference frame of the target.
            </summary>
    </member>
    <member name="M:ABB.Robotics.RobotStudio.Stations.RsTarget.ResetHighlight">
      <summary>
            Resets the highlight color of the target to the default color.
            </summary>
    </member>
    <member name="P:ABB.Robotics.RobotStudio.Stations.RsTarget.RobTarget">
      <summary>
            Gets or Sets the RsRobTarget associated with the target.
            </summary>
    </member>
    <member name="P:ABB.Robotics.RobotStudio.Stations.RsTarget.ShowName">
      <summary>
            Gets or sets a value indicating whether the name of the target will
            be displayed in the graphics
            </summary>
    </member>
    <member name="P:ABB.Robotics.RobotStudio.Stations.RsTarget.ShowReferenceFrame">
      <summary>
            Gets or sets a value indicating whether the reference frame of the target will
            be displayed in the graphics
            </summary>
    </member>
    <member name="P:ABB.Robotics.RobotStudio.Stations.RsTarget.Transform">
      <summary>
            Gets  the transform of the target.
            </summary>
    </member>
    <member name="P:ABB.Robotics.RobotStudio.Stations.RsTarget.Visible">
      <summary>
            Gets or Sets whether or not the target i visible in the graphics.
            </summary>
    </member>
    <member name="P:ABB.Robotics.RobotStudio.Stations.RsTarget.WorkObject">
      <summary>
            Gets or Sets the RsWorkObject associated with the target.
            </summary>
    </member>
    <member name="E:ABB.Robotics.RobotStudio.Stations.RsTarget.WorkObjectChanged"></member>
    <member name="T:ABB.Robotics.RobotStudio.Stations.RsTargetCollection">
      <summary>
            A collection of RsTargets.
            </summary>
    </member>
    <member name="M:ABB.Robotics.RobotStudio.Stations.RsTargetCollection.Add(ABB.Robotics.RobotStudio.Stations.RsTarget)">
      <summary>
            Add a target to a task.
            </summary>
      <param name="target">The target to be added.</param>
      <exception cref="T:System.ArgumentException" />
      <exception cref="T:System.ArgumentNullException" />
      <exception cref="T:System.Exception">Object must be removed from it's current parent first.</exception>
    </member>
    <member name="M:ABB.Robotics.RobotStudio.Stations.RsTargetCollection.Add(ABB.Robotics.RobotStudio.Stations.RsTarget,ABB.Robotics.RobotStudio.Stations.RsTarget)">
      <summary>
            Add a target to a task.
            </summary>
      <param name="target">The target to be added.</param>
      <param name="afterThisTarget">The afterThisTarget that target should be added after.
            If this null, target is added before the first target.</param>
      <exception cref="T:System.ArgumentException" />
      <exception cref="T:System.ArgumentNullException" />
      <exception cref="T:System.Exception">Object must be removed from it's current parent first.</exception>
    </member>
    <member name="M:ABB.Robotics.RobotStudio.Stations.RsTargetCollection.Contains(ABB.Robotics.RobotStudio.Stations.RsTarget)"></member>
    <member name="M:ABB.Robotics.RobotStudio.Stations.RsTargetCollection.CopyTo(ABB.Robotics.RobotStudio.Stations.RsTarget[],System.Int32)"></member>
    <member name="M:ABB.Robotics.RobotStudio.Stations.RsTargetCollection.CopyTo(System.Array,System.Int32)"></member>
    <member name="P:ABB.Robotics.RobotStudio.Stations.RsTargetCollection.Count"></member>
    <member name="M:ABB.Robotics.RobotStudio.Stations.RsTargetCollection.GetEnumerator"></member>
    <member name="P:ABB.Robotics.RobotStudio.Stations.RsTargetCollection.IsSynchronized"></member>
    <member name="P:ABB.Robotics.RobotStudio.Stations.RsTargetCollection.Item(System.Int32)"></member>
    <member name="P:ABB.Robotics.RobotStudio.Stations.RsTargetCollection.Parent"></member>
    <member name="M:ABB.Robotics.RobotStudio.Stations.RsTargetCollection.Remove(ABB.Robotics.RobotStudio.Stations.RsTarget)">
      <summary>
            Removes a target to from a task.
            </summary>
      <param name="target">The target to be removed.</param>
      <exception cref="T:System.ArgumentException" />
      <exception cref="T:System.ArgumentNullException" />
    </member>
    <member name="P:ABB.Robotics.RobotStudio.Stations.RsTargetCollection.SyncRoot"></member>
    <member name="M:ABB.Robotics.RobotStudio.Stations.RsTargetCollection.ToArray"></member>
    <member name="T:ABB.Robotics.RobotStudio.Stations.RsTask"></member>
    <member name="P:ABB.Robotics.RobotStudio.Stations.RsTask.ActivePathProcedure"></member>
    <member name="E:ABB.Robotics.RobotStudio.Stations.RsTask.ActivePathProcedureChanged">
      <summary>
            Occurs when the <see cref="P:ABB.Robotics.RobotStudio.Stations.RsTask.ActivePathProcedure" /> property has changed.
            </summary>
    </member>
    <member name="P:ABB.Robotics.RobotStudio.Stations.RsTask.ActiveProcessDefinition"></member>
    <member name="P:ABB.Robotics.RobotStudio.Stations.RsTask.ActiveTool"></member>
    <member name="E:ABB.Robotics.RobotStudio.Stations.RsTask.ActiveToolChanged">
      <summary>
            Occurs when the <see cref="P:ABB.Robotics.RobotStudio.Stations.RsTask.ActiveTool" /> property has changed.
            </summary>
    </member>
    <member name="P:ABB.Robotics.RobotStudio.Stations.RsTask.ActiveWorkObject"></member>
    <member name="E:ABB.Robotics.RobotStudio.Stations.RsTask.ActiveWorkObjectChanged">
      <summary>
            Occurs when the <see cref="P:ABB.Robotics.RobotStudio.Stations.RsTask.ActiveWorkObject" /> property has changed.
            </summary>
    </member>
    <member name="P:ABB.Robotics.RobotStudio.Stations.RsTask.DataDeclarations">
      <summary>
            Gets the collection of <see cref="T:ABB.Robotics.RobotStudio.Stations.RsDataDeclaration" /> objects.
            </summary>
    </member>
    <member name="P:ABB.Robotics.RobotStudio.Stations.RsTask.DisplayName"></member>
    <member name="P:ABB.Robotics.RobotStudio.Stations.RsTask.EntryPoint"></member>
    <member name="M:ABB.Robotics.RobotStudio.Stations.RsTask.FindDataDeclarationFromModuleScope(System.String,System.String)">
      <summary>
            Find the <see cref="T:ABB.Robotics.RobotStudio.Stations.RsDataDeclaration" /> from the specified module scope.
            </summary>
      <param name="name">The name of the <see cref="T:ABB.Robotics.RobotStudio.Stations.RsDataDeclaration" /> to find.</param>
      <param name="moduleName">The name of the module, which look from.</param>
      <returns>
        <see cref="T:ABB.Robotics.RobotStudio.Stations.RsDataDeclaration" /> if find, othererwise null.
            </returns>
    </member>
    <member name="M:ABB.Robotics.RobotStudio.Stations.RsTask.FindDataDeclarationsByType(System.String)">
      <param name="type">"robtarget", "jointtarget", "wobjdata", "tooldata" and data type of generics.</param>
    </member>
    <member name="M:ABB.Robotics.RobotStudio.Stations.RsTask.FindDataDeclarationsByType(System.Type)">
      <summary>
            Finds the <see cref="T:ABB.Robotics.RobotStudio.Stations.RsDataDeclaration" />s matching the supplied type.
            </summary>
      <param name="type">The <b>Type</b> of objects to find.</param>
      <returns>
            An array containing the RsDatatDeclarations matching the supplied type.
            </returns>
    </member>
    <member name="M:ABB.Robotics.RobotStudio.Stations.RsTask.FindFirstDataDeclarationByType(System.Type)">
      <summary>
            Finds the first <see cref="T:ABB.Robotics.RobotStudio.Stations.RsDataDeclaration" /> methcing the supplied <see cref="T:System.Type" />.
            </summary>
      <param name="type">The name of the <see cref="T:ABB.Robotics.RobotStudio.Stations.RsWorkObject" /> to find <see cref="T:ABB.Robotics.RobotStudio.Stations.RsTarget" /> for.</param>
      <returns>
            The first <see cref="T:ABB.Robotics.RobotStudio.Stations.RsDataDeclaration" /> matching the supplied type.
            </returns>
    </member>
    <member name="M:ABB.Robotics.RobotStudio.Stations.RsTask.FindFirstTargetByWorkObject(ABB.Robotics.RobotStudio.Stations.RsWorkObject)">
      <summary>
            Finds the first <see cref="T:ABB.Robotics.RobotStudio.Stations.RsTarget" /> for the supplied <see cref="T:ABB.Robotics.RobotStudio.Stations.RsWorkObject" />.
            </summary>
      <param name="workObject">The <see cref="T:ABB.Robotics.RobotStudio.Stations.RsWorkObject" /> to find <see cref="T:ABB.Robotics.RobotStudio.Stations.RsTarget" /> for.</param>
      <returns>
            The first <see cref="T:ABB.Robotics.RobotStudio.Stations.RsTarget" /> matching the supplied work objects.
            </returns>
    </member>
    <member name="M:ABB.Robotics.RobotStudio.Stations.RsTask.FindFirstTargetByWorkObject(System.String)">
      <summary>
            Finds the first <see cref="T:ABB.Robotics.RobotStudio.Stations.RsTarget" /> for the supplied name of a <see cref="T:ABB.Robotics.RobotStudio.Stations.RsWorkObject" />.
            </summary>
      <param name="workObjectName">The name of the <see cref="T:ABB.Robotics.RobotStudio.Stations.RsWorkObject" /> to find <see cref="T:ABB.Robotics.RobotStudio.Stations.RsTarget" /> for.</param>
      <returns>
            The first <see cref="T:ABB.Robotics.RobotStudio.Stations.RsTarget" /> matching the supplied names.
            </returns>
    </member>
    <member name="M:ABB.Robotics.RobotStudio.Stations.RsTask.FindPathProcedureFromModuleScope(System.String,System.String)">
      <summary>
            Find the <see cref="T:ABB.Robotics.RobotStudio.Stations.RsPathProcedure" /> from the specified module scope.
            </summary>
      <param name="name">The name of the <see cref="T:ABB.Robotics.RobotStudio.Stations.RsPathProcedure" /> to find.</param>
      <param name="moduleName">The name of the module, which look from.</param>
      <returns>
        <see cref="T:ABB.Robotics.RobotStudio.Stations.RsPathProcedure" /> if find, othererwise null.
            </returns>
    </member>
    <member name="M:ABB.Robotics.RobotStudio.Stations.RsTask.FindTargets(ABB.Robotics.RobotStudio.Stations.RsWorkObject,ABB.Robotics.RobotStudio.Stations.RsRobTarget)">
      <summary>
            Finds the <see cref="T:ABB.Robotics.RobotStudio.Stations.RsTarget" />s for the supplied of a <see cref="T:ABB.Robotics.RobotStudio.Stations.RsWorkObject" /> and of a <see cref="T:ABB.Robotics.RobotStudio.Stations.RsRobTarget" />.
            </summary>
      <param name="workObject">The <see cref="T:ABB.Robotics.RobotStudio.Stations.RsWorkObject" /> to find <see cref="T:ABB.Robotics.RobotStudio.Stations.RsTarget" />s for.</param>
      <param name="robTarget">The <see cref="T:ABB.Robotics.RobotStudio.Stations.RsRobTarget" /> to find <see cref="T:ABB.Robotics.RobotStudio.Stations.RsTarget" />s for.</param>
      <returns>
            An array containing the <see cref="T:ABB.Robotics.RobotStudio.Stations.RsTarget" />s matching the supplied names.
            </returns>
    </member>
    <member name="M:ABB.Robotics.RobotStudio.Stations.RsTask.FindTargets(System.String,System.String)">
      <summary>
            Finds the <see cref="T:ABB.Robotics.RobotStudio.Stations.RsTarget" />s for the supplied name of a <see cref="T:ABB.Robotics.RobotStudio.Stations.RsWorkObject" /> and the name of a <see cref="T:ABB.Robotics.RobotStudio.Stations.RsRobTarget" />.
            </summary>
      <param name="workObjectName">The name of the <see cref="T:ABB.Robotics.RobotStudio.Stations.RsWorkObject" /> to find <see cref="T:ABB.Robotics.RobotStudio.Stations.RsTarget" />s for.</param>
      <param name="robTargetName">The name of the <see cref="T:ABB.Robotics.RobotStudio.Stations.RsRobTarget" /> to find <see cref="T:ABB.Robotics.RobotStudio.Stations.RsTarget" />s for.</param>
      <returns>
            An array containing the <see cref="T:ABB.Robotics.RobotStudio.Stations.RsTarget" />s matching the supplied names.
            </returns>
    </member>
    <member name="M:ABB.Robotics.RobotStudio.Stations.RsTask.FindTargetsByRobTarget(ABB.Robotics.RobotStudio.Stations.RsRobTarget)">
      <summary>
            Finds the <see cref="T:ABB.Robotics.RobotStudio.Stations.RsTarget" />s for the supplied <see cref="T:ABB.Robotics.RobotStudio.Stations.RsRobTarget" />.
            </summary>
      <param name="robTarget">The <see cref="T:ABB.Robotics.RobotStudio.Stations.RsRobTarget" /> to find <see cref="T:ABB.Robotics.RobotStudio.Stations.RsTarget" />s for.</param>
      <returns>
            An array containing the <see cref="T:ABB.Robotics.RobotStudio.Stations.RsTarget" />s for the supplied <see cref="T:ABB.Robotics.RobotStudio.Stations.RsRobTarget" />.
            </returns>
    </member>
    <member name="M:ABB.Robotics.RobotStudio.Stations.RsTask.FindTargetsByRobTarget(System.String)">
      <summary>
            Finds the <see cref="T:ABB.Robotics.RobotStudio.Stations.RsTarget" /> for the supplied name of a <see cref="T:ABB.Robotics.RobotStudio.Stations.RsRobTarget" />.
            </summary>
      <param name="robTargetName">The name of the <see cref="T:ABB.Robotics.RobotStudio.Stations.RsRobTarget" /> to find <see cref="T:ABB.Robotics.RobotStudio.Stations.RsTarget" /> for.</param>
      <returns>
            An array containing the <see cref="T:ABB.Robotics.RobotStudio.Stations.RsTarget" />s for the supplied name.
            </returns>
    </member>
    <member name="M:ABB.Robotics.RobotStudio.Stations.RsTask.FindTargetsByWorkObject(ABB.Robotics.RobotStudio.Stations.RsWorkObject)">
      <summary>
            Finds the <see cref="T:ABB.Robotics.RobotStudio.Stations.RsTarget" />s for the supplied <see cref="T:ABB.Robotics.RobotStudio.Stations.RsWorkObject" />.
            </summary>
      <param name="workObject">The <see cref="T:ABB.Robotics.RobotStudio.Stations.RsWorkObject" /> to find <see cref="T:ABB.Robotics.RobotStudio.Stations.RsTarget" />s for.</param>
      <returns>
            An array containing the <see cref="T:ABB.Robotics.RobotStudio.Stations.RsTarget" />s for the supplied <see cref="T:ABB.Robotics.RobotStudio.Stations.RsWorkObject" />.
            </returns>
    </member>
    <member name="M:ABB.Robotics.RobotStudio.Stations.RsTask.FindTargetsByWorkObject(System.String)">
      <summary>
            Finds the <see cref="T:ABB.Robotics.RobotStudio.Stations.RsTarget" />s for the supplied name of a <see cref="T:ABB.Robotics.RobotStudio.Stations.RsWorkObject" />.
            </summary>
      <param name="workObjectName">The name of the <see cref="T:ABB.Robotics.RobotStudio.Stations.RsWorkObject" /> to find <see cref="T:ABB.Robotics.RobotStudio.Stations.RsTarget" />s for.</param>
      <returns>
            An array containing the <see cref="T:ABB.Robotics.RobotStudio.Stations.RsTarget" />s for the supplied name.
            </returns>
    </member>
    <member name="P:ABB.Robotics.RobotStudio.Stations.RsTask.Frame"></member>
    <member name="M:ABB.Robotics.RobotStudio.Stations.RsTask.GetExternalAxisJointTypes">
      <summary>
            Gets the <see cref="T:ABB.Robotics.RobotStudio.Stations.JointType" />s of the external axis joints in the Task.
            </summary>
      <returns>
            An array of <see cref="T:ABB.Robotics.RobotStudio.Stations.JointType" />s values specifying the joint types of the exterenal axis joints.
            </returns>
    </member>
    <member name="M:ABB.Robotics.RobotStudio.Stations.RsTask.GetExternalAxisJointValues">
      <summary>
            Gets the joint values of the external axis joints in the Task.
            </summary>
      <returns>
            An array of joint values for the exterenal axis joints.
            </returns>
    </member>
    <member name="M:ABB.Robotics.RobotStudio.Stations.RsTask.GetValidRapidName(System.String,System.String,System.Int32)">
      <summary>
            Gets a RAPID name that is valid within the scope of the Task.
            </summary>
      <param name="baseName">The base of the name.</param>
      <param name="separator">The separator to be used between base and counter.</param>
      <param name="stepRate">The step rate to be used for the counter part of the name.</param>
      <returns>
            The valid name.
            </returns>
    </member>
    <member name="M:ABB.Robotics.RobotStudio.Stations.RsTask.ImportProcessDefinitions(System.String)">
      <summary>
            Imports Process Definitions from the supplied xml file.
            </summary>
      <param name="xmlFileName">The file name of the xml file to import Process Definitions from.</param>
    </member>
    <member name="M:ABB.Robotics.RobotStudio.Stations.RsTask.ImportProcessDefinitions(System.Xml.XmlReader)">
      <summary>
            Imports Process Definitions from the supplied <b>XmlReader</b>.
            </summary>
      <param name="xmlReader">The <b>XmlReader</b> to import Process Definitions from.</param>
    </member>
    <member name="P:ABB.Robotics.RobotStudio.Stations.RsTask.InstructionDescriptions">
      <summary>
            Gets the collection of <see cref="T:ABB.Robotics.RobotStudio.Stations.RsInstructionDescription" /> objects.
            </summary>
    </member>
    <member name="P:ABB.Robotics.RobotStudio.Stations.RsTask.IsMotionTask">
      <summary>
            Returns true if this is a motion task.
            </summary>
    </member>
    <member name="M:ABB.Robotics.RobotStudio.Stations.RsTask.IsValidRapidCharacter(System.Char)">
      <summary>
            Checks if the specified character is valid in a RAPID name, according to RAPID syntax.
            </summary>
      <param name="character">Character to check for validity.</param>
      <returns>
            true/false for a valid/non-valid RAPID character.
            </returns>
    </member>
    <member name="M:ABB.Robotics.RobotStudio.Stations.RsTask.IsValidRapidName(System.String)">
      <summary>
            Checks if the specified string is a valid RAPID name, according to RAPID syntax.
            </summary>
      <param name="name">Name to check for validity.</param>
      <returns>
            true/false for a valid/non-valid RAPID name.
            </returns>
    </member>
    <member name="M:ABB.Robotics.RobotStudio.Stations.RsTask.IsValidRapidNameInModuleScope(System.String,System.String)">
      <summary>
            Checks if the specified string is a valid RAPID name in the specified module scope.
            </summary>
      <param name="moduleName">Name of module in which to check.</param>
      <param name="name">Name to check for validity.</param>
      <returns>
            true/false for a valid/non-valid RAPID name.
            </returns>
    </member>
    <member name="M:ABB.Robotics.RobotStudio.Stations.RsTask.IsValidRapidNameInTaskScope(System.String)">
      <summary>
            Checks if the specified string is a valid RAPID name in the RsTask scope.
            </summary>
      <param name="name">Name to check for validity.</param>
    </member>
    <member name="M:ABB.Robotics.RobotStudio.Stations.RsTask.IsValidRapidNameInTaskScope(System.String,System.String)">
      <summary>
            Checks if the specified string is a valid RAPID name in the RsTask scope.
            </summary>
      <param name="name">Name to check for validity.</param>
      <param name="moduleName">Name of module in which to check.</param>
      <returns>
            true/false for a valid/non-valid RAPID name.
            </returns>
    </member>
    <member name="M:ABB.Robotics.RobotStudio.Stations.RsTask.JumpHome">
      <summary>
            Sets all axes of all mechanisms in the task to their corresponding home position.
            </summary>
      <returns>
            true/false for allowed/not allowed to execute the operation.
            </returns>
      <exception cref="T:System.ArgumentException" />
    </member>
    <member name="P:ABB.Robotics.RobotStudio.Stations.RsTask.Mechanism"></member>
    <member name="P:ABB.Robotics.RobotStudio.Stations.RsTask.Name">
      <summary>
            Gets or sets the name of the Task.
            </summary>
    </member>
    <member name="P:ABB.Robotics.RobotStudio.Stations.RsTask.Parent">
      <summary>
            The Parent property returns a reference to the parent RsIrc5Controller object.
            </summary>
    </member>
    <member name="P:ABB.Robotics.RobotStudio.Stations.RsTask.PathProcedures">
      <summary>
            Gets the collection of <see cref="T:ABB.Robotics.RobotStudio.Stations.RsPathProcedure" /> objects.
            </summary>
    </member>
    <member name="P:ABB.Robotics.RobotStudio.Stations.RsTask.ProcessDefinitions"></member>
    <member name="E:ABB.Robotics.RobotStudio.Stations.RsTask.RapidSynchronized">
      <summary>
            Occurs when RAPID synchronization is finished. This event is raised from the methods
            <see cref="M:ABB.Robotics.RobotStudio.Stations.RsTask.SyncPathProcedure(System.String,ABB.Robotics.RobotStudio.Stations.SyncDirection,System.Collections.ArrayList,ABB.Robotics.RobotStudio.ProgressNotification,System.Double,System.Double)" /> and <see cref="M:ABB.Robotics.RobotStudio.Stations.RsTask.SyncData(System.String,ABB.Robotics.RobotStudio.Stations.SyncDirection,System.Collections.Generic.List{ABB.Robotics.RobotStudio.Stations.SyncLogMessage})" />.
            </summary>
    </member>
    <member name="M:ABB.Robotics.RobotStudio.Stations.RsTask.RemoveUnusedDataDeclarations(System.String[])">
      <summary>
            Removes data declarations not belonging to any instruction.
            </summary>
      <param name="types">Array of declaration types to search for,
            "robtarget", "jointtarget", "wobjdata", "tooldata" and data type of generics.</param>
      <returns>An array containing the removed declarations.</returns>
    </member>
    <member name="M:ABB.Robotics.RobotStudio.Stations.RsTask.SetExternalAxisJointValues(System.Double[])">
      <summary>
            Sets the joint values of the external axis joints in the Task.
            </summary>
      <param name="jointValues">An array specifying the joint value to be set of the external axis joints.</param>
      <returns>
            True if the operation succeded, false otherwise.
            </returns>
    </member>
    <member name="M:ABB.Robotics.RobotStudio.Stations.RsTask.SetExternalAxisJointValues(System.Double[],System.Boolean)">
      <summary>
            Sets the joint values of the external axis joints in the Task.  
            </summary>
      <param name="jointValues">An array specifying the joint value to be set of the external axis joints.</param>
      <param name="notify">A bool to specify if changes are notified or not.</param>
      <returns>
            True if the operation succeded, false otherwise.
            </returns>
    </member>
    <member name="P:ABB.Robotics.RobotStudio.Stations.RsTask.Simulate"></member>
    <member name="M:ABB.Robotics.RobotStudio.Stations.RsTask.SyncData(System.String,ABB.Robotics.RobotStudio.Stations.SyncDirection,System.Collections.Generic.List{ABB.Robotics.RobotStudio.Stations.SyncLogMessage})">
      <summary>
            Synchronizes the specified DataDeclaration to or from the VC.
            </summary>
      <param name="dataId">A delegate that will handle the progress notifications. 
            The dataId consists of two parts, the module name and the DataDeclaration name seperated by a <i>slash</i>.</param>
      <param name="direction">Specified the synchronization direction, to or from the VC.</param>
      <param name="logMessageList">The ArrayList that will contain the log messages after method has returned.</param>
    </member>
    <member name="M:ABB.Robotics.RobotStudio.Stations.RsTask.SyncPathProcedure(System.String,ABB.Robotics.RobotStudio.Stations.SyncDirection,System.Collections.ArrayList)">
      <summary>
            Synchronizes the specified PathProcedures to or from the VC.
            </summary>
      <param name="pathProcedureId">A delegate that will handle the progress notifications.
            The pathProcedureId consists of two parts, the module name and the PathProcedure name seperated by a <i>slash</i>.</param>
      <param name="direction">Specified the synchronization direction, to or from the VC.</param>
      <param name="logMessageList">The ArrayList that will contain the log messages after method has returned.</param>
      <returns>
            True if the operation succeded, false otherwise.
            </returns>
    </member>
    <member name="M:ABB.Robotics.RobotStudio.Stations.RsTask.SyncPathProcedure(System.String,ABB.Robotics.RobotStudio.Stations.SyncDirection,System.Collections.ArrayList,ABB.Robotics.RobotStudio.ProgressNotification,System.Double,System.Double)">
      <summary>
            Synchronizes a RsPathProcedure in the station with a RAPID procedure in the controller.
            The controller or the station is the master.
            </summary>
      <param name="pathProcedureId">A delegate that will handle the progress notifications.
            The pathProcedureId consists of two parts, the module name and the PathProcedure name seperated by a <i>slash</i>.</param>
      <param name="direction">Specified the synchronization direction, to or from the VC.</param>
      <param name="logMessageList">The ArrayList that will contain the log messages after method has returned.</param>
      <param name="progressDelegate">A delegate that will handle the progress notifications.</param>
      <param name="progressStart">Defines the start value sent to the progress delegate.</param>
      <param name="progressEnd">Defines the end value sent to the progress delegate.</param>
      <returns>
            True if the operation succeded, false otherwise.
            </returns>
      <exception cref="T:System.ArgumentException" />
      <exception cref="T:System.ArgumentNullException" />
    </member>
    <member name="M:ABB.Robotics.RobotStudio.Stations.RsTask.SyncToController(System.Collections.ArrayList)">
      <summary>
            Synchronizes all PathProcedures and DataDeclarations that have the Synchronize flag set.
            </summary>
      <param name="logMessageList">The ArrayList that will contain the log messages after method has returned.</param>
      <returns>
            True if the operation succeded, false otherwise.
            </returns>
    </member>
    <member name="M:ABB.Robotics.RobotStudio.Stations.RsTask.SyncToController(System.Collections.ArrayList,ABB.Robotics.RobotStudio.ProgressNotification)">
      <summary>
            Synchronizes all PathProcedures and DataDeclarations that have the Synchronize flag set.
            </summary>
      <param name="logMessageList">The ArrayList that will contain the log messages after method has returned.</param>
      <param name="progressDelegate">A delegate that will handle the progeress notifications.</param>
      <returns>
            True if the operation succeded, false otherwise.
            </returns>
    </member>
    <member name="P:ABB.Robotics.RobotStudio.Stations.RsTask.Targets"></member>
    <member name="P:ABB.Robotics.RobotStudio.Stations.RsTask.Visible"></member>
    <member name="T:ABB.Robotics.RobotStudio.Stations.RsTaskCollection">
      <summary>
            A collection of RsTasks.
            </summary>
    </member>
    <member name="M:ABB.Robotics.RobotStudio.Stations.RsTaskCollection.Contains(ABB.Robotics.RobotStudio.Stations.RsTask)"></member>
    <member name="M:ABB.Robotics.RobotStudio.Stations.RsTaskCollection.CopyTo(ABB.Robotics.RobotStudio.Stations.RsTask[],System.Int32)"></member>
    <member name="M:ABB.Robotics.RobotStudio.Stations.RsTaskCollection.CopyTo(System.Array,System.Int32)"></member>
    <member name="P:ABB.Robotics.RobotStudio.Stations.RsTaskCollection.Count"></member>
    <member name="M:ABB.Robotics.RobotStudio.Stations.RsTaskCollection.GetEnumerator"></member>
    <member name="P:ABB.Robotics.RobotStudio.Stations.RsTaskCollection.IsSynchronized"></member>
    <member name="P:ABB.Robotics.RobotStudio.Stations.RsTaskCollection.Item(System.Int32)"></member>
    <member name="P:ABB.Robotics.RobotStudio.Stations.RsTaskCollection.Item(System.String)"></member>
    <member name="P:ABB.Robotics.RobotStudio.Stations.RsTaskCollection.Parent"></member>
    <member name="P:ABB.Robotics.RobotStudio.Stations.RsTaskCollection.SyncRoot"></member>
    <member name="M:ABB.Robotics.RobotStudio.Stations.RsTaskCollection.ToArray"></member>
    <member name="M:ABB.Robotics.RobotStudio.Stations.RsTaskCollection.TryGetTask(System.String,ABB.Robotics.RobotStudio.Stations.RsTask@)">
      <summary>Gets the task with the specified name.</summary>
      <param name="name">The name of the task to get.</param>
      <param name="task">When this method returns, contains the path associated with the specified name,
            if the name is found; otherwise, null.</param>
      <returns>true if the RsTaskCollection contains an element with the specified name; otherwise, false.</returns>
      <exception cref="T:System.ArgumentException">name is a null reference.</exception>
    </member>
    <member name="T:ABB.Robotics.RobotStudio.Stations.RsToolData">
      <summary>
            Tooldata is used to describe the characteristics of a tool.
            </summary>
    </member>
    <member name="M:ABB.Robotics.RobotStudio.Stations.RsToolData.#ctor">
      <summary>
            Initializes a new instance of the <see cref="T:ABB.Robotics.RobotStudio.Stations.RsToolData" /> class.
            </summary>
      <returns>The new <see cref="T:ABB.Robotics.RobotStudio.Stations.RsToolData" /> object.</returns>
    </member>
    <member name="P:ABB.Robotics.RobotStudio.Stations.RsToolData.Frame">
      <summary>
            Gets the Frame of the ToolData.
            </summary>
    </member>
    <member name="P:ABB.Robotics.RobotStudio.Stations.RsToolData.FrameSize">
      <summary>
            Gets or set the size of the graphical representation of the RsToolData.
            </summary>
    </member>
    <member name="M:ABB.Robotics.RobotStudio.Stations.RsToolData.IsValid(ABB.Robotics.RobotStudio.Stations.RsToolData)"></member>
    <member name="P:ABB.Robotics.RobotStudio.Stations.RsToolData.LoadData">
      <summary>
             Gets or sets the LoadData of the ToolData.
            </summary>
    </member>
    <member name="P:ABB.Robotics.RobotStudio.Stations.RsToolData.Name">
      <summary>
            Gets or sets the name of the object
            </summary>
    </member>
    <member name="P:ABB.Robotics.RobotStudio.Stations.RsToolData.RobotHold">
      <summary>
             Gets or sets a values specifying whether or not the robot is holding the tool:
             True if the robot is holding the tool, false otherwise.
            </summary>
    </member>
    <member name="P:ABB.Robotics.RobotStudio.Stations.RsToolData.ShowName">
      <summary>
            Gets or sets a value indicating whether the name of the tooldata will
            be displayed in the graphics
            </summary>
    </member>
    <member name="P:ABB.Robotics.RobotStudio.Stations.RsToolData.Visible">
      <summary>
            Gets or set whether the tooldata should be displayed in the graphics.
            </summary>
    </member>
    <member name="T:ABB.Robotics.RobotStudio.Stations.RsWorkObject">
      <summary>
            A workobject is a coordinate system used to describe the position of a work piece.
            The workobject consists of two frames: a user frame and an object frame.
            All programed positions will be related to the object frame, which is related to the user frame,
            which is related to the world coordinate system.
            </summary>
    </member>
    <member name="M:ABB.Robotics.RobotStudio.Stations.RsWorkObject.#ctor">
      <summary>
            Initializes a new instance of the <see cref="T:ABB.Robotics.RobotStudio.Stations.RsWorkObject" /> class.
            </summary>
      <returns>The new <see cref="T:ABB.Robotics.RobotStudio.Stations.RsWorkObject" /> object.</returns>
    </member>
    <member name="M:ABB.Robotics.RobotStudio.Stations.RsWorkObject.Copy"></member>
    <member name="P:ABB.Robotics.RobotStudio.Stations.RsWorkObject.FrameSize">
      <summary>
            Gets or set the size of the graphical representation of the Workobject.
            </summary>
    </member>
    <member name="P:ABB.Robotics.RobotStudio.Stations.RsWorkObject.Name">
      <summary>
            Gets or sets the name of the object
            </summary>
    </member>
    <member name="P:ABB.Robotics.RobotStudio.Stations.RsWorkObject.ObjectFrame">
      <summary>
            Gets the ObjectFrame of the work object.
            </summary>
    </member>
    <member name="P:ABB.Robotics.RobotStudio.Stations.RsWorkObject.RobotHold">
      <summary>
             Gets or sets a values specifying whether or not the robot is holding the work object:
             True if the robot is holding the workobject, false otherwise.
            </summary>
    </member>
    <member name="P:ABB.Robotics.RobotStudio.Stations.RsWorkObject.ShowName">
      <summary>
            Gets or sets a value indicating whether the name of the workobject will
            be displayed in the graphics
            </summary>
    </member>
    <member name="P:ABB.Robotics.RobotStudio.Stations.RsWorkObject.UserFrame">
      <summary>
            Gets the UserFrame of the work object.
            </summary>
    </member>
    <member name="P:ABB.Robotics.RobotStudio.Stations.RsWorkObject.UserFrameMechanicalUnit">
      <summary>
             Gets or sets the name of the mechanical unit with which the robot movements are coordinated. 
             Only specified in the case of movable user coordinate systems (UserFrameProgrammed is FALSE).
            </summary>
    </member>
    <member name="P:ABB.Robotics.RobotStudio.Stations.RsWorkObject.UserFrameProgrammed">
      <summary>
            Gets or sets a value taht specifies whether or not the UserFrame is a fixed coordinate system
            or that it is moveable, i.e. by a coordinated external axis.
            True means that the UserFrame is fixed and False that its is movable.
            </summary>
    </member>
    <member name="P:ABB.Robotics.RobotStudio.Stations.RsWorkObject.Visible">
      <summary>
            Gets or set whether the Workobject should be displayed in the graphics.
            </summary>
    </member>
    <member name="T:ABB.Robotics.RobotStudio.Stations.ScreenshotOptions">
      <summary>
            Specifies how a screenshot of the graphics should be rendered.
            </summary>
    </member>
    <member name="F:ABB.Robotics.RobotStudio.Stations.ScreenshotOptions.Default"></member>
    <member name="F:ABB.Robotics.RobotStudio.Stations.ScreenshotOptions.HideTemporaryGraphics">
      <summary>
            Hide temporary items such as markers.
            </summary>
    </member>
    <member name="F:ABB.Robotics.RobotStudio.Stations.ScreenshotOptions.HideCoordinateSystem">
      <summary>
            Hide the coordinate system.
            </summary>
    </member>
    <member name="F:ABB.Robotics.RobotStudio.Stations.ScreenshotOptions.HideButtons">
      <summary>
            Hide the buttons.
            </summary>
    </member>
    <member name="F:ABB.Robotics.RobotStudio.Stations.ScreenshotOptions.HideFloor">
      <summary>
            Hide the floor.
            </summary>
    </member>
    <member name="F:ABB.Robotics.RobotStudio.Stations.ScreenshotOptions.NoHighlights">
      <summary>
            No highlights on objects.
            </summary>
    </member>
    <member name="F:ABB.Robotics.RobotStudio.Stations.ScreenshotOptions.HideMarkups">
      <summary>
            Hide markups and labels.
            </summary>
    </member>
    <member name="F:ABB.Robotics.RobotStudio.Stations.ScreenshotOptions.SimpleLighting">
      <summary>
            Force simple lighting.
            </summary>
    </member>
    <member name="F:ABB.Robotics.RobotStudio.Stations.ScreenshotOptions.AdvancedLighting">
      <summary>
            Force advanced lighting, if supported.
            </summary>
    </member>
    <member name="F:ABB.Robotics.RobotStudio.Stations.ScreenshotOptions.NoShadows">
      <summary>
            Disable shadows
            </summary>
    </member>
    <member name="F:ABB.Robotics.RobotStudio.Stations.ScreenshotOptions.TransparentBackground">
      <summary>
            Render to a transparent background
            </summary>
    </member>
    <member name="T:ABB.Robotics.RobotStudio.Stations.Shell">
      <summary>
            A Shell is a set of connected <see cref="T:ABB.Robotics.RobotStudio.Stations.Face">Faces</see> and <see cref="T:ABB.Robotics.RobotStudio.Stations.Wire">Wires</see>.
            It is normally the outside of a solid body, but can also be the inside of a hollow body.<br /><img src="GeometryTopology.jpg" /></summary>
    </member>
    <member name="P:ABB.Robotics.RobotStudio.Stations.Shell.Body">
      <summary>
            Gets the <see cref="P:ABB.Robotics.RobotStudio.Stations.Shell.Body" /> that the <see cref="T:ABB.Robotics.RobotStudio.Stations.Shell" /> belongs to.
            </summary>
    </member>
    <member name="P:ABB.Robotics.RobotStudio.Stations.Shell.Faces">
      <summary>
            Gets the <see cref="T:ABB.Robotics.RobotStudio.Stations.FaceCollection" /> that the <see cref="T:ABB.Robotics.RobotStudio.Stations.Shell" /> belongs to.
            </summary>
    </member>
    <member name="M:ABB.Robotics.RobotStudio.Stations.Shell.FindClosestVertex(ABB.Robotics.Math.Vector3)">
      <summary>
            Returns the <see cref="T:ABB.Robotics.RobotStudio.Stations.Vertex" /> of the <see cref="T:ABB.Robotics.RobotStudio.Stations.Shell" /> that is closest to the provided point.
            </summary>
      <param name="testPoint">The point which to find the closest vertex to.</param>
      <returns>The closest <see cref="T:ABB.Robotics.RobotStudio.Stations.Vertex" />.</returns>
    </member>
    <member name="P:ABB.Robotics.RobotStudio.Stations.Shell.Wires">
      <summary>
            Gets the <see cref="T:ABB.Robotics.RobotStudio.Stations.WireCollection" /> that the <see cref="T:ABB.Robotics.RobotStudio.Stations.Shell" /> belongs to.
            </summary>
    </member>
    <member name="T:ABB.Robotics.RobotStudio.Stations.ShellCollection">
      <summary>A collection of <see cref="T:ABB.Robotics.RobotStudio.Stations.Shell" /> items.</summary>
    </member>
    <member name="M:ABB.Robotics.RobotStudio.Stations.ShellCollection.Contains(ABB.Robotics.RobotStudio.Stations.Shell)"></member>
    <member name="M:ABB.Robotics.RobotStudio.Stations.ShellCollection.CopyTo(ABB.Robotics.RobotStudio.Stations.Shell[],System.Int32)"></member>
    <member name="M:ABB.Robotics.RobotStudio.Stations.ShellCollection.CopyTo(System.Array,System.Int32)"></member>
    <member name="P:ABB.Robotics.RobotStudio.Stations.ShellCollection.Count"></member>
    <member name="M:ABB.Robotics.RobotStudio.Stations.ShellCollection.GetEnumerator"></member>
    <member name="P:ABB.Robotics.RobotStudio.Stations.ShellCollection.IsSynchronized"></member>
    <member name="P:ABB.Robotics.RobotStudio.Stations.ShellCollection.Item(System.Int32)"></member>
    <member name="P:ABB.Robotics.RobotStudio.Stations.ShellCollection.Parent"></member>
    <member name="P:ABB.Robotics.RobotStudio.Stations.ShellCollection.SyncRoot"></member>
    <member name="M:ABB.Robotics.RobotStudio.Stations.ShellCollection.ToArray"></member>
    <member name="T:ABB.Robotics.RobotStudio.Stations.SimulationActorState">
      <summary>
            Specifies the state of a simulated object.
            </summary>
    </member>
    <member name="F:ABB.Robotics.RobotStudio.Stations.SimulationActorState.Active"></member>
    <member name="F:ABB.Robotics.RobotStudio.Stations.SimulationActorState.Stopped"></member>
    <member name="F:ABB.Robotics.RobotStudio.Stations.SimulationActorState.Passive"></member>
    <member name="T:ABB.Robotics.RobotStudio.Stations.SimulationConfiguration"></member>
    <member name="M:ABB.Robotics.RobotStudio.Stations.SimulationConfiguration.#ctor"></member>
    <member name="P:ABB.Robotics.RobotStudio.Stations.SimulationConfiguration.EventTable"></member>
    <member name="P:ABB.Robotics.RobotStudio.Stations.SimulationConfiguration.Parent">
      <summary>
            The Parent property returns a reference to the parent Station object.
            </summary>
    </member>
    <member name="P:ABB.Robotics.RobotStudio.Stations.SimulationConfiguration.SimulatedObjects"></member>
    <member name="P:ABB.Robotics.RobotStudio.Stations.SimulationConfiguration.Stopwatches"></member>
    <member name="P:ABB.Robotics.RobotStudio.Stations.SimulationConfiguration.VirtualTimeMode"></member>
    <member name="T:ABB.Robotics.RobotStudio.Stations.SimulationConfigurationCollection"></member>
    <member name="M:ABB.Robotics.RobotStudio.Stations.SimulationConfigurationCollection.Add(ABB.Robotics.RobotStudio.Stations.SimulationConfiguration)"></member>
    <member name="M:ABB.Robotics.RobotStudio.Stations.SimulationConfigurationCollection.Contains(ABB.Robotics.RobotStudio.Stations.SimulationConfiguration)"></member>
    <member name="M:ABB.Robotics.RobotStudio.Stations.SimulationConfigurationCollection.CopyTo(ABB.Robotics.RobotStudio.Stations.SimulationConfiguration[],System.Int32)"></member>
    <member name="M:ABB.Robotics.RobotStudio.Stations.SimulationConfigurationCollection.CopyTo(System.Array,System.Int32)"></member>
    <member name="P:ABB.Robotics.RobotStudio.Stations.SimulationConfigurationCollection.Count"></member>
    <member name="M:ABB.Robotics.RobotStudio.Stations.SimulationConfigurationCollection.GetEnumerator"></member>
    <member name="P:ABB.Robotics.RobotStudio.Stations.SimulationConfigurationCollection.IsSynchronized"></member>
    <member name="P:ABB.Robotics.RobotStudio.Stations.SimulationConfigurationCollection.Item(System.Int32)"></member>
    <member name="P:ABB.Robotics.RobotStudio.Stations.SimulationConfigurationCollection.Parent"></member>
    <member name="M:ABB.Robotics.RobotStudio.Stations.SimulationConfigurationCollection.Remove(ABB.Robotics.RobotStudio.Stations.SimulationConfiguration)"></member>
    <member name="P:ABB.Robotics.RobotStudio.Stations.SimulationConfigurationCollection.SyncRoot"></member>
    <member name="M:ABB.Robotics.RobotStudio.Stations.SimulationConfigurationCollection.ToArray"></member>
    <member name="T:ABB.Robotics.RobotStudio.Stations.SimulationDataRecorder">
      <summary>
            A data recorder than can record signals from a simulation. It is synchronized with virtual time.
            </summary>
    </member>
    <member name="P:ABB.Robotics.RobotStudio.Stations.SimulationDataRecorder.CurrentTime"></member>
    <member name="T:ABB.Robotics.RobotStudio.Stations.SimulationObjCollection"></member>
    <member name="M:ABB.Robotics.RobotStudio.Stations.SimulationObjCollection.Add(ABB.Robotics.RobotStudio.ProjectObject)"></member>
    <member name="M:ABB.Robotics.RobotStudio.Stations.SimulationObjCollection.CopyTo(ABB.Robotics.RobotStudio.ProjectObject[],System.Int32)"></member>
    <member name="P:ABB.Robotics.RobotStudio.Stations.SimulationObjCollection.Count"></member>
    <member name="M:ABB.Robotics.RobotStudio.Stations.SimulationObjCollection.GetEnumerator"></member>
    <member name="P:ABB.Robotics.RobotStudio.Stations.SimulationObjCollection.Item(System.Int32)"></member>
    <member name="M:ABB.Robotics.RobotStudio.Stations.SimulationObjCollection.Remove(ABB.Robotics.RobotStudio.ProjectObject)"></member>
    <member name="M:ABB.Robotics.RobotStudio.Stations.SimulationObjCollection.ToArray"></member>
    <member name="T:ABB.Robotics.RobotStudio.Stations.SimulationState"></member>
    <member name="F:ABB.Robotics.RobotStudio.Stations.SimulationState.Init"></member>
    <member name="F:ABB.Robotics.RobotStudio.Stations.SimulationState.Paused"></member>
    <member name="F:ABB.Robotics.RobotStudio.Stations.SimulationState.Ready"></member>
    <member name="F:ABB.Robotics.RobotStudio.Stations.SimulationState.Running"></member>
    <member name="F:ABB.Robotics.RobotStudio.Stations.SimulationState.Shutdown"></member>
    <member name="F:ABB.Robotics.RobotStudio.Stations.SimulationState.Stopped"></member>
    <member name="T:ABB.Robotics.RobotStudio.Stations.SimulationStopwatch"></member>
    <member name="M:ABB.Robotics.RobotStudio.Stations.SimulationStopwatch.#ctor"></member>
    <member name="P:ABB.Robotics.RobotStudio.Stations.SimulationStopwatch.StartTrigger"></member>
    <member name="P:ABB.Robotics.RobotStudio.Stations.SimulationStopwatch.StopTrigger"></member>
    <member name="T:ABB.Robotics.RobotStudio.Stations.SimulationStopwatchCollection"></member>
    <member name="M:ABB.Robotics.RobotStudio.Stations.SimulationStopwatchCollection.Add(ABB.Robotics.RobotStudio.Stations.SimulationStopwatch)"></member>
    <member name="M:ABB.Robotics.RobotStudio.Stations.SimulationStopwatchCollection.Contains(ABB.Robotics.RobotStudio.Stations.SimulationStopwatch)"></member>
    <member name="M:ABB.Robotics.RobotStudio.Stations.SimulationStopwatchCollection.CopyTo(ABB.Robotics.RobotStudio.Stations.SimulationStopwatch[],System.Int32)"></member>
    <member name="M:ABB.Robotics.RobotStudio.Stations.SimulationStopwatchCollection.CopyTo(System.Array,System.Int32)"></member>
    <member name="P:ABB.Robotics.RobotStudio.Stations.SimulationStopwatchCollection.Count"></member>
    <member name="M:ABB.Robotics.RobotStudio.Stations.SimulationStopwatchCollection.GetEnumerator"></member>
    <member name="P:ABB.Robotics.RobotStudio.Stations.SimulationStopwatchCollection.IsSynchronized"></member>
    <member name="P:ABB.Robotics.RobotStudio.Stations.SimulationStopwatchCollection.Item(System.Int32)"></member>
    <member name="P:ABB.Robotics.RobotStudio.Stations.SimulationStopwatchCollection.Parent"></member>
    <member name="M:ABB.Robotics.RobotStudio.Stations.SimulationStopwatchCollection.Remove(ABB.Robotics.RobotStudio.Stations.SimulationStopwatch)"></member>
    <member name="P:ABB.Robotics.RobotStudio.Stations.SimulationStopwatchCollection.SyncRoot"></member>
    <member name="M:ABB.Robotics.RobotStudio.Stations.SimulationStopwatchCollection.ToArray"></member>
    <member name="T:ABB.Robotics.RobotStudio.Stations.Simulator"></member>
    <member name="P:ABB.Robotics.RobotStudio.Stations.Simulator.ActiveConfiguration"></member>
    <member name="E:ABB.Robotics.RobotStudio.Stations.Simulator.ActiveConfigurationChanged">
      <summary>
            Raised when the ActiveConfiguration property changes. 
            </summary>
    </member>
    <member name="P:ABB.Robotics.RobotStudio.Stations.Simulator.CurrentTime">
      <summary>
            Gets the current simulation time (in milliseconds).
            </summary>
    </member>
    <member name="P:ABB.Robotics.RobotStudio.Stations.Simulator.DataRecorder">
      <summary>
            Gets the data recorder that records simulation data.
            </summary>
    </member>
    <member name="E:ABB.Robotics.RobotStudio.Stations.Simulator.EvaluateTrigger">
      <summary>
            Occurs when an event table trigger should be evaluated
            </summary>
    </member>
    <member name="E:ABB.Robotics.RobotStudio.Stations.Simulator.ExecuteAction">
      <summary>
            Occurs when an event table action should be executed
            </summary>
    </member>
    <member name="P:ABB.Robotics.RobotStudio.Stations.Simulator.FullSpeed">
      <summary>
            Gets or sets a value indicating if the simulation should run
            at maximum possible speed.
            </summary>
    </member>
    <member name="M:ABB.Robotics.RobotStudio.Stations.Simulator.Pause"></member>
    <member name="E:ABB.Robotics.RobotStudio.Stations.Simulator.ProcessTimerEnableChanged"></member>
    <member name="P:ABB.Robotics.RobotStudio.Stations.Simulator.ProcessTimerEnabled"></member>
    <member name="E:ABB.Robotics.RobotStudio.Stations.Simulator.ProcessTimerReset"></member>
    <member name="P:ABB.Robotics.RobotStudio.Stations.Simulator.RecordingEnabled"></member>
    <member name="M:ABB.Robotics.RobotStudio.Stations.Simulator.ResetProcessTimer"></member>
    <member name="P:ABB.Robotics.RobotStudio.Stations.Simulator.Resolution">
      <summary>
            Gets or sets the desired virtual time step (in milliseconds).
            </summary>
    </member>
    <member name="M:ABB.Robotics.RobotStudio.Stations.Simulator.Resume"></member>
    <member name="P:ABB.Robotics.RobotStudio.Stations.Simulator.SimulationSpeed">
      <summary>
            Gets or sets the desired simulation speed, defined as
            the ratio between virtual time and real time.
            </summary>
    </member>
    <member name="P:ABB.Robotics.RobotStudio.Stations.Simulator.SimulationStepTimeout">
      <summary>
            ABB internal use only.
            </summary>
    </member>
    <member name="M:ABB.Robotics.RobotStudio.Stations.Simulator.Start"></member>
    <member name="M:ABB.Robotics.RobotStudio.Stations.Simulator.StartAsync"></member>
    <member name="E:ABB.Robotics.RobotStudio.Stations.Simulator.Starting">
      <summary>
            Raised before the simulation starts, giving clients a chance to abort the start
            </summary>
    </member>
    <member name="P:ABB.Robotics.RobotStudio.Stations.Simulator.State"></member>
    <member name="E:ABB.Robotics.RobotStudio.Stations.Simulator.StateChanged">
      <summary>
            Occurs when the state of the simulator has changed, such as when started or stopped.
            </summary>
    </member>
    <member name="M:ABB.Robotics.RobotStudio.Stations.Simulator.Step">
      <summary>
            Advances the current simulation one time step.
            </summary>
    </member>
    <member name="M:ABB.Robotics.RobotStudio.Stations.Simulator.Stop"></member>
    <member name="E:ABB.Robotics.RobotStudio.Stations.Simulator.Tick">
      <summary>
            Occurs when the simulation advances one tick.
            </summary>
    </member>
    <member name="T:ABB.Robotics.RobotStudio.Stations.SmartComponent">
      <summary>
            Represents a <see cref="T:ABB.Robotics.RobotStudio.Stations.GraphicComponent" /> that contains <see cref="T:ABB.Robotics.RobotStudio.Stations.DynamicProperty">Properties</see>,
            <see cref="T:ABB.Robotics.RobotStudio.Stations.IOSignal">I/O Signals</see>, <see cref="!:Asset">Assets</see> and other
            <see cref="T:ABB.Robotics.RobotStudio.Stations.GraphicComponent">GraphicComponents</see>.
            The behavior of the component is implemented by <see cref="!:SmartComponentCodeBehind">Code Behind</see>.
            </summary>
    </member>
    <member name="M:ABB.Robotics.RobotStudio.Stations.SmartComponent.#ctor">
      <summary>
            Creates and initializes a new SmartComponent object.
            </summary>
      <returns>The new SmartComponent object</returns>
    </member>
    <member name="P:ABB.Robotics.RobotStudio.Stations.SmartComponent.Assets">
      <summary>
            Gets an <see cref="T:ABB.Robotics.RobotStudio.Stations.AssetCollection" /> that represents all the assets
            of this SmartComponent object.
            </summary>
    </member>
    <member name="M:ABB.Robotics.RobotStudio.Stations.SmartComponent.Attach(ABB.Robotics.RobotStudio.Stations.IAttachableChild,System.Boolean,ABB.Robotics.Math.Matrix4)">
      <summary>
            Attaches a child object to this SmartComponent.
            </summary>
      <param name="child">The child to be attached.</param>
      <param name="mount">Specifies whether the child should be mounted, i.e. moved, on to the location of the parent</param>
      <param name="offset">Specifies the offset matrix to be used from the attachment point.
            This is only used when mount is set to True.</param>
      <returns>True, if the attachmet succeded</returns>
    </member>
    <member name="P:ABB.Robotics.RobotStudio.Stations.SmartComponent.Bindings">
      <summary>
            Gets an PropertyBindingCollection object that represents all the bindings
            of this SmartComponent object.
            </summary>
    </member>
    <member name="M:ABB.Robotics.RobotStudio.Stations.SmartComponent.CanAttachChild(ABB.Robotics.RobotStudio.Stations.IAttachableChild)">
      <summary>
            Test if the suppiled child can be attached.
            </summary>
      <param name="child">The child to be tested.</param>
      <returns>True, if the supplied child can be attached, false otherwise</returns>
    </member>
    <member name="P:ABB.Robotics.RobotStudio.Stations.SmartComponent.CanBeSimulated">
      <summary>
            Gets or sets a value that indicates whether this SmartComponent
            object can be simulated, e.g. if the code behind implements the SimTime methods.
            </summary>
    </member>
    <member name="P:ABB.Robotics.RobotStudio.Stations.SmartComponent.CodeBehindLocation">
      <summary>
            Gets or sets the the location of the <see cref="T:ABB.Robotics.RobotStudio.Stations.SmartComponentCodeBehind" /> class associated with this component.
            </summary>
    </member>
    <member name="P:ABB.Robotics.RobotStudio.Stations.SmartComponent.Connections">
      <summary>
            Gets an <see cref="T:ABB.Robotics.RobotStudio.Stations.IOConnectionCollection" /> that represents all the I/O connections on this
            SmartComponent object.
            </summary>
    </member>
    <member name="P:ABB.Robotics.RobotStudio.Stations.SmartComponent.Description">
      <summary>
            Gets a localized description for this SmartComponent object.
            </summary>
    </member>
    <member name="M:ABB.Robotics.RobotStudio.Stations.SmartComponent.Detach(ABB.Robotics.RobotStudio.Stations.IAttachableChild)">
      <summary>
            Detaches a child object from this SmartComponent.
            </summary>
      <param name="child">The child to be detached.</param>
      <returns>True, if the detachment succeded</returns>
    </member>
    <member name="P:ABB.Robotics.RobotStudio.Stations.SmartComponent.DisplayName"></member>
    <member name="M:ABB.Robotics.RobotStudio.Stations.SmartComponent.GetCollectionObjects(ABB.Robotics.RobotStudio.ProjectObject)">
      <summary>
            Returns the objects contained by a SmartComponent that represents a collection.
            </summary>
      <param name="projectObject" />
      <returns> Objects in the collection, or projectObject itself if it is not a collection </returns>
    </member>
    <member name="M:ABB.Robotics.RobotStudio.Stations.SmartComponent.GetResourceString(System.String)">
      <summary>
            Returns a localized resource string
            </summary>
      <param name="id">String id in the resource asset</param>
      <returns>Localized string, or String.Empty if the id was not found</returns>
    </member>
    <member name="P:ABB.Robotics.RobotStudio.Stations.SmartComponent.GraphicComponents">
      <summary>
            Gets a <see cref="T:ABB.Robotics.RobotStudio.Stations.GraphicComponentCollection" /> that represents all the graphic components
            in this SmartComponent object.
            </summary>
    </member>
    <member name="P:ABB.Robotics.RobotStudio.Stations.SmartComponent.Icon">
      <summary>
            Gets a <see cref="T:System.Drawing.Image" /> associated with this SmartComponent object.
            </summary>
    </member>
    <member name="M:ABB.Robotics.RobotStudio.Stations.SmartComponent.InitializeCodeBehind">
      <summary>
            Initializes the associated <see cref="!:SmartComponentCodeBehind" />, if it exists.
            If this Smart Component has an assoicated Code Behind Assembly is necessary to call this method before a Smart Component is saved to library.
            The Code Behind assembly will be loaded, if its not already loaded, and the <see cref="!:SmartComponentCodeBehind.OnInitialize" /> method will be called.
            </summary>
    </member>
    <member name="E:ABB.Robotics.RobotStudio.Stations.SmartComponent.IOSignalChanged">
      <summary>
            Raised whenever any property except Value changes on one of the signals in the <see cref="P:ABB.Robotics.RobotStudio.Stations.SmartComponent.IOSignals" /> collection
            </summary>
    </member>
    <member name="P:ABB.Robotics.RobotStudio.Stations.SmartComponent.IOSignals">
      <summary>
            Gets an <see cref="T:ABB.Robotics.RobotStudio.Stations.IOSignalCollection" /> that represents all the I/O signals on this
            SmartComponent object.
            </summary>
    </member>
    <member name="E:ABB.Robotics.RobotStudio.Stations.SmartComponent.IOSignalValueChanged">
      <summary>
            Raised whenever the Value property changes on one of the signals in the <see cref="P:ABB.Robotics.RobotStudio.Stations.SmartComponent.IOSignals" /> collection
            </summary>
    </member>
    <member name="P:ABB.Robotics.RobotStudio.Stations.SmartComponent.IsBaseComponent">
      <summary>
            Returns true if this is a built-in base component.
            </summary>
    </member>
    <member name="P:ABB.Robotics.RobotStudio.Stations.SmartComponent.IsProtected">
      <summary>
            Gets or sets a value that indicates if the internal structure of this component should be hidden in the GUI,
            and if the component should be locked for editing.
            </summary>
    </member>
    <member name="P:ABB.Robotics.RobotStudio.Stations.SmartComponent.LanguageOverride">
      <summary>
            Forces this component to use the specified language for resources rather than the language set in Options.
            </summary>
    </member>
    <member name="P:ABB.Robotics.RobotStudio.Stations.SmartComponent.Properties">
      <summary>
            Gets a <see cref="T:ABB.Robotics.RobotStudio.Stations.DynamicPropertyCollection" /> that represents all the properties
            of this SmartComponent object.
            </summary>
    </member>
    <member name="E:ABB.Robotics.RobotStudio.Stations.SmartComponent.PropertyChanged">
      <summary>
            Raised whenever any property except Value changes on one of the properties in the <see cref="P:ABB.Robotics.RobotStudio.Stations.SmartComponent.Properties" /> collection
            </summary>
    </member>
    <member name="E:ABB.Robotics.RobotStudio.Stations.SmartComponent.PropertyValueChanged">
      <summary>
            Raised whenever the Value property changes on one of the properties in the <see cref="P:ABB.Robotics.RobotStudio.Stations.SmartComponent.Properties" /> collection
            </summary>
    </member>
    <member name="M:ABB.Robotics.RobotStudio.Stations.SmartComponent.RaiseIOSignalChanged(ABB.Robotics.RobotStudio.Stations.IOSignal)">
      <summary>
            Raises the <see cref="E:ABB.Robotics.RobotStudio.Stations.SmartComponent.IOSignalChanged" /> event. Call this method to force update of the GUI of a signal.
            </summary>
    </member>
    <member name="M:ABB.Robotics.RobotStudio.Stations.SmartComponent.RaisePropertyChanged(ABB.Robotics.RobotStudio.Stations.DynamicProperty)">
      <summary>
            Raises the <see cref="E:ABB.Robotics.RobotStudio.Stations.SmartComponent.PropertyChanged" /> event. Call this method to force update of the GUI of a property.
            </summary>
    </member>
    <member name="P:ABB.Robotics.RobotStudio.Stations.SmartComponent.RoleObject">
      <summary>
            Gets or sets an object that defines the role of this SmartComponent.
            </summary>
    </member>
    <member name="P:ABB.Robotics.RobotStudio.Stations.SmartComponent.StateCache">
      <summary> Returns a collection that can be used by code behind to cache
            state information for this SmartComponent object. </summary>
    </member>
    <member name="T:ABB.Robotics.RobotStudio.Stations.SmartComponentCodeBehind">
      <summary>
            Base class for code-behind that implements behavior of a <see cref="T:ABB.Robotics.RobotStudio.Stations.SmartComponent" />.
            </summary>
    </member>
    <member name="M:ABB.Robotics.RobotStudio.Stations.SmartComponentCodeBehind.#ctor"></member>
    <member name="M:ABB.Robotics.RobotStudio.Stations.SmartComponentCodeBehind.OnInitialize(ABB.Robotics.RobotStudio.Stations.SmartComponent)">
      <summary>
            Called from <see cref="!:SmartComponent.InitializeCodeBehind" />.
            </summary>
      <param name="component">Smart Component</param>
    </member>
    <member name="M:ABB.Robotics.RobotStudio.Stations.SmartComponentCodeBehind.OnIOSignalValueChanged(ABB.Robotics.RobotStudio.Stations.SmartComponent,ABB.Robotics.RobotStudio.Stations.IOSignal)">
      <summary>
            Called when the value of an I/O signal changes.
            </summary>
      <param name="component">Component that owns the changed signal.</param>
      <param name="changedSignal">Changed signal.</param>
    </member>
    <member name="M:ABB.Robotics.RobotStudio.Stations.SmartComponentCodeBehind.OnLibraryReplaced(ABB.Robotics.RobotStudio.Stations.SmartComponent)">
      <summary>
            Called if the library containing the SmartComponent has been replaced
            </summary>
      <param name="component">Smart Component</param>
    </member>
    <member name="M:ABB.Robotics.RobotStudio.Stations.SmartComponentCodeBehind.OnLoad(ABB.Robotics.RobotStudio.Stations.SmartComponent)">
      <summary>
            Called when the library or station containing the SmartComponent has been loaded
            </summary>
      <param name="component">Smart Component</param>
    </member>
    <member name="M:ABB.Robotics.RobotStudio.Stations.SmartComponentCodeBehind.OnPropertyValueChanged(ABB.Robotics.RobotStudio.Stations.SmartComponent,ABB.Robotics.RobotStudio.Stations.DynamicProperty,System.Object)">
      <summary>
            Called when the component is added to the station
            </summary>
      <param name="component">Component that owns the changed property.</param>
      <param name="changedProperty">Changed property.</param>
      <param name="oldValue">Previous value of the changed property.</param>
    </member>
    <member name="M:ABB.Robotics.RobotStudio.Stations.SmartComponentCodeBehind.OnSimulationStart(ABB.Robotics.RobotStudio.Stations.SmartComponent)">
      <summary>
            Called when simulation is started.
            </summary>
      <param name="component">Simulated component.</param>
    </member>
    <member name="M:ABB.Robotics.RobotStudio.Stations.SmartComponentCodeBehind.OnSimulationStep(ABB.Robotics.RobotStudio.Stations.SmartComponent,System.Double,System.Double)">
      <summary>
            Called when simulation steps to a new time.
            </summary>
      <param name="component">Simulated component.</param>
      <param name="simulationTime">Time (in ms) for the current simulation step.</param>
      <param name="previousTime">Time (in ms) for the previous simulation step.</param>
    </member>
    <member name="M:ABB.Robotics.RobotStudio.Stations.SmartComponentCodeBehind.OnSimulationStop(ABB.Robotics.RobotStudio.Stations.SmartComponent)">
      <summary>
            Called when simulation is stopped.
            </summary>
      <param name="component">Simulated component.</param>
    </member>
    <member name="M:ABB.Robotics.RobotStudio.Stations.SmartComponentCodeBehind.QueryCollection(ABB.Robotics.RobotStudio.Stations.SmartComponent)">
      <summary>
            Called to determine the objects contained by a SmartComponent that represents a collection.
            </summary>
      <param name="component"> Component </param>
      <returns> Objects in the collection, or the component itself if it is not a collection. </returns>
    </member>
    <member name="M:ABB.Robotics.RobotStudio.Stations.SmartComponentCodeBehind.QueryInternalConnections(ABB.Robotics.RobotStudio.Stations.SmartComponent,ABB.Robotics.RobotStudio.Stations.IOSignal)">
      <summary>
            Called to determine the output signals affected by an input signal.
            </summary>
      <param name="component">Component</param>
      <param name="input">Input signal</param>
      <returns> Returns the output signals that are directly affected by the value of the input signal. </returns>
    </member>
    <member name="M:ABB.Robotics.RobotStudio.Stations.SmartComponentCodeBehind.QueryPropertyAttributeValue(ABB.Robotics.RobotStudio.Stations.SmartComponent,ABB.Robotics.RobotStudio.Stations.DynamicProperty,System.String)">
      <summary>
            Called to retrieve the actual value of a property attribute with the dummy value '?'.
            </summary>
      <param name="component">Component that owns the property.</param>
      <param name="owningProperty">Property that owns the attribute.</param>
      <param name="attributeName">Name of the attribute to query.</param>
      <returns> Value of the attribute. </returns>
    </member>
    <member name="M:ABB.Robotics.RobotStudio.Stations.SmartComponentCodeBehind.QueryPropertyValueValid(ABB.Robotics.RobotStudio.Stations.SmartComponent,ABB.Robotics.RobotStudio.Stations.DynamicProperty,System.Object)">
      <summary>
            Called to validate the value of a dynamic property with the CustomValidation attribute.
            </summary>
      <param name="component">Component that owns the changed property.</param>
      <param name="owningProperty">Property that owns the value to be validated.</param>
      <param name="newValue">Value to validate.</param>
      <returns> Result of the validation. </returns>
    </member>
    <member name="M:ABB.Robotics.RobotStudio.Stations.SmartComponentCodeBehind.QuerySimulationState(ABB.Robotics.RobotStudio.Stations.SmartComponent)">
      <summary>
            Called to determine the state of a simulated component.
            </summary>
      <param name="component">Simulated component.</param>
      <returns>Simulation state of the component.</returns>
    </member>
    <member name="M:ABB.Robotics.RobotStudio.Stations.SmartComponentCodeBehind.QuerySimulationStep(ABB.Robotics.RobotStudio.Stations.SmartComponent,System.Double)">
      <summary>
            Called to determine the duration of the next time step during simulation.
            </summary>
      <param name="component">Simulated component.</param>
      <param name="previousTime">Simulation time (in ms) for the previous step.</param>
      <returns>Returns the desired duration (in ms) of the next step, or 0 to use the default duration. </returns>
    </member>
    <member name="T:ABB.Robotics.RobotStudio.Stations.Station">
      <summary>
            The Station object is a set of objects with a spatial and/or logical relationship.
            </summary>
    </member>
    <member name="M:ABB.Robotics.RobotStudio.Stations.Station.#ctor">
      <summary>
            Creates and initiates a new Station object
            </summary>
    </member>
    <member name="M:ABB.Robotics.RobotStudio.Stations.Station.#ctor(System.Boolean)">
      <summary>
            Creates and initiates a new Station object
            </summary>
      <param name="setAsActive">Set the new Station as Project.ActiveProject.</param>
    </member>
    <member name="P:ABB.Robotics.RobotStudio.Stations.Station.ActiveStation">
      <summary>
            Gets the station that is currently active.
            </summary>
    </member>
    <member name="P:ABB.Robotics.RobotStudio.Stations.Station.ActiveTask">
      <summary>
            Gets the active RsTask of this Station object.
            </summary>
    </member>
    <member name="E:ABB.Robotics.RobotStudio.Stations.Station.ActiveTaskChanged">
      <summary>
            Occurs when the <b>ActiveTask</b> property has changed.
            </summary>
    </member>
    <member name="P:ABB.Robotics.RobotStudio.Stations.Station.Attachments">
      <summary>
            Gets a AttachmentCollection object that represents all the attachements
            on this Station object.
            </summary>
    </member>
    <member name="P:ABB.Robotics.RobotStudio.Stations.Station.Bindings"></member>
    <member name="P:ABB.Robotics.RobotStudio.Stations.Station.BuiltInDataRecorderSignals"></member>
    <member name="P:ABB.Robotics.RobotStudio.Stations.Station.Cameras">
      <summary>
            Gets a CameraCollection object that represents all the cameras
            on this Station object.
            </summary>
    </member>
    <member name="P:ABB.Robotics.RobotStudio.Stations.Station.ClipPlanes"></member>
    <member name="M:ABB.Robotics.RobotStudio.Stations.Station.Close">
      <summary>
            Closes this Station object
            </summary>
    </member>
    <member name="P:ABB.Robotics.RobotStudio.Stations.Station.CollisionSets">
      <summary>
            Gets a CollisionSetCollection object that represents all the CollisionSets
            on this Station object.
            </summary>
    </member>
    <member name="P:ABB.Robotics.RobotStudio.Stations.Station.Connections"></member>
    <member name="P:ABB.Robotics.RobotStudio.Stations.Station.DefaultTask">
      <summary>
            Gets the default RsTask of this Station object.
            </summary>
    </member>
    <member name="P:ABB.Robotics.RobotStudio.Stations.Station.Documents">
      <summary>
            Gets a the collection of <see cref="T:ABB.Robotics.RobotStudio.ProjectDocument">ProjectDocuments</see> associated
            with this Station.
            </summary>
    </member>
    <member name="M:ABB.Robotics.RobotStudio.Stations.Station.FindGraphicComponentsByType(System.Type)"></member>
    <member name="P:ABB.Robotics.RobotStudio.Stations.Station.Frames">
      <summary>
            Gets a FrameCollection object that represents all the Frames
            on this Station object.
            </summary>
    </member>
    <member name="M:ABB.Robotics.RobotStudio.Stations.Station.GetAllObjects">
      <summary>
            Returns an array of all ProjectObjects that are a part of this station (including the Station itself).
            For performance reasons, geometry objects (all objects below Part) are excluded.
            </summary>
    </member>
    <member name="P:ABB.Robotics.RobotStudio.Stations.Station.GraphicComponents">
      <summary>
            Gets a GraphicComponentCollection object that represents all the graphic components
            on this Station object.
            </summary>
    </member>
    <member name="E:ABB.Robotics.RobotStudio.Stations.Station.IOSignalChanged">
      <summary>
            Raised whenever any property except Value changes on one of the signals in the <see cref="P:ABB.Robotics.RobotStudio.Stations.Station.IOSignals" /> collection
            </summary>
    </member>
    <member name="P:ABB.Robotics.RobotStudio.Stations.Station.IOSignals"></member>
    <member name="E:ABB.Robotics.RobotStudio.Stations.Station.IOSignalValueChanged">
      <summary>
            Raised whenever the Value property changes on one of the IOSignals in the <see cref="P:ABB.Robotics.RobotStudio.Stations.Station.IOSignals" /> collection
            </summary>
    </member>
    <member name="P:ABB.Robotics.RobotStudio.Stations.Station.Irc5Controllers">
      <summary>
            Gets a Irc5ControllerCollection object that represents all the simulation configurations
            on this Station object.
            </summary>
    </member>
    <member name="P:ABB.Robotics.RobotStudio.Stations.Station.IsLoading">
      <summary>
            Returns true if a station is currently being loaded, false otherwise
            </summary>
    </member>
    <member name="P:ABB.Robotics.RobotStudio.Stations.Station.Lights"></member>
    <member name="M:ABB.Robotics.RobotStudio.Stations.Station.Load(System.String,System.Boolean)">
      <summary>
            Loads a new station from a file.
            </summary>
      <param name="fileName">The path of the station to be loaded.
            This must be an absolute path.</param>
      <param name="asReadOnly">If true, the station is loaded as read only.</param>
      <returns>
            A Station object.
            </returns>
      <exception cref="T:System.ArgumentException" />
      <exception cref="T:System.ArgumentNullException" />
      <exception cref="T:System.IO.DirectoryNotFoundException" />
      <exception cref="T:System.IO.FileNotFoundException" />
      <exception cref="T:System.UnauthorizedAccessException" />
      <exception cref="T:System.IO.IOException" />
    </member>
    <member name="M:ABB.Robotics.RobotStudio.Stations.Station.Load(System.String,System.Boolean,ABB.Robotics.RobotStudio.ProgressNotification)">
      <summary>
            Loads a new station from a file.
            </summary>
      <param name="fileName">The path of the station to be loaded.
            This must be an absolute path.</param>
      <param name="asReadOnly">If true, the station is loaded as read only.</param>
      <param name="progressDelegate">Callback delegate for load progress notification</param>
      <returns>
            A Station object.
            </returns>
      <exception cref="T:System.ArgumentException" />
      <exception cref="T:System.ArgumentNullException" />
      <exception cref="T:System.IO.DirectoryNotFoundException" />
      <exception cref="T:System.IO.FileNotFoundException" />
      <exception cref="T:System.UnauthorizedAccessException" />
      <exception cref="T:System.IO.IOException" />
    </member>
    <member name="M:ABB.Robotics.RobotStudio.Stations.Station.Load(System.String,System.Boolean,ABB.Robotics.RobotStudio.ProgressNotification,ABB.Robotics.RobotStudio.Stations.FileNotFoundNotification)">
      <summary>
            Loads a new station from a file.
            </summary>
      <param name="fileName">The path of the station to be loaded.
            This must be an absolute path.</param>
      <param name="asReadOnly">If true, the station is loaded as read only.</param>
      <param name="progressDelegate">Callback delegate for load progress notification</param>
      <param name="fileNotFoundDelegate">Callback delegate for file not found notification</param>
      <returns>
            A Station object.
            </returns>
      <exception cref="T:System.ArgumentException" />
      <exception cref="T:System.ArgumentNullException" />
      <exception cref="T:System.IO.DirectoryNotFoundException" />
      <exception cref="T:System.IO.FileNotFoundException" />
      <exception cref="T:System.UnauthorizedAccessException" />
      <exception cref="T:System.IO.IOException" />
    </member>
    <member name="M:ABB.Robotics.RobotStudio.Stations.Station.Load(System.String,System.Boolean,ABB.Robotics.RobotStudio.ProgressNotification,ABB.Robotics.RobotStudio.Stations.FileNotFoundNotification,System.Boolean)">
      <summary>
            Loads a new station from a file.
            </summary>
      <param name="fileName">The path of the station to be loaded.
            This must be an absolute path.</param>
      <param name="asReadOnly">If true, the station is loaded as read only.</param>
      <param name="progressDelegate">Callback delegate for load progress notification</param>
      <param name="fileNotFoundDelegate">Callback delegate for file not found notification</param>
      <param name="loadGeometry">If false, the station is loaded without gemoetries</param>
      <returns>
            A Station object.
            </returns>
      <exception cref="T:System.ArgumentException" />
      <exception cref="T:System.ArgumentNullException" />
      <exception cref="T:System.IO.DirectoryNotFoundException" />
      <exception cref="T:System.IO.FileNotFoundException" />
      <exception cref="T:System.UnauthorizedAccessException" />
      <exception cref="T:System.IO.IOException" />
    </member>
    <member name="P:ABB.Robotics.RobotStudio.Stations.Station.Markups">
      <summary>
            Gets a MarkupCollection object that represents all the markups
            on this Station object.
            </summary>
    </member>
    <member name="P:ABB.Robotics.RobotStudio.Stations.Station.Name">
      <summary>
            Gets the name text of this Station object.
            </summary>
    </member>
    <member name="P:ABB.Robotics.RobotStudio.Stations.Station.ParticleSystems"></member>
    <member name="P:ABB.Robotics.RobotStudio.Stations.Station.PointClouds"></member>
    <member name="M:ABB.Robotics.RobotStudio.Stations.Station.Save">
      <summary>
            Saves the station to file.
            </summary>
    </member>
    <member name="M:ABB.Robotics.RobotStudio.Stations.Station.SaveAs(System.String)">
      <summary>
            Saves the station to a station file on a new location.
            </summary>
      <exception cref="T:System.ArgumentException" />
      <exception cref="T:System.ArgumentNullException" />
      <exception cref="T:System.IO.DirectoryNotFoundException" />
      <exception cref="T:System.IO.FileNotFoundException" />
      <exception cref="T:System.UnauthorizedAccessException" />
      <exception cref="T:System.IO.IOException" />
      <exception cref="T:System.ArgumentException">
            The specified file name is invalid.
            </exception>
    </member>
    <member name="M:ABB.Robotics.RobotStudio.Stations.Station.SaveCopyAs(System.String,System.Boolean)">
      <summary>
            Saves a copy of the station to file, optionally removing CAD Geometry from the saved station.
            </summary>
    </member>
    <member name="P:ABB.Robotics.RobotStudio.Stations.Station.SimulationConfigurations">
      <summary>
            Gets a SimulationConfigurationCollection object that represents all the simulation configurations
            on this Station object.
            </summary>
    </member>
    <member name="P:ABB.Robotics.RobotStudio.Stations.Station.Tags">
      <summary>
            Gets a ProjectObjectTagCollection object that represents all the ProjectObjectTags
            on this Station object.
            </summary>
    </member>
    <member name="P:ABB.Robotics.RobotStudio.Stations.Station.TemporaryGraphics">
      <summary>
            Gets the <see cref="T:ABB.Robotics.RobotStudio.Stations.Forms.TemporaryGraphicCollection" /> that represents all the temporary graphic objects in the station.
            </summary>
    </member>
    <member name="P:ABB.Robotics.RobotStudio.Stations.Station.Transform">
      <summary>
            Gets the Transform of this Station object.
            </summary>
    </member>
    <member name="P:ABB.Robotics.RobotStudio.Stations.Station.UCS">
      <summary>
            Sets or returns the Transform object defining the UCS (User Coordinate System).
            The UCS is defined by setting the UCS property to an Transform object.
            </summary>
    </member>
    <member name="E:ABB.Robotics.RobotStudio.Stations.Station.UCSChanged">
      <summary>
            Occurs when the <b>UCSObject</b> property has changed.
            </summary>
    </member>
    <member name="M:ABB.Robotics.RobotStudio.Stations.Station.UpdateGraphics">
      <summary>
            Ensures that the graphics gets updated to reflect recent changes.
            </summary>
    </member>
    <member name="M:ABB.Robotics.RobotStudio.Stations.Station.UpdateGraphics(System.Boolean)">
      <summary>
            Ensures that the graphics gets updated to reflect recent changes.
            </summary>
      <param name="forceRefresh">Forces a full and immediate refresh. Use only if absolutely needed!</param>
    </member>
    <member name="P:ABB.Robotics.RobotStudio.Stations.Station.VirtualSignals">
      <summary>
            Gets the <see cref="T:ABB.Robotics.RobotStudio.Stations.VirtualSignalCollection" /> that represents all digital and analog signals in the station. The virtual signals are used together with the <see cref="T:EventManager" />.
            </summary>
    </member>
    <member name="T:ABB.Robotics.RobotStudio.Stations.StopwatchTrigger"></member>
    <member name="F:ABB.Robotics.RobotStudio.Stations.StopwatchTrigger.Name"></member>
    <member name="F:ABB.Robotics.RobotStudio.Stations.StopwatchTrigger.Source"></member>
    <member name="F:ABB.Robotics.RobotStudio.Stations.StopwatchTrigger.TriggerType"></member>
    <member name="F:ABB.Robotics.RobotStudio.Stations.StopwatchTrigger.Value"></member>
    <member name="T:ABB.Robotics.RobotStudio.Stations.StopwatchTriggerType"></member>
    <member name="F:ABB.Robotics.RobotStudio.Stations.StopwatchTriggerType.None"></member>
    <member name="F:ABB.Robotics.RobotStudio.Stations.StopwatchTriggerType.SimulationStartStop"></member>
    <member name="F:ABB.Robotics.RobotStudio.Stations.StopwatchTriggerType.TargetChanged"></member>
    <member name="F:ABB.Robotics.RobotStudio.Stations.StopwatchTriggerType.IOValue"></member>
    <member name="T:ABB.Robotics.RobotStudio.Stations.SweepOptions">
      <summary>The different options for sweeping.</summary>
    </member>
    <member name="M:ABB.Robotics.RobotStudio.Stations.SweepOptions.#ctor"></member>
    <member name="P:ABB.Robotics.RobotStudio.Stations.SweepOptions.MakeSolid">
      <summary>
            If <b>true</b> the sweep will create a solid body. If <b>false</b> the sweep will create a sheet body.
            </summary>
    </member>
    <member name="T:ABB.Robotics.RobotStudio.Stations.SyncDirection">
      <summary>
            Specifies the direction for a RAPIDSync session.
            </summary>
    </member>
    <member name="F:ABB.Robotics.RobotStudio.Stations.SyncDirection.ToStation"></member>
    <member name="F:ABB.Robotics.RobotStudio.Stations.SyncDirection.ToController"></member>
    <member name="T:ABB.Robotics.RobotStudio.Stations.SyncLogMessage">
      <summary>
            Represents a log message from the RAPIDSync system. The log message can be translated and displayed to the user, and also treated programmatically.
            The <see cref="T:ABB.Robotics.RobotStudio.Stations.SyncLogMessage" /> contains a list of strings which should be combined with a translated message to make it complete. It can for example be the location and name of a data declaration that has been created using RAPIDSync.
            </summary>
    </member>
    <member name="P:ABB.Robotics.RobotStudio.Stations.SyncLogMessage.Id">
      <summary>
            Gets a code the describes the type of message.		
            </summary>
    </member>
    <member name="P:ABB.Robotics.RobotStudio.Stations.SyncLogMessage.Severity">
      <summary>
            Gets the severity of the message. The severity ranges from informational to fatal error.
            </summary>
    </member>
    <member name="P:ABB.Robotics.RobotStudio.Stations.SyncLogMessage.StringArguments">
      <summary>
            Gets the string arguments of this message instance.
            </summary>
    </member>
    <member name="T:ABB.Robotics.RobotStudio.Stations.SyncLogMessageId">
      <summary>
            Specifies the different types of messages that can be generated from the RAPIDSync system.
            For each element it is documented how many strings the corresponding message has, and their meaning.
            </summary>
    </member>
    <member name="F:ABB.Robotics.RobotStudio.Stations.SyncLogMessageId.None"></member>
    <member name="F:ABB.Robotics.RobotStudio.Stations.SyncLogMessageId.DataCreated"></member>
    <member name="F:ABB.Robotics.RobotStudio.Stations.SyncLogMessageId.DataChanged"></member>
    <member name="F:ABB.Robotics.RobotStudio.Stations.SyncLogMessageId.DataRefAdded"></member>
    <member name="F:ABB.Robotics.RobotStudio.Stations.SyncLogMessageId.DataRefDeleted"></member>
    <member name="F:ABB.Robotics.RobotStudio.Stations.SyncLogMessageId.PathInstructionDeleted"></member>
    <member name="F:ABB.Robotics.RobotStudio.Stations.SyncLogMessageId.PathCallDeleted"></member>
    <member name="F:ABB.Robotics.RobotStudio.Stations.SyncLogMessageId.PathInstructionInserted"></member>
    <member name="F:ABB.Robotics.RobotStudio.Stations.SyncLogMessageId.PathCallInserted"></member>
    <member name="F:ABB.Robotics.RobotStudio.Stations.SyncLogMessageId.PathInstructionInsertedBefore"></member>
    <member name="F:ABB.Robotics.RobotStudio.Stations.SyncLogMessageId.PathCallInsertedBefore"></member>
    <member name="F:ABB.Robotics.RobotStudio.Stations.SyncLogMessageId.PathInstructionInsertedBefore2"></member>
    <member name="F:ABB.Robotics.RobotStudio.Stations.SyncLogMessageId.PathCallInsertedBefore2"></member>
    <member name="F:ABB.Robotics.RobotStudio.Stations.SyncLogMessageId.PathInstructionReplaced"></member>
    <member name="F:ABB.Robotics.RobotStudio.Stations.SyncLogMessageId.PathCallReplaced"></member>
    <member name="F:ABB.Robotics.RobotStudio.Stations.SyncLogMessageId.PathInstructionReplaced2"></member>
    <member name="F:ABB.Robotics.RobotStudio.Stations.SyncLogMessageId.PathCallReplaced2"></member>
    <member name="F:ABB.Robotics.RobotStudio.Stations.SyncLogMessageId.PathInstructionArgDeleted"></member>
    <member name="F:ABB.Robotics.RobotStudio.Stations.SyncLogMessageId.PathInstructionArgAdded"></member>
    <member name="F:ABB.Robotics.RobotStudio.Stations.SyncLogMessageId.PathInstructionArgReplaced"></member>
    <member name="F:ABB.Robotics.RobotStudio.Stations.SyncLogMessageId.PathInstructionArgReplaced2"></member>
    <member name="F:ABB.Robotics.RobotStudio.Stations.SyncLogMessageId.PathInstructionArgChanged"></member>
    <member name="F:ABB.Robotics.RobotStudio.Stations.SyncLogMessageId.ModuleCreated"></member>
    <member name="F:ABB.Robotics.RobotStudio.Stations.SyncLogMessageId.RoutineCreated"></member>
    <member name="F:ABB.Robotics.RobotStudio.Stations.SyncLogMessageId.PathCreated"></member>
    <member name="F:ABB.Robotics.RobotStudio.Stations.SyncLogMessageId.SyncStarted"></member>
    <member name="F:ABB.Robotics.RobotStudio.Stations.SyncLogMessageId.SyncCompleted"></member>
    <member name="F:ABB.Robotics.RobotStudio.Stations.SyncLogMessageId.DataRemovedLaterInsert"></member>
    <member name="F:ABB.Robotics.RobotStudio.Stations.SyncLogMessageId.DataFoundOtherGlobal"></member>
    <member name="F:ABB.Robotics.RobotStudio.Stations.SyncLogMessageId.DataModuleNotExist"></member>
    <member name="F:ABB.Robotics.RobotStudio.Stations.SyncLogMessageId.PathInstructionArgumentNotGlobal"></member>
    <member name="F:ABB.Robotics.RobotStudio.Stations.SyncLogMessageId.DataBadLocated"></member>
    <member name="F:ABB.Robotics.RobotStudio.Stations.SyncLogMessageId.DataHiding"></member>
    <member name="F:ABB.Robotics.RobotStudio.Stations.SyncLogMessageId.NotPathInstruction"></member>
    <member name="F:ABB.Robotics.RobotStudio.Stations.SyncLogMessageId.NotPathCall"></member>
    <member name="F:ABB.Robotics.RobotStudio.Stations.SyncLogMessageId.DataHidden"></member>
    <member name="F:ABB.Robotics.RobotStudio.Stations.SyncLogMessageId.DataNameConflict"></member>
    <member name="F:ABB.Robotics.RobotStudio.Stations.SyncLogMessageId.DataGlobalConflict"></member>
    <member name="F:ABB.Robotics.RobotStudio.Stations.SyncLogMessageId.RoutineGlobalConflict"></member>
    <member name="F:ABB.Robotics.RobotStudio.Stations.SyncLogMessageId.ModuleGlobalConflict"></member>
    <member name="F:ABB.Robotics.RobotStudio.Stations.SyncLogMessageId.ModuleReadonly"></member>
    <member name="F:ABB.Robotics.RobotStudio.Stations.SyncLogMessageId.ModuleNotExist"></member>
    <member name="F:ABB.Robotics.RobotStudio.Stations.SyncLogMessageId.RoutineNotExist"></member>
    <member name="F:ABB.Robotics.RobotStudio.Stations.SyncLogMessageId.PathNotExist"></member>
    <member name="F:ABB.Robotics.RobotStudio.Stations.SyncLogMessageId.SyncAborted"></member>
    <member name="F:ABB.Robotics.RobotStudio.Stations.SyncLogMessageId.ModuleNotCreated"></member>
    <member name="F:ABB.Robotics.RobotStudio.Stations.SyncLogMessageId.RoutineNotCreated"></member>
    <member name="F:ABB.Robotics.RobotStudio.Stations.SyncLogMessageId.IdentifierTooLong"></member>
    <member name="T:ABB.Robotics.RobotStudio.Stations.SyncLogMessageSeverity">
      <summary>
            Specifies the different severity levels defined for log messages.
            </summary>
    </member>
    <member name="F:ABB.Robotics.RobotStudio.Stations.SyncLogMessageSeverity.None"></member>
    <member name="F:ABB.Robotics.RobotStudio.Stations.SyncLogMessageSeverity.Information"></member>
    <member name="F:ABB.Robotics.RobotStudio.Stations.SyncLogMessageSeverity.Warning"></member>
    <member name="F:ABB.Robotics.RobotStudio.Stations.SyncLogMessageSeverity.Error"></member>
    <member name="F:ABB.Robotics.RobotStudio.Stations.SyncLogMessageSeverity.FatalError"></member>
    <member name="T:ABB.Robotics.RobotStudio.Stations.TargetReachEventArgs">
      <summary>
            Provides data for the TargetReach event.
            </summary>
    </member>
    <member name="M:ABB.Robotics.RobotStudio.Stations.TargetReachEventArgs.GetMechanicalUnits"></member>
    <member name="P:ABB.Robotics.RobotStudio.Stations.TargetReachEventArgs.Target"></member>
    <member name="T:ABB.Robotics.RobotStudio.Stations.Texture">
      <summary>
            Represents a texture image that can be applied to surfaces in the 3D view
            </summary>
    </member>
    <member name="M:ABB.Robotics.RobotStudio.Stations.Texture.#ctor"></member>
    <member name="M:ABB.Robotics.RobotStudio.Stations.Texture.#ctor(System.Drawing.Bitmap)"></member>
    <member name="M:ABB.Robotics.RobotStudio.Stations.Texture.#ctor(System.Drawing.Bitmap,ABB.Robotics.RobotStudio.Stations.TextureType)"></member>
    <member name="M:ABB.Robotics.RobotStudio.Stations.Texture.#ctor(System.String)"></member>
    <member name="M:ABB.Robotics.RobotStudio.Stations.Texture.#ctor(System.String,ABB.Robotics.RobotStudio.Stations.TextureType)"></member>
    <member name="M:ABB.Robotics.RobotStudio.Stations.Texture.CreateCubeMap(System.Drawing.Bitmap[])">
      <summary>
            Creates a cube map texture from 6 individual bitmaps.
            </summary>
    </member>
    <member name="M:ABB.Robotics.RobotStudio.Stations.Texture.CreateCubeMap(System.String)">
      <summary>
            Creates a cube map texture from a single image with the six sides stacked
            horizontally
            </summary>
    </member>
    <member name="M:ABB.Robotics.RobotStudio.Stations.Texture.CreateCubeMap(System.String[])">
      <summary>
            Creates a cube map texture from 6 individual images.
            </summary>
    </member>
    <member name="M:ABB.Robotics.RobotStudio.Stations.Texture.CreateNormalMapFromHeightMap(System.String)">
      <summary>
            This method is obsolete. RobotStudio will automatically detect grayscale images and treat them as height maps
            if TextureType is set to NormalMap when creating new Textures.
            </summary>
    </member>
    <member name="M:ABB.Robotics.RobotStudio.Stations.Texture.CreateParallaxBumpMap(System.String,System.String)">
      <summary>
            This method is obsolete.
            </summary>
    </member>
    <member name="P:ABB.Robotics.RobotStudio.Stations.Texture.DefaultEnvironmentMap">
      <summary>
            Returns a default texture suitable for simple environment mapping
            </summary>
    </member>
    <member name="M:ABB.Robotics.RobotStudio.Stations.Texture.Equals(System.Object)"></member>
    <member name="P:ABB.Robotics.RobotStudio.Stations.Texture.FileName">
      <summary>
            Returns the path of the bitmap file that this texture was originally created from.
            </summary>
    </member>
    <member name="M:ABB.Robotics.RobotStudio.Stations.Texture.GetAllTextures">
      <summary>
            Returns an array containing all textures that are currently in memory.
            </summary>
    </member>
    <member name="M:ABB.Robotics.RobotStudio.Stations.Texture.GetHashCode"></member>
    <member name="P:ABB.Robotics.RobotStudio.Stations.Texture.NativeTexture">
      <summary>
            Internal use only.
            </summary>
    </member>
    <member name="M:ABB.Robotics.RobotStudio.Stations.Texture.SetImage(System.Drawing.Bitmap)">
      <summary>
            Replaces the texture image with a new one
            </summary>
    </member>
    <member name="P:ABB.Robotics.RobotStudio.Stations.Texture.Size">
      <summary>
            Returns the size (in pixels) of the texture image
            </summary>
    </member>
    <member name="P:ABB.Robotics.RobotStudio.Stations.Texture.TextureType"></member>
    <member name="M:ABB.Robotics.RobotStudio.Stations.Texture.ToString"></member>
    <member name="T:ABB.Robotics.RobotStudio.Stations.TextureType"></member>
    <member name="F:ABB.Robotics.RobotStudio.Stations.TextureType.Default"></member>
    <member name="F:ABB.Robotics.RobotStudio.Stations.TextureType.EnvironmentMap"></member>
    <member name="F:ABB.Robotics.RobotStudio.Stations.TextureType.NormalMap"></member>
    <member name="T:ABB.Robotics.RobotStudio.Stations.TickEventArgs">
      <summary>
            Provides data for the <b>Tick</b> event
            </summary>
    </member>
    <member name="P:ABB.Robotics.RobotStudio.Stations.TickEventArgs.Time"></member>
    <member name="T:ABB.Robotics.RobotStudio.Stations.TickEventHandler"></member>
    <member name="T:ABB.Robotics.RobotStudio.Stations.ToolDataInfo">
      <summary>
            Represents the geometric information about a modeled tool. When modeling a mechanism it is possible
            to define information that can be used to create a <see cref="T:ABB.Robotics.RobotStudio.Stations.RsToolData" /> object. The tooldata is
            RobotStudios representation of the RAPID <b>tooldata</b> data type. The <see cref="T:ABB.Robotics.RobotStudio.Stations.RsToolData" /> contains
            information that is only relevant in the context of a RAPID program. For this reason all the inforamtion
            of a tooldata is not relvant to define when modeling a mechanism.
            </summary>
    </member>
    <member name="M:ABB.Robotics.RobotStudio.Stations.ToolDataInfo.Attach(ABB.Robotics.RobotStudio.Stations.IAttachableChild,System.Boolean)">
      <summary>
            Attaches the specified <see cref="T:ABB.Robotics.RobotStudio.Stations.IAttachableChild" /> to the link of this flange.
            Please refer to the documentation of <see cref="T:ABB.Robotics.RobotStudio.Stations.Attachment" /> for details about attaching objects to each other.
            </summary>
      <param name="child">The <see cref="T:ABB.Robotics.RobotStudio.Stations.IAttachableChild" /> to attach to the link of this flange.</param>
      <param name="mount">Specifies if the position of the child shall be affected by the attachment or not. See <see cref="T:ABB.Robotics.RobotStudio.Stations.Attachment" /> for details.</param>
      <returns>True if an attachment could be created, false otherwise</returns>
    </member>
    <member name="P:ABB.Robotics.RobotStudio.Stations.ToolDataInfo.AxesOfMoment"></member>
    <member name="P:ABB.Robotics.RobotStudio.Stations.ToolDataInfo.CenterOfGravity"></member>
    <member name="M:ABB.Robotics.RobotStudio.Stations.ToolDataInfo.Detach(ABB.Robotics.RobotStudio.Stations.IAttachableChild)">
      <summary>
            Detaches the specified <see cref="T:ABB.Robotics.RobotStudio.Stations.IAttachableChild" /> from the link of this flange.
            Please refer to the documentation of <see cref="T:ABB.Robotics.RobotStudio.Stations.Attachment" /> for details about detaching objects.
            </summary>
      <param name="child">The <see cref="T:ABB.Robotics.RobotStudio.Stations.IAttachableChild" /> to detach from the link of this flange.</param>
      <returns>True if the child could be detached, false otherwise</returns>
    </member>
    <member name="M:ABB.Robotics.RobotStudio.Stations.ToolDataInfo.GetFrame">
      <summary>
            Gets the <see cref="T:ABB.Robotics.RobotStudio.Stations.Frame" /> that is associated with the <see cref="T:ABB.Robotics.RobotStudio.Stations.ToolDataInfo" />.
            This frame always has the same name as the tooldata info.
            </summary>
    </member>
    <member name="P:ABB.Robotics.RobotStudio.Stations.ToolDataInfo.Inertia"></member>
    <member name="P:ABB.Robotics.RobotStudio.Stations.ToolDataInfo.Name"></member>
    <member name="P:ABB.Robotics.RobotStudio.Stations.ToolDataInfo.ToolComponent"></member>
    <member name="P:ABB.Robotics.RobotStudio.Stations.ToolDataInfo.ToolFrame"></member>
    <member name="T:ABB.Robotics.RobotStudio.Stations.TrackedEventHandler"></member>
    <member name="T:ABB.Robotics.RobotStudio.Stations.TrackingStateEventArgs">
      <summary>
            Provides data for the <b>Tracked</b> event
            </summary>
    </member>
    <member name="P:ABB.Robotics.RobotStudio.Stations.TrackingStateEventArgs.ConveyorWorkpieceInfo"></member>
    <member name="P:ABB.Robotics.RobotStudio.Stations.TrackingStateEventArgs.TrackingState"></member>
    <member name="P:ABB.Robotics.RobotStudio.Stations.TrackingStateEventArgs.WorkpieceInfo"></member>
    <member name="T:ABB.Robotics.RobotStudio.Stations.Transform"></member>
    <member name="M:ABB.Robotics.RobotStudio.Stations.Transform.GetRelativeTransform(ABB.Robotics.RobotStudio.Stations.IHasTransform)"></member>
    <member name="M:ABB.Robotics.RobotStudio.Stations.Transform.GetRelativeTransform(ABB.Robotics.RobotStudio.Stations.Transform)"></member>
    <member name="P:ABB.Robotics.RobotStudio.Stations.Transform.GlobalMatrix"></member>
    <member name="P:ABB.Robotics.RobotStudio.Stations.Transform.Matrix"></member>
    <member name="P:ABB.Robotics.RobotStudio.Stations.Transform.Parent"></member>
    <member name="P:ABB.Robotics.RobotStudio.Stations.Transform.RX"></member>
    <member name="P:ABB.Robotics.RobotStudio.Stations.Transform.RY"></member>
    <member name="P:ABB.Robotics.RobotStudio.Stations.Transform.RZ"></member>
    <member name="M:ABB.Robotics.RobotStudio.Stations.Transform.SetRelativeTransform(ABB.Robotics.Math.Matrix4,ABB.Robotics.Math.Matrix4)"></member>
    <member name="M:ABB.Robotics.RobotStudio.Stations.Transform.SetRelativeTransform(ABB.Robotics.RobotStudio.Stations.IHasTransform,ABB.Robotics.Math.Matrix4)"></member>
    <member name="P:ABB.Robotics.RobotStudio.Stations.Transform.Translation"></member>
    <member name="P:ABB.Robotics.RobotStudio.Stations.Transform.X"></member>
    <member name="P:ABB.Robotics.RobotStudio.Stations.Transform.Y"></member>
    <member name="P:ABB.Robotics.RobotStudio.Stations.Transform.Z"></member>
    <member name="T:ABB.Robotics.RobotStudio.Stations.ValueValidationInfo">
      <summary>
            Contains information about the result of a property/signal value validation.
            </summary>
    </member>
    <member name="M:ABB.Robotics.RobotStudio.Stations.ValueValidationInfo.#ctor(ABB.Robotics.RobotStudio.Stations.ValueValidationResult)"></member>
    <member name="M:ABB.Robotics.RobotStudio.Stations.ValueValidationInfo.#ctor(ABB.Robotics.RobotStudio.Stations.ValueValidationResult,System.String)"></member>
    <member name="P:ABB.Robotics.RobotStudio.Stations.ValueValidationInfo.ErrorMessage">
      <summary> Returns a string that the validation errors. </summary>
    </member>
    <member name="P:ABB.Robotics.RobotStudio.Stations.ValueValidationInfo.Result">
      <summary> Returns the result of the validation. </summary>
    </member>
    <member name="P:ABB.Robotics.RobotStudio.Stations.ValueValidationInfo.Success">
      <summary> Returns true if the validation succeeded and the value was valid. </summary>
    </member>
    <member name="M:ABB.Robotics.RobotStudio.Stations.ValueValidationInfo.ToString"></member>
    <member name="F:ABB.Robotics.RobotStudio.Stations.ValueValidationInfo.Valid">
      <summary> Represents a successful validation. </summary>
    </member>
    <member name="T:ABB.Robotics.RobotStudio.Stations.ValueValidationResult">
      <summary />
    </member>
    <member name="F:ABB.Robotics.RobotStudio.Stations.ValueValidationResult.Valid"></member>
    <member name="F:ABB.Robotics.RobotStudio.Stations.ValueValidationResult.InvalidType"></member>
    <member name="F:ABB.Robotics.RobotStudio.Stations.ValueValidationResult.BelowMin"></member>
    <member name="F:ABB.Robotics.RobotStudio.Stations.ValueValidationResult.AboveMax"></member>
    <member name="F:ABB.Robotics.RobotStudio.Stations.ValueValidationResult.NotAllowed"></member>
    <member name="F:ABB.Robotics.RobotStudio.Stations.ValueValidationResult.TooShort"></member>
    <member name="F:ABB.Robotics.RobotStudio.Stations.ValueValidationResult.TooLong"></member>
    <member name="F:ABB.Robotics.RobotStudio.Stations.ValueValidationResult.InvalidProject"></member>
    <member name="F:ABB.Robotics.RobotStudio.Stations.ValueValidationResult.InvalidSyntax"></member>
    <member name="F:ABB.Robotics.RobotStudio.Stations.ValueValidationResult.Invalid"></member>
    <member name="T:ABB.Robotics.RobotStudio.Stations.Vertex">
      <summary>A Vertex refers to a point in object space, and is the corner of either a <see cref="T:ABB.Robotics.RobotStudio.Stations.Face" /> or a <see cref="T:ABB.Robotics.RobotStudio.Stations.Wire" />.<br /><img src="GeometryTopology.jpg" /></summary>
    </member>
    <member name="P:ABB.Robotics.RobotStudio.Stations.Vertex.Body">
      <summary>
            Gets the <see cref="P:ABB.Robotics.RobotStudio.Stations.Vertex.Body" /> that the <see cref="T:ABB.Robotics.RobotStudio.Stations.Vertex" /> belongs to.
            </summary>
    </member>
    <member name="M:ABB.Robotics.RobotStudio.Stations.Vertex.FindClosestVertex(ABB.Robotics.Math.Vector3)">
      <summary>Returns the <see cref="T:ABB.Robotics.RobotStudio.Stations.Vertex" /> that is closest to the provided point.</summary>
      <param name="testPoint">The point which to find the closest vertex to.</param>
      <returns>The closest <see cref="T:ABB.Robotics.RobotStudio.Stations.Vertex" />.</returns>
    </member>
    <member name="M:ABB.Robotics.RobotStudio.Stations.Vertex.GetEdges">
      <summary>
            Returns an array of <see cref="T:ABB.Robotics.RobotStudio.Stations.Edge" /> objects that are connected by this <see cref="T:ABB.Robotics.RobotStudio.Stations.Vertex" />.
            </summary>
    </member>
    <member name="P:ABB.Robotics.RobotStudio.Stations.Vertex.Position">
      <summary>
            Gets the position of the <see cref="T:ABB.Robotics.RobotStudio.Stations.Vertex" />.
            </summary>
    </member>
    <member name="T:ABB.Robotics.RobotStudio.Stations.Wire">
      <summary>A wire is a collection of <see cref="T:ABB.Robotics.RobotStudio.Stations.Edge" />s that are connected to each other, without being attached to a <see cref="T:ABB.Robotics.RobotStudio.Stations.Face" />.<br /><img src="GeometryTopology.jpg" /></summary>
    </member>
    <member name="P:ABB.Robotics.RobotStudio.Stations.Wire.Body">
      <summary>Gets the <see cref="P:ABB.Robotics.RobotStudio.Stations.Wire.Body" /> that the <see cref="T:ABB.Robotics.RobotStudio.Stations.Wire" /> belongs to.</summary>
    </member>
    <member name="P:ABB.Robotics.RobotStudio.Stations.Wire.Closed">
      <summary>Returns true if the wire is closed, else false.</summary>
    </member>
    <member name="P:ABB.Robotics.RobotStudio.Stations.Wire.Coedges">
      <summary>Returns a <see cref="T:ABB.Robotics.RobotStudio.Stations.CoedgeCollection" /> object containing the coedges
            of the wire.</summary>
    </member>
    <member name="P:ABB.Robotics.RobotStudio.Stations.Wire.Color">
      <summary>
            Gets or sets color of the wire in the graphics.
            </summary>
    </member>
    <member name="P:ABB.Robotics.RobotStudio.Stations.Wire.EndVertex">
      <summary>Returns the end <see cref="T:ABB.Robotics.RobotStudio.Stations.Vertex" />.</summary>
    </member>
    <member name="M:ABB.Robotics.RobotStudio.Stations.Wire.FindClosestVertex(ABB.Robotics.Math.Vector3)">
      <summary>Returns the <see cref="T:ABB.Robotics.RobotStudio.Stations.Vertex" /> of the <see cref="T:ABB.Robotics.RobotStudio.Stations.Wire" /> that is closest to the provided point.</summary>
      <param name="testPoint">The point which to find the closest vertex to.</param>
      <returns>The closest <see cref="T:ABB.Robotics.RobotStudio.Stations.Vertex" />.</returns>
    </member>
    <member name="M:ABB.Robotics.RobotStudio.Stations.Wire.GetEdges">
      <summary>Returns an array of <see cref="T:ABB.Robotics.RobotStudio.Stations.Edge" /> objects that the wire contains.
            </summary>
    </member>
    <member name="M:ABB.Robotics.RobotStudio.Stations.Wire.GetGlobalCurveIntersections(ABB.Robotics.RobotStudio.Stations.Wire[],System.Boolean)">
      <summary>Returns an array of <see cref="T:ABB.Robotics.Math.Vector3" /> elements that represent the
            intersections (as points) with supplied wires.</summary>
      <param name="wires">the array of <see cref="T:ABB.Robotics.RobotStudio.Stations.Wire" /> objects.</param>
      <param name="withinBounds">If true, the intersections will be checked
            within the start- and endpoints of the source wire, else intersections
            will be calculated in the extent of the first- and last <see cref="T:ABB.Robotics.RobotStudio.Stations.Edge" />.
            </param>
      <returns>An array of <see cref="T:ABB.Robotics.Math.Vector3" /> elements.</returns>
      <exception cref="T:System.ArgumentException" />
      <exception cref="T:System.ArgumentNullException" />
      <exception cref="T:System.InvalidOperationException" />
      <exception cref="T:System.IO.DirectoryNotFoundException" />
      <exception cref="T:System.IO.FileNotFoundException" />
      <exception cref="T:System.IO.IOException" />
      <exception cref="T:System.UnauthorizedAccessException" />
    </member>
    <member name="M:ABB.Robotics.RobotStudio.Stations.Wire.GetGlobalCurvesIntersections(System.Boolean)">
      <summary>Returns an array of <see cref="T:ABB.Robotics.Math.Vector3" /> elements that represent the
            intersections (as points) with supplied wires.</summary>
      <param name="withinBounds">If true, the intersections will be checked
            within the start- and endpoints of the source wire, else intersections
            will be calculated in the extent of the first- and last <see cref="T:ABB.Robotics.RobotStudio.Stations.Edge" />.
            </param>
      <returns>An array of <see cref="T:ABB.Robotics.Math.Vector3" /> elements.</returns>
      <exception cref="T:System.ArgumentException" />
      <exception cref="T:System.ArgumentNullException" />
      <exception cref="T:System.InvalidOperationException" />
      <exception cref="T:System.IO.DirectoryNotFoundException" />
      <exception cref="T:System.IO.FileNotFoundException" />
      <exception cref="T:System.IO.IOException" />
      <exception cref="T:System.UnauthorizedAccessException" />
    </member>
    <member name="M:ABB.Robotics.RobotStudio.Stations.Wire.GetLengthAtPoint(ABB.Robotics.Math.Vector3)">
      <summary>Returns the curve length from the start point of the wire to the
            supplied point on the wire.</summary>
      <param name="pointOnCurve">The point on curve to receive the length to.</param>
      <returns>The curve length from start point to the supplied point.</returns>
    </member>
    <member name="M:ABB.Robotics.RobotStudio.Stations.Wire.GetSection(ABB.Robotics.Math.Vector3,ABB.Robotics.Math.Vector3[])">
      <summary>Returns a section of the supplied wire, that is limited by two
            vertices of the wire. The edges that are contained in the section are
            returned. If test positions are supplied, the section will be limited by
            by one or two of them, if they can be found on the section and makes a
            smaller section. A section is determined as being a closed or open
            curvature that does not contain any branches - vertices that are connected
            to more than two edges must limit a section!</summary>
      <param name="pointOnCurve">The point on curve to receive the length to.
            </param>
      <param name="testPoints">The test points.</param>
      <returns>The section found, or null.</returns>
      <exception cref="T:System.ArgumentException" />
      <exception cref="T:System.ArgumentNullException" />
      <exception cref="T:System.IO.DirectoryNotFoundException" />
      <exception cref="T:System.IO.FileNotFoundException" />
      <exception cref="T:System.UnauthorizedAccessException" />
      <exception cref="T:System.IO.IOException" />
    </member>
    <member name="P:ABB.Robotics.RobotStudio.Stations.Wire.Length">
      <summary>Returns the length of the wire.</summary>
    </member>
    <member name="M:ABB.Robotics.RobotStudio.Stations.Wire.ReverseDirection">
      <summary>Reverses the direction of the wire.</summary>
      <returns>A <b>Boolean</b> value of the success of the operation.</returns>
      <exception cref="T:System.ArgumentException" />
      <exception cref="T:System.ArgumentNullException" />
      <exception cref="T:System.InvalidOperationException" />
      <exception cref="T:System.IO.DirectoryNotFoundException" />
      <exception cref="T:System.IO.FileNotFoundException" />
      <exception cref="T:System.IO.IOException" />
      <exception cref="T:System.UnauthorizedAccessException" />
    </member>
    <member name="P:ABB.Robotics.RobotStudio.Stations.Wire.StartVertex">
      <summary>Returns the end <see cref="T:ABB.Robotics.RobotStudio.Stations.Vertex" />.</summary>
    </member>
    <member name="P:ABB.Robotics.RobotStudio.Stations.Wire.Visible">
      <summary>Gets or sets if the <see cref="T:ABB.Robotics.RobotStudio.Stations.Wire" /> is visible or not in the graphics.</summary>
    </member>
    <member name="T:ABB.Robotics.RobotStudio.Stations.WireCollection">
      <summary>A collection of <see cref="T:ABB.Robotics.RobotStudio.Stations.Wire" /> objects.</summary>
    </member>
    <member name="M:ABB.Robotics.RobotStudio.Stations.WireCollection.Contains(ABB.Robotics.RobotStudio.Stations.Wire)"></member>
    <member name="M:ABB.Robotics.RobotStudio.Stations.WireCollection.CopyTo(ABB.Robotics.RobotStudio.Stations.Wire[],System.Int32)"></member>
    <member name="M:ABB.Robotics.RobotStudio.Stations.WireCollection.CopyTo(System.Array,System.Int32)"></member>
    <member name="P:ABB.Robotics.RobotStudio.Stations.WireCollection.Count"></member>
    <member name="M:ABB.Robotics.RobotStudio.Stations.WireCollection.GetEnumerator"></member>
    <member name="P:ABB.Robotics.RobotStudio.Stations.WireCollection.IsSynchronized"></member>
    <member name="P:ABB.Robotics.RobotStudio.Stations.WireCollection.Item(System.Int32)"></member>
    <member name="P:ABB.Robotics.RobotStudio.Stations.WireCollection.Parent"></member>
    <member name="P:ABB.Robotics.RobotStudio.Stations.WireCollection.SyncRoot"></member>
    <member name="M:ABB.Robotics.RobotStudio.Stations.WireCollection.ToArray"></member>
    <member name="T:ABB.Robotics.RobotStudio.Stations.VirtualControllerRestartMode">
      <summary>
            Specifies how a virtual controller should be started or restarted
            </summary>
    </member>
    <member name="F:ABB.Robotics.RobotStudio.Stations.VirtualControllerRestartMode.WarmStart"></member>
    <member name="F:ABB.Robotics.RobotStudio.Stations.VirtualControllerRestartMode.IStart"></member>
    <member name="F:ABB.Robotics.RobotStudio.Stations.VirtualControllerRestartMode.PStart"></member>
    <member name="T:ABB.Robotics.RobotStudio.Stations.VirtualSignalChangedEventArgs">
      <summary>
            Provides data for the <b>VirtualSignalChanged</b> event
            </summary>
    </member>
    <member name="P:ABB.Robotics.RobotStudio.Stations.VirtualSignalChangedEventArgs.Signal"></member>
    <member name="P:ABB.Robotics.RobotStudio.Stations.VirtualSignalChangedEventArgs.Value"></member>
    <member name="T:ABB.Robotics.RobotStudio.Stations.VirtualSignalChangedEventHandler">
      <summary>
            Represents the method that will handle the <b>VirtualSignalChanged</b> event.
            </summary>
    </member>
    <member name="T:ABB.Robotics.RobotStudio.Stations.VirtualSignalCollection">
      <summary>
            A collection of named signals with either digital or analog value
            </summary>
    </member>
    <member name="M:ABB.Robotics.RobotStudio.Stations.VirtualSignalCollection.AddAnalog(System.String)"></member>
    <member name="M:ABB.Robotics.RobotStudio.Stations.VirtualSignalCollection.AddDigital(System.String)"></member>
    <member name="M:ABB.Robotics.RobotStudio.Stations.VirtualSignalCollection.Contains(System.String)"></member>
    <member name="M:ABB.Robotics.RobotStudio.Stations.VirtualSignalCollection.CopyTo(System.Array,System.Int32)"></member>
    <member name="M:ABB.Robotics.RobotStudio.Stations.VirtualSignalCollection.CopyTo(System.String[],System.Int32)"></member>
    <member name="P:ABB.Robotics.RobotStudio.Stations.VirtualSignalCollection.Count"></member>
    <member name="M:ABB.Robotics.RobotStudio.Stations.VirtualSignalCollection.GetEnumerator"></member>
    <member name="P:ABB.Robotics.RobotStudio.Stations.VirtualSignalCollection.IsSynchronized"></member>
    <member name="P:ABB.Robotics.RobotStudio.Stations.VirtualSignalCollection.Item(System.String)"></member>
    <member name="M:ABB.Robotics.RobotStudio.Stations.VirtualSignalCollection.Remove(System.String)"></member>
    <member name="P:ABB.Robotics.RobotStudio.Stations.VirtualSignalCollection.SyncRoot"></member>
    <member name="M:ABB.Robotics.RobotStudio.Stations.VirtualSignalCollection.ToArray"></member>
    <member name="E:ABB.Robotics.RobotStudio.Stations.VirtualSignalCollection.VirtualSignalAdded"></member>
    <member name="E:ABB.Robotics.RobotStudio.Stations.VirtualSignalCollection.VirtualSignalChanged"></member>
    <member name="E:ABB.Robotics.RobotStudio.Stations.VirtualSignalCollection.VirtualSignalRemoved"></member>
    <member name="T:ABB.Robotics.RobotStudio.Stations.VirtualTimeMode"></member>
    <member name="F:ABB.Robotics.RobotStudio.Stations.VirtualTimeMode.VirtualFreeRun"></member>
    <member name="F:ABB.Robotics.RobotStudio.Stations.VirtualTimeMode.VirtualTimeSlice"></member>
    <member name="T:ABB.Robotics.RobotStudio.Stations.VSTABridge">
      <summary>
            This class makes it possible to access some methods, properties and static events from VSTA, that can not be accessed directly because of limitations in the proxy generator.
            </summary>
    </member>
    <member name="M:ABB.Robotics.RobotStudio.Stations.VSTABridge.#ctor"></member>
    <member name="E:ABB.Robotics.RobotStudio.Stations.VSTABridge.ActiveProjectChanged">
      <summary>
            See <see cref="T:ABB.Robotics.RobotStudio.Project" />.
            </summary>
    </member>
    <member name="E:ABB.Robotics.RobotStudio.Stations.VSTABridge.Collision">
      <summary>
            See <see cref="T:ABB.Robotics.RobotStudio.Stations.Simulator" />.
            </summary>
    </member>
    <member name="M:ABB.Robotics.RobotStudio.Stations.VSTABridge.FindDataDeclarationsByType(ABB.Robotics.RobotStudio.Stations.RsTask,System.String)">
      <summary>
            Finds the <see cref="T:ABB.Robotics.RobotStudio.Stations.RsDataDeclaration" />s matching the supplied type.
            </summary>
      <param name="task">The task.</param>
      <param name="typeString">The name of the <b>Type</b> of objects to find. The name of the .NET type should be specified, not the RAPID type.</param>
      <returns>
            An array containing the RsDatatDeclarations matching the supplied type.
            </returns>
    </member>
    <member name="M:ABB.Robotics.RobotStudio.Stations.VSTABridge.FindFirstDataDeclarationByType(ABB.Robotics.RobotStudio.Stations.RsTask,System.String)">
      <summary>
            Finds the first <see cref="T:ABB.Robotics.RobotStudio.Stations.RsDataDeclaration" /> matching the supplied <b>Type</b>.
            </summary>
      <param name="task">The task.</param>
      <param name="typeString">The name of the <b>Type</b> of objects to find. The name of the .NET type should be specified, not the RAPID type.</param>
      <returns>
            The first <see cref="T:ABB.Robotics.RobotStudio.Stations.RsDataDeclaration" /> matching the supplied type.
            </returns>
    </member>
    <member name="M:ABB.Robotics.RobotStudio.Stations.VSTABridge.GetColor(ABB.Robotics.RobotStudio.ProjectObject,System.Byte@,System.Byte@,System.Byte@,System.Byte@)">
      <summary>
            Gets the color and alpha channel of a project object that has a <b>Color</b> property.
            </summary>
      <param name="obj">The <see cref="T:ABB.Robotics.RobotStudio.ProjectObject" /> for which to get the color. Only objects that have a <b>Color</b> property are supported.</param>
      <param name="R">The red component value for the color.</param>
      <param name="G">The green component value for the color.</param>
      <param name="B">The blue component value for the color.</param>
      <param name="A">The alpha component value for the color.</param>
    </member>
    <member name="E:ABB.Robotics.RobotStudio.Stations.VSTABridge.ProjectObjectChanged">
      <summary>
            See <see cref="T:ABB.Robotics.RobotStudio.ProjectObject" />.
            </summary>
    </member>
    <member name="M:ABB.Robotics.RobotStudio.Stations.VSTABridge.SetColor(ABB.Robotics.RobotStudio.ProjectObject,System.Byte,System.Byte,System.Byte)">
      <summary>
            Sets the color of a project object that has a <b>Color</b> property.
            </summary>
      <param name="obj">The <see cref="T:ABB.Robotics.RobotStudio.ProjectObject" /> for which to set the color. Only objects that have a <b>Color</b> property are supported.</param>
      <param name="R">The red component value for the color.</param>
      <param name="G">The green component value for the color.</param>
      <param name="B">The blue component value for the color.</param>
    </member>
    <member name="M:ABB.Robotics.RobotStudio.Stations.VSTABridge.SetColor(ABB.Robotics.RobotStudio.ProjectObject,System.Byte,System.Byte,System.Byte,System.Byte)">
      <summary>
            Sets the color and alpha channel of a project object that has a <b>Color</b> property.
            </summary>
      <param name="obj">The <see cref="T:ABB.Robotics.RobotStudio.ProjectObject" /> for which to set the color. Only objects that have a <b>Color</b> property are supported.</param>
      <param name="R">The red component value for the color.</param>
      <param name="G">The green component value for the color.</param>
      <param name="B">The blue component value for the color.</param>
      <param name="A">The alpha component value for the color.</param>
    </member>
    <member name="E:ABB.Robotics.RobotStudio.Stations.VSTABridge.SimulatorStateChanged">
      <summary>
            See <see cref="T:ABB.Robotics.RobotStudio.Stations.Simulator" />.
            </summary>
    </member>
    <member name="E:ABB.Robotics.RobotStudio.Stations.VSTABridge.SimulatorTick">
      <summary>
            See <see cref="T:ABB.Robotics.RobotStudio.Stations.Simulator" />.
            </summary>
    </member>
    <member name="T:ABB.Robotics.RobotStudio.Stations.Forms.AfterFreehandEventArgs"></member>
    <member name="P:ABB.Robotics.RobotStudio.Stations.Forms.AfterFreehandEventArgs.Object"></member>
    <member name="P:ABB.Robotics.RobotStudio.Stations.Forms.AfterFreehandEventArgs.OriginalGlobalMatrix"></member>
    <member name="T:ABB.Robotics.RobotStudio.Stations.Forms.FreehandMode">
      <summary>
            Specifies values to indicate how the user will be able to move or rotate a selected object by
            using the mouse
            </summary>
    </member>
    <member name="F:ABB.Robotics.RobotStudio.Stations.Forms.FreehandMode.Disable"></member>
    <member name="F:ABB.Robotics.RobotStudio.Stations.Forms.FreehandMode.Move"></member>
    <member name="F:ABB.Robotics.RobotStudio.Stations.Forms.FreehandMode.Rotate"></member>
    <member name="F:ABB.Robotics.RobotStudio.Stations.Forms.FreehandMode.JogJoint"></member>
    <member name="F:ABB.Robotics.RobotStudio.Stations.Forms.FreehandMode.JogLinear"></member>
    <member name="F:ABB.Robotics.RobotStudio.Stations.Forms.FreehandMode.JogReorient"></member>
    <member name="T:ABB.Robotics.RobotStudio.Stations.Forms.FreehandReference">
      <summary>
            Specifies the reference coordinate system for freehand manipulation
            </summary>
    </member>
    <member name="F:ABB.Robotics.RobotStudio.Stations.Forms.FreehandReference.Global"></member>
    <member name="F:ABB.Robotics.RobotStudio.Stations.Forms.FreehandReference.Local"></member>
    <member name="F:ABB.Robotics.RobotStudio.Stations.Forms.FreehandReference.UCS"></member>
    <member name="F:ABB.Robotics.RobotStudio.Stations.Forms.FreehandReference.WorkObject"></member>
    <member name="F:ABB.Robotics.RobotStudio.Stations.Forms.FreehandReference.Tool"></member>
    <member name="T:ABB.Robotics.RobotStudio.Stations.Forms.GraphicButton">
      <summary>
            Represents a clickable button in a <see cref="T:ABB.Robotics.RobotStudio.Stations.Forms.GraphicControl" />.
            </summary>
    </member>
    <member name="P:ABB.Robotics.RobotStudio.Stations.Forms.GraphicButton.Checked"></member>
    <member name="P:ABB.Robotics.RobotStudio.Stations.Forms.GraphicButton.Enabled"></member>
    <member name="P:ABB.Robotics.RobotStudio.Stations.Forms.GraphicButton.Id"></member>
    <member name="P:ABB.Robotics.RobotStudio.Stations.Forms.GraphicButton.Position"></member>
    <member name="P:ABB.Robotics.RobotStudio.Stations.Forms.GraphicButton.Scale"></member>
    <member name="T:ABB.Robotics.RobotStudio.Stations.Forms.GraphicButtonCollection"></member>
    <member name="M:ABB.Robotics.RobotStudio.Stations.Forms.GraphicButtonCollection.Add(System.String,System.Int32,System.Int32,System.Drawing.Bitmap)">
      <summary>
            Creates a new <see cref="T:ABB.Robotics.RobotStudio.Stations.Forms.GraphicButton" /> and adds it to this collection.
            </summary>
      <param name="id">A unique identifier for the button.</param>
      <param name="x">Distance in pixels from the left edge of the graphic window.</param>
      <param name="y">Distance in pixels from the top edge of the graphic window.</param>
      <param name="bmp">An image for the button.</param>
      <returns>The created button.</returns>
    </member>
    <member name="M:ABB.Robotics.RobotStudio.Stations.Forms.GraphicButtonCollection.Clear"></member>
    <member name="M:ABB.Robotics.RobotStudio.Stations.Forms.GraphicButtonCollection.Contains(ABB.Robotics.RobotStudio.Stations.Forms.GraphicButton)"></member>
    <member name="P:ABB.Robotics.RobotStudio.Stations.Forms.GraphicButtonCollection.Count"></member>
    <member name="M:ABB.Robotics.RobotStudio.Stations.Forms.GraphicButtonCollection.GetEnumerator"></member>
    <member name="M:ABB.Robotics.RobotStudio.Stations.Forms.GraphicButtonCollection.Remove(ABB.Robotics.RobotStudio.Stations.Forms.GraphicButton)"></member>
    <member name="T:ABB.Robotics.RobotStudio.Stations.Forms.GraphicCapabilities">
      <summary>
            Contains information about the capabilities of the graphics adapter
            used for rendering a <see cref="T:ABB.Robotics.RobotStudio.Stations.Forms.GraphicControl" />.
            </summary>
    </member>
    <member name="P:ABB.Robotics.RobotStudio.Stations.Forms.GraphicCapabilities.MaxMultiSampleCount"></member>
    <member name="P:ABB.Robotics.RobotStudio.Stations.Forms.GraphicCapabilities.SupportsAdvancedLighting"></member>
    <member name="T:ABB.Robotics.RobotStudio.Stations.Forms.GraphicControl">
      <summary>
            Displays graphical objects in a 3D view
            </summary>
    </member>
    <member name="M:ABB.Robotics.RobotStudio.Stations.Forms.GraphicControl.#ctor">
      <summary>
            Creates a new <see cref="T:ABB.Robotics.RobotStudio.Stations.Forms.GraphicControl" /> using default settings.
            </summary>
    </member>
    <member name="M:ABB.Robotics.RobotStudio.Stations.Forms.GraphicControl.#ctor(ABB.Robotics.RobotStudio.Stations.Forms.GraphicControlSettings)">
      <summary>
            Creates a new <see cref="T:ABB.Robotics.RobotStudio.Stations.Forms.GraphicControl" /> using the specified settings.
            </summary>
      <param name="settings"></param>
    </member>
    <member name="P:ABB.Robotics.RobotStudio.Stations.Forms.GraphicControl.ActiveGraphicControl"></member>
    <member name="E:ABB.Robotics.RobotStudio.Stations.Forms.GraphicControl.ActiveGraphicControlChanged"></member>
    <member name="P:ABB.Robotics.RobotStudio.Stations.Forms.GraphicControl.AdvancedLighting"></member>
    <member name="P:ABB.Robotics.RobotStudio.Stations.Forms.GraphicControl.BackColor">
      <summary>
            Gets or sets the background color.
            </summary>
    </member>
    <member name="P:ABB.Robotics.RobotStudio.Stations.Forms.GraphicControl.BackFaceCulling">
      <summary>
            Gets or sets a value indicating whether surfaces facing away from the viewer
            will be discarded.
            </summary>
    </member>
    <member name="P:ABB.Robotics.RobotStudio.Stations.Forms.GraphicControl.Buttons"></member>
    <member name="M:ABB.Robotics.RobotStudio.Stations.Forms.GraphicControl.CalcFreehand(ABB.Robotics.Math.Vector3,ABB.Robotics.Math.Vector3,System.Drawing.Point,System.Drawing.Point,System.Boolean)">
      <summary>
            Calculates how movement of the mouse in window coordinates corresponds to
            linear movement or rotation of an object in 3D.
            </summary>
      <param name="startPoint">Reference point for the object.</param>
      <param name="direction">Direction in which to move the object, or axis around which to rotate the obejct.</param>
      <param name="mouse1">First mouse position.</param>
      <param name="mouse2">Second mouse position.</param>
      <param name="rotate">Calculate rotation rather than linear movement.</param>
      <returns>The delta (in m or radians) that the object should be moved or rotated.</returns>
    </member>
    <member name="P:ABB.Robotics.RobotStudio.Stations.Forms.GraphicControl.Camera">
      <summary>
            Associates this view with a Camera object.
            </summary>
    </member>
    <member name="M:ABB.Robotics.RobotStudio.Stations.Forms.GraphicControl.CanExamineObject(ABB.Robotics.RobotStudio.ProjectObject)">
      <summary>
            Checks whether an object can be examined.
            </summary>
      <param name="obj">The graphic object.</param>
    </member>
    <member name="M:ABB.Robotics.RobotStudio.Stations.Forms.GraphicControl.CanUnexamine">
      <summary>
            Returns <b>true</b> if <see cref="M:ABB.Robotics.RobotStudio.Stations.Forms.GraphicControl.Unexamine(System.Single)" /> can be called.
            </summary>
    </member>
    <member name="P:ABB.Robotics.RobotStudio.Stations.Forms.GraphicControl.Capabilities">
      <summary>
            Returns information about the capabilities of the graphics adapter
            used for rendering a <see cref="T:ABB.Robotics.RobotStudio.Stations.Forms.GraphicControl" />.
            </summary>
    </member>
    <member name="P:ABB.Robotics.RobotStudio.Stations.Forms.GraphicControl.CaptureMouse">
      <summary>
            Gets or sets whether the control will receive mouse events even
            when the mouse is outside the control area.
            </summary>
    </member>
    <member name="P:ABB.Robotics.RobotStudio.Stations.Forms.GraphicControl.ClipPlane">
      <summary>
            Associates this view with a ClipPlane object.
            </summary>
    </member>
    <member name="M:ABB.Robotics.RobotStudio.Stations.Forms.GraphicControl.CopySettings(ABB.Robotics.RobotStudio.Stations.Forms.GraphicControl,ABB.Robotics.RobotStudio.Stations.Forms.GraphicControl)">
      <summary>
            Copies all view and picker settings from one GraphicControl to another.
            </summary>
    </member>
    <member name="P:ABB.Robotics.RobotStudio.Stations.Forms.GraphicControl.Cursor"></member>
    <member name="P:ABB.Robotics.RobotStudio.Stations.Forms.GraphicControl.DetailLevel">
      <summary>
            Gets or sets a value indicating the detail in which geometric objects
            are rendered.
            </summary>
    </member>
    <member name="P:ABB.Robotics.RobotStudio.Stations.Forms.GraphicControl.EnableTouchNavigation"></member>
    <member name="P:ABB.Robotics.RobotStudio.Stations.Forms.GraphicControl.EnvironmentMapping">
      <summary>
            Gets or sets a value indicating whether a reflective effect will be applied.
            </summary>
    </member>
    <member name="M:ABB.Robotics.RobotStudio.Stations.Forms.GraphicControl.ExamineObject(ABB.Robotics.RobotStudio.ProjectObject,ABB.Robotics.Math.Vector3,System.Single)">
      <summary>
            Zooms in on an object.
            </summary>
      <param name="obj">The graphic object.</param>
      <param name="lookDirection">Look direction</param>
      <param name="time">Time (in seconds) for the operation.</param>
    </member>
    <member name="M:ABB.Robotics.RobotStudio.Stations.Forms.GraphicControl.ExamineObject(ABB.Robotics.RobotStudio.ProjectObject,System.Single)">
      <summary>
            Zooms in on an object.
            </summary>
      <param name="obj">The graphic object.</param>
      <param name="time">Time (in seconds) for the operation.</param>
    </member>
    <member name="M:ABB.Robotics.RobotStudio.Stations.Forms.GraphicControl.ExaminePoint(ABB.Robotics.Math.Vector3,System.Double,System.Single)">
      <summary>
            Zooms in on a point.
            </summary>
      <param name="point" />
      <param name="radius" />
      <param name="time">Time (in seconds) for the operation</param>
    </member>
    <member name="P:ABB.Robotics.RobotStudio.Stations.Forms.GraphicControl.FieldOfView">
      <summary>
            Gets or sets the angular extent of the view (in degrees).
            </summary>
    </member>
    <member name="P:ABB.Robotics.RobotStudio.Stations.Forms.GraphicControl.FloorAutoSize">
      <summary>
            Gets or sets a value indicating whether the floor will be automatically
            resized according to the contents of the station.
            </summary>
    </member>
    <member name="P:ABB.Robotics.RobotStudio.Stations.Forms.GraphicControl.FloorColor">
      <summary>
            Gets or sets the color of the floor. The floor can be made transparent
            by setting the alpha component to less than 255.
            </summary>
    </member>
    <member name="P:ABB.Robotics.RobotStudio.Stations.Forms.GraphicControl.FloorSize">
      <summary>
            Gets or sets the size of the floor.
            </summary>
    </member>
    <member name="M:ABB.Robotics.RobotStudio.Stations.Forms.GraphicControl.FlyTo(ABB.Robotics.Math.Vector3,ABB.Robotics.Math.Vector3,System.Single)">
      <summary>
            Adjusts the view.
            </summary>
      <param name="lookAt">The point which will act as the center of the view</param>
      <param name="lookFrom">Point of view</param>
      <param name="time">Time (in seconds) for the operation.</param>
    </member>
    <member name="M:ABB.Robotics.RobotStudio.Stations.Forms.GraphicControl.GetAllGraphicControls">
      <summary>
            Returns an array containing all graphic controls in the process.
            </summary>
    </member>
    <member name="M:ABB.Robotics.RobotStudio.Stations.Forms.GraphicControl.GetObjectVisible(ABB.Robotics.RobotStudio.ProjectObject,System.Boolean)">
      <summary>
            Gets a value indicating whether an object is visible in this GraphicControl.
            </summary>
      <param name="obj">The graphic object.</param>
      <param name="recursive">Return true only if all descendants are visible.</param>
    </member>
    <member name="M:ABB.Robotics.RobotStudio.Stations.Forms.GraphicControl.GetView">
      <summary>
            Returns the underlying GraphicView object.
            </summary>
      <returns />
    </member>
    <member name="P:ABB.Robotics.RobotStudio.Stations.Forms.GraphicControl.GradientBackground">
      <summary>
            Gets or sets a value indicating whether the control will have a gradient background.
            </summary>
    </member>
    <member name="E:ABB.Robotics.RobotStudio.Stations.Forms.GraphicControl.GraphicButtonClicked"></member>
    <member name="E:ABB.Robotics.RobotStudio.Stations.Forms.GraphicControl.GraphicButtonTracked"></member>
    <member name="P:ABB.Robotics.RobotStudio.Stations.Forms.GraphicControl.GridSpaceX">
      <summary>
            Gets or sets the spacing of the UCS grid in the x direction.
            </summary>
    </member>
    <member name="P:ABB.Robotics.RobotStudio.Stations.Forms.GraphicControl.GridSpaceY">
      <summary>
            Gets or sets the spacing of the UCS grid in the y direction.
            </summary>
    </member>
    <member name="E:ABB.Robotics.RobotStudio.Stations.Forms.GraphicControl.Initialized">
      <summary>
            Occurs when the control has finished loading.
            </summary>
    </member>
    <member name="M:ABB.Robotics.RobotStudio.Stations.Forms.GraphicControl.LoadOptions">
      <summary>
            Load properties from options.
            </summary>
    </member>
    <member name="M:ABB.Robotics.RobotStudio.Stations.Forms.GraphicControl.LoadOptions(System.Boolean)">
      <summary>
            Load properties from options. 
            </summary>
      <param name="loadDefaults">Also load default properties for appearance.</param>
    </member>
    <member name="P:ABB.Robotics.RobotStudio.Stations.Forms.GraphicControl.LookAt">
      <summary>
            Gets or sets the point which will act as the center of the view.
            </summary>
    </member>
    <member name="P:ABB.Robotics.RobotStudio.Stations.Forms.GraphicControl.LookFrom">
      <summary>
            Gets or sets the point of view.
            </summary>
    </member>
    <member name="E:ABB.Robotics.RobotStudio.Stations.Forms.GraphicControl.MouseRectangle">
      <summary>
            Occurs when the user has drawn a selection rectangle with the mouse.
            </summary>
    </member>
    <member name="M:ABB.Robotics.RobotStudio.Stations.Forms.GraphicControl.Move(ABB.Robotics.Math.Vector3,ABB.Robotics.Math.Vector3,System.Single)">
      <summary>
            Adjusts the view to a new center and view point.
            </summary>
      <param name="lookAt">Center point.</param>
      <param name="lookFrom">V point.</param>
      <param name="time">Time (in seconds) for the operation.</param>
    </member>
    <member name="P:ABB.Robotics.RobotStudio.Stations.Forms.GraphicControl.NavigationSensitivity">
      <summary>
            Gets or sets the responsiveness of mouse navigation.
            </summary>
    </member>
    <member name="M:ABB.Robotics.RobotStudio.Stations.Forms.GraphicControl.Pan(System.Single,System.Single,System.Single)">
      <summary>
            Pans the view.
            </summary>
      <param name="x">Equivalent to the number of pixels the mouse would move horizontally
            to pan the same amount.</param>
      <param name="y">Equivalent to the number of pixels the mouse would move vertically
            to pan the same amount.</param>
      <param name="time">Time (in seconds) for the operation.</param>
    </member>
    <member name="P:ABB.Robotics.RobotStudio.Stations.Forms.GraphicControl.Picker">
      <summary>
            Gets the object which will handle mouse selection.
            </summary>
    </member>
    <member name="P:ABB.Robotics.RobotStudio.Stations.Forms.GraphicControl.PickingEnabled">
      <summary>
            Gets or sets whether mouse selection is enabled.
            </summary>
    </member>
    <member name="P:ABB.Robotics.RobotStudio.Stations.Forms.GraphicControl.Projection">
      <summary>
            Gets or sets a value indicating how 3D objects are projected.
            </summary>
    </member>
    <member name="M:ABB.Robotics.RobotStudio.Stations.Forms.GraphicControl.ProjectPoint(System.Int32,System.Int32)">
      <summary>
            Returns the point in 3D that corresponds to a window coordinate.
            </summary>
      <param name="x">Window x coordinate (relative to upper left corner of this).</param>
      <param name="y">Window y coordinate (relative to upper left corner of this).</param>
      <returns>Point in 3D space, or null if there is no object/floor at the specified coordinate.</returns>
    </member>
    <member name="M:ABB.Robotics.RobotStudio.Stations.Forms.GraphicControl.ProjectPoint(System.Int32,System.Int32,ABB.Robotics.RobotStudio.ProjectObject@)">
      <summary>
            Returns the point in 3D that corresponds to a window coordinate, and the object at that point.
            </summary>
      <param name="x">Window x coordinate (relative to upper left corner of this).</param>
      <param name="y">Window y coordinate (relative to upper left corner of this).</param>
      <param name="hitObject">Object (Part or Face) at the specified coordinate</param>
      <returns>Point in 3D space, or null if there is no object/floor at the specified coordinate.</returns>
    </member>
    <member name="M:ABB.Robotics.RobotStudio.Stations.Forms.GraphicControl.ProjectPointOnFloor(System.Int32,System.Int32,System.Boolean)"></member>
    <member name="M:ABB.Robotics.RobotStudio.Stations.Forms.GraphicControl.ProjectPointToScreen(ABB.Robotics.Math.Vector3)">
      <summary>
            Projects a point in the 3D world (x,y,z) to screen coordinates (x,y)
            </summary>
    </member>
    <member name="M:ABB.Robotics.RobotStudio.Stations.Forms.GraphicControl.ProjectRay(ABB.Robotics.Math.Vector3,ABB.Robotics.Math.Vector3,ABB.Robotics.RobotStudio.ProjectObject@)">
      <summary>
            Performs a ray test
            </summary>
      <param name="start">Start of the ray in world coordinates</param>
      <param name="direction">Direction of the ray in world coordinates</param>
      <param name="hitObject">Hit object (Part or Face)</param>
      <returns>Hit point, or null if no object or floor was hit</returns>
    </member>
    <member name="M:ABB.Robotics.RobotStudio.Stations.Forms.GraphicControl.RayFromPoint(System.Int32,System.Int32)">
      <summary>
            Returns a ray in the 3D world that corresponds to a screen coordinate
            </summary>
    </member>
    <member name="P:ABB.Robotics.RobotStudio.Stations.Forms.GraphicControl.RenderDynamic"></member>
    <member name="P:ABB.Robotics.RobotStudio.Stations.Forms.GraphicControl.Representation">
      <summary>
            Gets or sets the manner in which solid objects will be rendered.
            </summary>
    </member>
    <member name="P:ABB.Robotics.RobotStudio.Stations.Forms.GraphicControl.RootObject">
      <summary>
            Gets or sets the root of the object hierarchy which will be displayed.
            </summary>
    </member>
    <member name="E:ABB.Robotics.RobotStudio.Stations.Forms.GraphicControl.RootObjectChanged">
      <summary>
            Occurs when the <see cref="P:ABB.Robotics.RobotStudio.Stations.Forms.GraphicControl.RootObject" /> property has changed.
            </summary>
    </member>
    <member name="M:ABB.Robotics.RobotStudio.Stations.Forms.GraphicControl.Rotate(System.Single,System.Single,System.Single)">
      <summary>
            Rotates the view around the center point.
            </summary>
      <param name="x">Equivalent to the number of pixels the mouse would move horizontally
            to rotate the same amount.</param>
      <param name="y">Equivalent to the number of pixels the mouse would move vertically
            to rotate the same amount.</param>
      <param name="time">Time (in seconds) for the operation.</param>
    </member>
    <member name="M:ABB.Robotics.RobotStudio.Stations.Forms.GraphicControl.ScreenShot">
      <summary>
            Creates an image from this view.
            </summary>
    </member>
    <member name="M:ABB.Robotics.RobotStudio.Stations.Forms.GraphicControl.ScreenShot(ABB.Robotics.RobotStudio.ProjectObject,System.Int32,System.Int32,ABB.Robotics.RobotStudio.Stations.ScreenshotOptions)">
      <summary>
            Creates an image of a specified object.
            </summary>
    </member>
    <member name="M:ABB.Robotics.RobotStudio.Stations.Forms.GraphicControl.ScreenShot(ABB.Robotics.RobotStudio.Stations.ScreenshotOptions)">
      <summary>
            Creates an image from this view.
            </summary>
    </member>
    <member name="M:ABB.Robotics.RobotStudio.Stations.Forms.GraphicControl.ScreenShot(System.Int32,System.Int32)">
      <summary>
            Creates an image of specified size from this view.
            </summary>
    </member>
    <member name="M:ABB.Robotics.RobotStudio.Stations.Forms.GraphicControl.ScreenShot(System.Int32,System.Int32,ABB.Robotics.RobotStudio.Stations.ScreenshotOptions)">
      <summary>
            Creates an image of specified size from this view.
            </summary>
    </member>
    <member name="P:ABB.Robotics.RobotStudio.Stations.Forms.GraphicControl.ScreenSizeCulling">
      <summary>
            Gets or sets the (approximate) minimum number of pixels an object must cover
            to be rendered.
            </summary>
    </member>
    <member name="M:ABB.Robotics.RobotStudio.Stations.Forms.GraphicControl.SetObjectVisible(ABB.Robotics.RobotStudio.ProjectObject,System.Boolean)">
      <summary>
            Sets a value indicating whether an object is visible in this GraphicControl.
            </summary>
    </member>
    <member name="P:ABB.Robotics.RobotStudio.Stations.Forms.GraphicControl.ShowButtons">
      <summary>
            Gets or sets a value indicating if click buttons can be shown in this GraphicControl.
            </summary>
    </member>
    <member name="P:ABB.Robotics.RobotStudio.Stations.Forms.GraphicControl.ShowCoordinateSystem">
      <summary>
            Gets or sets a value indicating if a coordinate system is displayed in the lower left corner.
            </summary>
    </member>
    <member name="P:ABB.Robotics.RobotStudio.Stations.Forms.GraphicControl.ShowFloor">
      <summary>
            Gets or sets a value indicating if a rectangular "floor" will be displayed at z = 0.
            </summary>
    </member>
    <member name="P:ABB.Robotics.RobotStudio.Stations.Forms.GraphicControl.ShowUCSFrame">
      <summary>
            Gets or sets a value indicating whether a frame representing UCS will be displayed.
            </summary>
    </member>
    <member name="P:ABB.Robotics.RobotStudio.Stations.Forms.GraphicControl.ShowUCSGrid">
      <summary>
            Gets or sets a value indicating whether a grid representing UCS will be displayed.
            </summary>
    </member>
    <member name="P:ABB.Robotics.RobotStudio.Stations.Forms.GraphicControl.SuspendRedraw"></member>
    <member name="M:ABB.Robotics.RobotStudio.Stations.Forms.GraphicControl.SyncCamera(ABB.Robotics.RobotStudio.Stations.Camera,System.Boolean,System.Single)">
      <summary>
            Syncs the view with a Camera object.
            </summary>
      <param name="camera">Camera object.</param>
      <param name="updateView">If true, move view to camera; if false, move camera to view.</param>
      <param name="time">Time (in seconds) for the operation (if updateView=true).</param>
    </member>
    <member name="P:ABB.Robotics.RobotStudio.Stations.Forms.GraphicControl.TemporaryGraphics">
      <summary>
            Gets the <see cref="T:ABB.Robotics.RobotStudio.Stations.Forms.TemporaryGraphicCollection" /> that is displayed
            in this control.
            </summary>
    </member>
    <member name="P:ABB.Robotics.RobotStudio.Stations.Forms.GraphicControl.TwoSidedLighting">
      <summary>
            Gets or sets a value indicating whether surfaces facing away from the viewer
            will be lit and shaded.
            </summary>
    </member>
    <member name="M:ABB.Robotics.RobotStudio.Stations.Forms.GraphicControl.Unexamine(System.Single)">
      <summary>
            Undoes the previous Examine operation(s).
            </summary>
      <param name="time">Time (in seconds) for the operation.</param>
    </member>
    <member name="M:ABB.Robotics.RobotStudio.Stations.Forms.GraphicControl.Update">
      <summary>
            Ensures that the graphics gets updated to reflect recent changes.
            </summary>
    </member>
    <member name="M:ABB.Robotics.RobotStudio.Stations.Forms.GraphicControl.UpdateAll">
      <summary>
            Updates the contents of all graphic controls.
            </summary>
    </member>
    <member name="M:ABB.Robotics.RobotStudio.Stations.Forms.GraphicControl.ViewAll(ABB.Robotics.Math.Vector3,System.Single)">
      <summary>
            Adjusts the view to display all objects from a new direction.
            </summary>
      <param name="direction">New view direction.</param>
      <param name="time">Time (in seconds) for the operation.</param>
    </member>
    <member name="M:ABB.Robotics.RobotStudio.Stations.Forms.GraphicControl.ViewAll(System.Single)">
      <summary>
            Adjusts the view to display all objects without changing the view direction.
            </summary>
      <param name="time">Time (in seconds) for the operation.</param>
    </member>
    <member name="M:ABB.Robotics.RobotStudio.Stations.Forms.GraphicControl.ViewCenter(ABB.Robotics.Math.Vector3,System.Single)">
      <summary>
            Sets the view center.
            </summary>
      <param name="center">The point around which azimuth and altitude changes when changing the viewpoint.</param>
      <param name="time">Time (in seconds) for the operation.</param>
    </member>
    <member name="M:ABB.Robotics.RobotStudio.Stations.Forms.GraphicControl.Zoom(System.Single,System.Single)">
      <summary>
            Zooms the view closer to or further from the center point.
            </summary>
      <param name="amount">Equivalent to the number of pixels the mouse would move
            to zoom the same amount. Use a positive value to zoom in and a negative to zoom out.</param>
      <param name="time">Time (in seconds) for the operation.</param>
    </member>
    <member name="T:ABB.Robotics.RobotStudio.Stations.Forms.GraphicControlSettings">
      <summary>
            Contains settings used for initializing a <see cref="T:ABB.Robotics.RobotStudio.Stations.Forms.GraphicControl" /></summary>
    </member>
    <member name="P:ABB.Robotics.RobotStudio.Stations.Forms.GraphicControlSettings.MultiSampleCount">
      <summary>
            Specifies the sample count for anti-aliased rendering.
            </summary>
    </member>
    <member name="T:ABB.Robotics.RobotStudio.Stations.Forms.GraphicDetailLevel">
      <summary>
            Specifies values to indicate the detail in which objects are rendered
            </summary>
    </member>
    <member name="F:ABB.Robotics.RobotStudio.Stations.Forms.GraphicDetailLevel.Auto"></member>
    <member name="F:ABB.Robotics.RobotStudio.Stations.Forms.GraphicDetailLevel.Fine"></member>
    <member name="F:ABB.Robotics.RobotStudio.Stations.Forms.GraphicDetailLevel.Medium"></member>
    <member name="F:ABB.Robotics.RobotStudio.Stations.Forms.GraphicDetailLevel.Coarse"></member>
    <member name="T:ABB.Robotics.RobotStudio.Stations.Forms.GraphicHoverEventArgs">
      <summary>
            Provides data for the <b>GraphicHover</b> event
            </summary>
    </member>
    <member name="P:ABB.Robotics.RobotStudio.Stations.Forms.GraphicHoverEventArgs.HoverObject">
      <summary>
            Gets the hover object
            </summary>
    </member>
    <member name="P:ABB.Robotics.RobotStudio.Stations.Forms.GraphicHoverEventArgs.HoverPosition">
      <summary>
            Gets the point that hit the object
            </summary>
    </member>
    <member name="T:ABB.Robotics.RobotStudio.Stations.Forms.GraphicHoverEventHandler">
      <summary>
            Represents the method that will handle the <b>GraphicHover</b> event.
            </summary>
    </member>
    <member name="T:ABB.Robotics.RobotStudio.Stations.Forms.GraphicPicker">
      <summary>
            Provides mouse selection (picking) in a <see cref="T:ABB.Robotics.RobotStudio.Stations.Forms.GraphicControl" />.
            </summary>
    </member>
    <member name="E:ABB.Robotics.RobotStudio.Stations.Forms.GraphicPicker.AfterFreehand">
      <summary>
            Occurs when an object has been moved or rotated by freehand manipulation.
            </summary>
    </member>
    <member name="P:ABB.Robotics.RobotStudio.Stations.Forms.GraphicPicker.EnableSelection">
      <summary>
            Gets or sets a value indicating whether picking will cause the project selection
            to be updated
            </summary>
    </member>
    <member name="M:ABB.Robotics.RobotStudio.Stations.Forms.GraphicPicker.EndMultiRobotJog"></member>
    <member name="P:ABB.Robotics.RobotStudio.Stations.Forms.GraphicPicker.FreehandMode">
      <summary>
            Gets or sets the way the user will be able to move or rotate a selected object by
            using the mouse
            </summary>
    </member>
    <member name="P:ABB.Robotics.RobotStudio.Stations.Forms.GraphicPicker.FreehandReference">
      <summary>
            Gets or sets reference coordinate system for freehand manipulation
            </summary>
    </member>
    <member name="E:ABB.Robotics.RobotStudio.Stations.Forms.GraphicPicker.GraphicHover">
      <summary>
            Occurs when the user hovers the mouse over an object in a graphic view.
            </summary>
    </member>
    <member name="E:ABB.Robotics.RobotStudio.Stations.Forms.GraphicPicker.GraphicPick">
      <summary>
            Occurs when the user picks an object in a graphic view.
            </summary>
    </member>
    <member name="E:ABB.Robotics.RobotStudio.Stations.Forms.GraphicPicker.GraphicPickPreview">
      <summary>
            Occurs when the user moves the mouse in the graphic view.
            </summary>
    </member>
    <member name="M:ABB.Robotics.RobotStudio.Stations.Forms.GraphicPicker.InitMultiRobotJog(ABB.Robotics.RobotStudio.Stations.Mechanism)"></member>
    <member name="P:ABB.Robotics.RobotStudio.Stations.Forms.GraphicPicker.MarkerPosition">
      <summary>
            Gets or sets the position of the marker which indicates the last pick point
            </summary>
    </member>
    <member name="E:ABB.Robotics.RobotStudio.Stations.Forms.GraphicPicker.MarkerPositionChanged">
      <summary>
            Occurs when the MarkerPosition property changes.
            </summary>
    </member>
    <member name="P:ABB.Robotics.RobotStudio.Stations.Forms.GraphicPicker.MultiJog">
      <summary>
            Gets or sets a value indicating whether multi robot jogging is enabled
            </summary>
    </member>
    <member name="P:ABB.Robotics.RobotStudio.Stations.Forms.GraphicPicker.MultiJogEnabled">
      <summary>
            ABB internal use only
            </summary>
    </member>
    <member name="P:ABB.Robotics.RobotStudio.Stations.Forms.GraphicPicker.MultiJogExclude">
      <summary>
            Gets or sets the robots that are <b>not</b> used in multi robot jogging.
            </summary>
    </member>
    <member name="P:ABB.Robotics.RobotStudio.Stations.Forms.GraphicPicker.SelectionColor">
      <summary>
            Gets or sets the color of selected objects
            </summary>
    </member>
    <member name="P:ABB.Robotics.RobotStudio.Stations.Forms.GraphicPicker.SelectionHighlight">
      <summary>
            This property is obsolete.
            </summary>
    </member>
    <member name="P:ABB.Robotics.RobotStudio.Stations.Forms.GraphicPicker.SelectionMode">
      <summary>
            Gets or sets the type of objects that will be selectable by picking
            </summary>
    </member>
    <member name="P:ABB.Robotics.RobotStudio.Stations.Forms.GraphicPicker.SelectionPreview">
      <summary>
            Gets or sets a value indicating whether objects under the cursor will be
            temporarily highlighted
            </summary>
    </member>
    <member name="P:ABB.Robotics.RobotStudio.Stations.Forms.GraphicPicker.SelectionRadius">
      <summary>
            Gets or sets the tolerance (in pixels) used when picking line objects
            </summary>
    </member>
    <member name="P:ABB.Robotics.RobotStudio.Stations.Forms.GraphicPicker.ShowLocalCoordinateSystem">
      <summary>
            Gets or sets a value indicating whether the origin of selected objects
            will be shown as a coordinate system
            </summary>
    </member>
    <member name="P:ABB.Robotics.RobotStudio.Stations.Forms.GraphicPicker.SnapMode">
      <summary>
            Gets or sets the way the pick point will be adjusted when picking geometric objects
            </summary>
    </member>
    <member name="M:ABB.Robotics.RobotStudio.Stations.Forms.GraphicPicker.UpdateMultiRobotJog(ABB.Robotics.RobotStudio.Stations.Mechanism)"></member>
    <member name="T:ABB.Robotics.RobotStudio.Stations.Forms.GraphicPickEventArgs">
      <summary>
            Provides data for the <b>GraphicPick</b> event
            </summary>
    </member>
    <member name="P:ABB.Robotics.RobotStudio.Stations.Forms.GraphicPickEventArgs.CancelSelection"></member>
    <member name="P:ABB.Robotics.RobotStudio.Stations.Forms.GraphicPickEventArgs.Cursor"></member>
    <member name="P:ABB.Robotics.RobotStudio.Stations.Forms.GraphicPickEventArgs.PickedMaterial"></member>
    <member name="P:ABB.Robotics.RobotStudio.Stations.Forms.GraphicPickEventArgs.PickedObject"></member>
    <member name="P:ABB.Robotics.RobotStudio.Stations.Forms.GraphicPickEventArgs.PickedPosition"></member>
    <member name="P:ABB.Robotics.RobotStudio.Stations.Forms.GraphicPickEventArgs.PickedTemporaryGraphic"></member>
    <member name="T:ABB.Robotics.RobotStudio.Stations.Forms.GraphicPickEventHandler">
      <summary>
            Represents the method that will handle the <b>GraphicPick</b> event.
            </summary>
    </member>
    <member name="T:ABB.Robotics.RobotStudio.Stations.Forms.GraphicRepresentation">
      <summary>
            Specifies values to indicate how solid objects will be rendered
            </summary>
    </member>
    <member name="F:ABB.Robotics.RobotStudio.Stations.Forms.GraphicRepresentation.Surface"></member>
    <member name="F:ABB.Robotics.RobotStudio.Stations.Forms.GraphicRepresentation.Wire"></member>
    <member name="F:ABB.Robotics.RobotStudio.Stations.Forms.GraphicRepresentation.SurfaceAndWire"></member>
    <member name="F:ABB.Robotics.RobotStudio.Stations.Forms.GraphicRepresentation.HiddenLineRemoval"></member>
    <member name="F:ABB.Robotics.RobotStudio.Stations.Forms.GraphicRepresentation.ABBVisualIdentity"></member>
    <member name="T:ABB.Robotics.RobotStudio.Stations.Forms.MouseRectangleEventArgs">
      <summary>
            Provides data for the MouseRectangle event.
            </summary>
    </member>
    <member name="M:ABB.Robotics.RobotStudio.Stations.Forms.MouseRectangleEventArgs.#ctor(System.Drawing.Rectangle)"></member>
    <member name="P:ABB.Robotics.RobotStudio.Stations.Forms.MouseRectangleEventArgs.Rectangle">
      <summary>
            Gets the selection rectangle.
            </summary>
    </member>
    <member name="T:ABB.Robotics.RobotStudio.Stations.Forms.MouseRectangleEventHandler">
      <summary>
            Represents the method that will handle the MouseRectangle event.
            </summary>
    </member>
    <member name="T:ABB.Robotics.RobotStudio.Stations.Forms.SelectionHighlightType">
      <summary>
            This type is obsolete.
            </summary>
    </member>
    <member name="F:ABB.Robotics.RobotStudio.Stations.Forms.SelectionHighlightType.Disable"></member>
    <member name="F:ABB.Robotics.RobotStudio.Stations.Forms.SelectionHighlightType.Color"></member>
    <member name="F:ABB.Robotics.RobotStudio.Stations.Forms.SelectionHighlightType.Outline"></member>
    <member name="T:ABB.Robotics.RobotStudio.Stations.Forms.SelectionModes">
      <summary>
            Specifies values to indicate the type of objects which will be selectable by picking
            </summary>
    </member>
    <member name="F:ABB.Robotics.RobotStudio.Stations.Forms.SelectionModes.Disable"></member>
    <member name="F:ABB.Robotics.RobotStudio.Stations.Forms.SelectionModes.Mechanism"></member>
    <member name="F:ABB.Robotics.RobotStudio.Stations.Forms.SelectionModes.Assembly"></member>
    <member name="F:ABB.Robotics.RobotStudio.Stations.Forms.SelectionModes.Part"></member>
    <member name="F:ABB.Robotics.RobotStudio.Stations.Forms.SelectionModes.Entity"></member>
    <member name="F:ABB.Robotics.RobotStudio.Stations.Forms.SelectionModes.Surface"></member>
    <member name="F:ABB.Robotics.RobotStudio.Stations.Forms.SelectionModes.Curve"></member>
    <member name="F:ABB.Robotics.RobotStudio.Stations.Forms.SelectionModes.Frame"></member>
    <member name="F:ABB.Robotics.RobotStudio.Stations.Forms.SelectionModes.Path"></member>
    <member name="F:ABB.Robotics.RobotStudio.Stations.Forms.SelectionModes.Instruction"></member>
    <member name="T:ABB.Robotics.RobotStudio.Stations.Forms.SnapMode">
      <summary>
            Specifies values to indicate how the pick point will be adjusted ("snapped") when
            picking geometric objects
            </summary>
    </member>
    <member name="F:ABB.Robotics.RobotStudio.Stations.Forms.SnapMode.Disable"></member>
    <member name="F:ABB.Robotics.RobotStudio.Stations.Forms.SnapMode.Snap"></member>
    <member name="F:ABB.Robotics.RobotStudio.Stations.Forms.SnapMode.Center"></member>
    <member name="F:ABB.Robotics.RobotStudio.Stations.Forms.SnapMode.Mid"></member>
    <member name="F:ABB.Robotics.RobotStudio.Stations.Forms.SnapMode.End"></member>
    <member name="F:ABB.Robotics.RobotStudio.Stations.Forms.SnapMode.Edge"></member>
    <member name="F:ABB.Robotics.RobotStudio.Stations.Forms.SnapMode.Gravity"></member>
    <member name="F:ABB.Robotics.RobotStudio.Stations.Forms.SnapMode.LocalOrigin"></member>
    <member name="F:ABB.Robotics.RobotStudio.Stations.Forms.SnapMode.Grid"></member>
    <member name="T:ABB.Robotics.RobotStudio.Stations.Forms.TemporaryGraphic">
      <summary>
            A simple non-persistent graphics object.
            </summary>
    </member>
    <member name="M:ABB.Robotics.RobotStudio.Stations.Forms.TemporaryGraphic.Attach(ABB.Robotics.RobotStudio.ProjectObject)">
      <summary>
            Attaches this to an object in the station.
            </summary>
      <param name="obj">The object to attach to, or NULL to break the attachment.
            This must be a graphical object, e.g. a GraphicComponent, RsTarget, RsWorkObject,
            RsToolData or RsPathProcedure.</param>
      <exception cref="T:System.ArgumentException">The argument is not a graphical object.</exception>
    </member>
    <member name="P:ABB.Robotics.RobotStudio.Stations.Forms.TemporaryGraphic.Color"></member>
    <member name="M:ABB.Robotics.RobotStudio.Stations.Forms.TemporaryGraphic.ContinueTrace(ABB.Robotics.Math.Vector3,System.Drawing.Color,System.Boolean)">
      <summary>
            Adds a new point to a trace.
            </summary>
      <param name="point">The endpoint of the new segment.</param>
      <param name="color">The color of the new segment.</param>
      <param name="discontinue">Creates a discontinuity, e.g. no line is drawn from the previous point</param>
      <exception cref="T:System.InvalidOperationException">This was not created by DrawTrace().</exception>
    </member>
    <member name="M:ABB.Robotics.RobotStudio.Stations.Forms.TemporaryGraphic.Copy">
      <summary>
            Returns a copy of this TemporaryGraphic object.
            </summary>
      <returns>The copied TemporaryGraphic object.</returns>
    </member>
    <member name="M:ABB.Robotics.RobotStudio.Stations.Forms.TemporaryGraphic.Delete">
      <summary>
            Deletes this object from the graphics.
            </summary>
    </member>
    <member name="P:ABB.Robotics.RobotStudio.Stations.Forms.TemporaryGraphic.FixedSize"></member>
    <member name="M:ABB.Robotics.RobotStudio.Stations.Forms.TemporaryGraphic.GetBoundingBox(System.Boolean)">
      <summary>
            Computes the (axis-aligned) bounding box for this object.
            </summary>
      <param name="global">Specifies that the bounding box should be in the global (world) coordinate system rather
            than in this object's local coordinate system.</param>
      <returns></returns>
    </member>
    <member name="M:ABB.Robotics.RobotStudio.Stations.Forms.TemporaryGraphic.GetBoundingBox(System.Boolean,ABB.Robotics.Math.Vector3@,ABB.Robotics.Math.Vector3@)"></member>
    <member name="M:ABB.Robotics.RobotStudio.Stations.Forms.TemporaryGraphic.Highlight(System.Boolean)">
      <summary>
            Highlights this object using the default highlight color and style for selections.
            </summary>
      <param name="highlight">True if the object should be highlighted, False to turn the highlighting off.</param>
    </member>
    <member name="M:ABB.Robotics.RobotStudio.Stations.Forms.TemporaryGraphic.Highlight(System.Boolean,System.Drawing.Color)">
      <summary>
            Highlights this object in the specified color.
            </summary>
      <param name="highlight">True if the object should be highlighted, False to turn the highlighting off.</param>
      <param name="color">Highlight color</param>
    </member>
    <member name="P:ABB.Robotics.RobotStudio.Stations.Forms.TemporaryGraphic.Matrix"></member>
    <member name="P:ABB.Robotics.RobotStudio.Stations.Forms.TemporaryGraphic.Pickable"></member>
    <member name="P:ABB.Robotics.RobotStudio.Stations.Forms.TemporaryGraphic.Tag"></member>
    <member name="P:ABB.Robotics.RobotStudio.Stations.Forms.TemporaryGraphic.Text">
      <summary>
            Sets the text of this TemporaryGraphic object
            </summary>
    </member>
    <member name="P:ABB.Robotics.RobotStudio.Stations.Forms.TemporaryGraphic.Topmost"></member>
    <member name="M:ABB.Robotics.RobotStudio.Stations.Forms.TemporaryGraphic.UpdateParticleSystem(ABB.Robotics.RobotStudio.Stations.ParticleSystemData)"></member>
    <member name="P:ABB.Robotics.RobotStudio.Stations.Forms.TemporaryGraphic.Visible"></member>
    <member name="T:ABB.Robotics.RobotStudio.Stations.Forms.TemporaryGraphicCollection">
      <summary>
            A collection of <see cref="T:ABB.Robotics.RobotStudio.Stations.Forms.TemporaryGraphic" /> objects.
            </summary>
    </member>
    <member name="M:ABB.Robotics.RobotStudio.Stations.Forms.TemporaryGraphicCollection.CopyTo(ABB.Robotics.RobotStudio.Stations.Forms.TemporaryGraphic[],System.Int32)"></member>
    <member name="M:ABB.Robotics.RobotStudio.Stations.Forms.TemporaryGraphicCollection.CopyTo(System.Array,System.Int32)"></member>
    <member name="P:ABB.Robotics.RobotStudio.Stations.Forms.TemporaryGraphicCollection.Count"></member>
    <member name="M:ABB.Robotics.RobotStudio.Stations.Forms.TemporaryGraphicCollection.DrawArc(ABB.Robotics.Math.Matrix4,System.Double,System.Double,System.Double,System.Double,System.Drawing.Color)">
      <summary>
            Creates an arc.
            </summary>
      <param name="center">The position and orientation of the arc. The arc is created
            in the z=0 plane.</param>
      <param name="radius">The radius of the arc.</param>
      <param name="startAngle">The start angle (relative to the x-axis) of the arc</param>
      <param name="endAngle">The end angle (relative to the x-axis) of the arc</param>
      <param name="width">The line width of the arc, in pixels.</param>
      <param name="color">The color of the arc.</param>
      <returns />
    </member>
    <member name="M:ABB.Robotics.RobotStudio.Stations.Forms.TemporaryGraphicCollection.DrawArrow(ABB.Robotics.Math.Vector3,ABB.Robotics.Math.Vector3,System.Double,System.Double,System.Drawing.Color)">
      <summary>
            Creates an arrow.
            </summary>
      <param name="start">The start (tip) of the arrow.</param>
      <param name="end">The end of the arrow.</param>
      <param name="tipLength">The length of the arrow tip</param>
      <param name="width">The line width of the arrow, in pixels.</param>
      <param name="color">The color of the arrow.</param>
    </member>
    <member name="M:ABB.Robotics.RobotStudio.Stations.Forms.TemporaryGraphicCollection.DrawBox(ABB.Robotics.Math.Matrix4,ABB.Robotics.Math.Vector3,System.Drawing.Color)">
      <summary>
            Creates a box.
            </summary>
      <param name="origin">The position and orientation of the corner of the box.</param>
      <param name="size">The size of the box in x, y and z directions.</param>
      <param name="color">The color of the box.</param>
      <returns />
    </member>
    <member name="M:ABB.Robotics.RobotStudio.Stations.Forms.TemporaryGraphicCollection.DrawCircle(ABB.Robotics.Math.Matrix4,System.Double,System.Double,System.Drawing.Color)">
      <summary>
            Creates a circle.
            </summary>
      <param name="center">The position and orientation of the circle. The circle is created
            in the z=0 plane.</param>
      <param name="radius">The radius of the circle.</param>
      <param name="width">The line width of the circle, in pixels.</param>
      <param name="color">The color of the circle.</param>
      <returns />
    </member>
    <member name="M:ABB.Robotics.RobotStudio.Stations.Forms.TemporaryGraphicCollection.DrawCone(ABB.Robotics.Math.Matrix4,System.Double,System.Double,System.Drawing.Color)">
      <summary>
            Creates a cone.
            </summary>
      <param name="center">The position and orientation of the cone. The base of the cone
            will be in the z=0 plane.</param>
      <param name="radius">The radius of the base.</param>
      <param name="height">The height of the cone.</param>
      <param name="color">The color of the cone.</param>
      <returns />
    </member>
    <member name="M:ABB.Robotics.RobotStudio.Stations.Forms.TemporaryGraphicCollection.DrawCylinder(ABB.Robotics.Math.Matrix4,System.Double,System.Double,System.Drawing.Color)">
      <summary>
            Creates a cylinder.
            </summary>
      <param name="center">The position and orientation of the cylinder. The base of the
            cylinder will be in the z=0 plane.</param>
      <param name="radius">The radius of the cylinder.</param>
      <param name="height">The height of the cylinder.</param>
      <param name="color">The color of the cylinder.</param>
      <returns />
    </member>
    <member name="M:ABB.Robotics.RobotStudio.Stations.Forms.TemporaryGraphicCollection.DrawFrame(ABB.Robotics.Math.Matrix4,System.Double,System.Double)">
      <summary>
            Creates a color-coded frame representing a coordinate system
            </summary>
      <param name="origin">The position and orientation of the frame</param>
      <param name="size">The size of the frame.</param>
      <param name="width">The line width of the frame, in pixels.</param>
      <returns />
    </member>
    <member name="M:ABB.Robotics.RobotStudio.Stations.Forms.TemporaryGraphicCollection.DrawLine(ABB.Robotics.Math.Vector3,ABB.Robotics.Math.Vector3,System.Double,System.Drawing.Color)">
      <summary>
            Creates a line.
            </summary>
      <param name="start">The start of the line.</param>
      <param name="end">The end of the line</param>
      <param name="width">The width of the line, in pixels.</param>
      <param name="color">The color of the line.</param>
    </member>
    <member name="M:ABB.Robotics.RobotStudio.Stations.Forms.TemporaryGraphicCollection.DrawMarker(ABB.Robotics.Math.Vector3,System.Double,System.Double,System.Boolean,System.Drawing.Color)">
      <summary>
            Creates a fixed size Marker
            </summary>
      <param name="point">The position of the center point of the Marker</param>
      <param name="size">The size of the Marker.</param>
      <param name="width">The line width of the Marker, in pixels.</param>
      <param name="fixedSize">The fixed size of the Marker.</param>
      <param name="color">The color of the Marker.</param>
      <returns />
    </member>
    <member name="M:ABB.Robotics.RobotStudio.Stations.Forms.TemporaryGraphicCollection.DrawMesh(ABB.Robotics.Math.Matrix4,ABB.Robotics.RobotStudio.Stations.MeshPart)">
      <summary>
            Draws a mesh.
            </summary>
      <param name="origin">The position and orientation of the mesh.</param>
      <param name="mesh">The mesh.</param>
      <returns></returns>
    </member>
    <member name="M:ABB.Robotics.RobotStudio.Stations.Forms.TemporaryGraphicCollection.DrawPart(ABB.Robotics.Math.Matrix4,ABB.Robotics.RobotStudio.Stations.Part)">
      <summary>
            Adds an existing part.
            </summary>
      <param name="origin">The position and orientation of the part.</param>
      <param name="part">The part to add.</param>
      <returns />
    </member>
    <member name="M:ABB.Robotics.RobotStudio.Stations.Forms.TemporaryGraphicCollection.DrawPart(ABB.Robotics.Math.Matrix4,ABB.Robotics.RobotStudio.Stations.Part,System.Double)">
      <summary>
            Adds an existing part with an added transparency.
            </summary>
      <param name="origin">The position and orientation of the part.</param>
      <param name="part">The part to add.</param>
      <param name="opacity">Relative opacity, where 0 is completely transparent and
            1 is the original material.</param>
      <returns />
    </member>
    <member name="M:ABB.Robotics.RobotStudio.Stations.Forms.TemporaryGraphicCollection.DrawParticleSystem(ABB.Robotics.Math.Matrix4,ABB.Robotics.RobotStudio.Stations.ParticleSystemData)">
      <summary>
            Creates a particle system.
            </summary>
      <param name="origin"></param>
      <param name="data"></param>
      <returns></returns>
    </member>
    <member name="M:ABB.Robotics.RobotStudio.Stations.Forms.TemporaryGraphicCollection.DrawPointCloud(ABB.Robotics.Math.Matrix4,ABB.Robotics.Math.Vector3[],System.Drawing.Color,System.Double)">
      <summary>
            Creates a point cloud.
            </summary>
      <param name="origin">The position and orientation of the point cloud.</param>
      <param name="points">The position of the points (relative to origin).</param>
      <param name="color">Color of the points.</param>
      <param name="pointSize">Point size (in pixels).</param>
      <returns></returns>
    </member>
    <member name="M:ABB.Robotics.RobotStudio.Stations.Forms.TemporaryGraphicCollection.DrawPointCloud(ABB.Robotics.Math.Matrix4,ABB.Robotics.Math.Vector3[],System.Drawing.Color[],System.Double)">
      <summary>
            Creates a point cloud.
            </summary>
      <param name="origin">The position and orientation of the point cloud.</param>
      <param name="points">The position of the points (relative to origin).</param>
      <param name="colors">Colors of the points. Must have the same number of elements as points.</param>
      <param name="pointSize">Point size (in pixels).</param>
      <returns></returns>
    </member>
    <member name="M:ABB.Robotics.RobotStudio.Stations.Forms.TemporaryGraphicCollection.DrawPyramid(ABB.Robotics.Math.Matrix4,System.Double,System.Double,System.Int32,System.Drawing.Color)">
      <summary>
            Creates a pyramid.
            </summary>
      <param name="center">The position and orientation of the pyramid. The base of the
            pyramid will be in the z=0 plane.</param>
      <param name="radius">The radius of the pyramid.</param>
      <param name="height">The height of the pyramid.</param>
      <param name="numSides">The number of sides in the pyramid.</param>
      <param name="color">The color of the pyramid.</param>
      <returns />
    </member>
    <member name="M:ABB.Robotics.RobotStudio.Stations.Forms.TemporaryGraphicCollection.DrawSphere(ABB.Robotics.Math.Vector3,System.Double,System.Drawing.Color)">
      <summary>
            Creates a sphere.
            </summary>
      <param name="center">The position of the sphere.</param>
      <param name="radius">The radius of the sphere.</param>
      <param name="color">The color of the sphere.</param>
      <returns />
    </member>
    <member name="M:ABB.Robotics.RobotStudio.Stations.Forms.TemporaryGraphicCollection.DrawSurfaceCircle(ABB.Robotics.Math.Matrix4,System.Double,System.Drawing.Color)">
      <summary>
            Creates a surface circle
            </summary>
      <param name="origin">The position (center-point) and orientation of the circle.</param>
      <param name="radius">The radius of the circle.</param>
      <param name="color">The color of circle.</param>
      <returns />
    </member>
    <member name="M:ABB.Robotics.RobotStudio.Stations.Forms.TemporaryGraphicCollection.DrawSurfaceRectangle(ABB.Robotics.Math.Matrix4,System.Double,System.Double,System.Drawing.Color)">
      <summary>
            Creates a surface rectangle
            </summary>
      <param name="origin">The position (lower-left corner) and orientation of the rectangle.</param>
      <param name="width">The width of the rectangle.</param>
      <param name="height">The height of the rectangle.</param>
      <param name="color">The color of rectangle.</param>
      <returns />
    </member>
    <member name="M:ABB.Robotics.RobotStudio.Stations.Forms.TemporaryGraphicCollection.DrawText(ABB.Robotics.Math.Vector3,System.String)">
      <summary>
            Creates a text markup.
            </summary>
      <param name="start">The position of the lower left corner of the text box.</param>
      <param name="text">The text to display.</param>
      <returns />
    </member>
    <member name="M:ABB.Robotics.RobotStudio.Stations.Forms.TemporaryGraphicCollection.DrawTexturedRectangle(ABB.Robotics.Math.Matrix4,System.Double,System.Double,System.Drawing.Bitmap)">
      <summary>
            Creates a textured rectangle
            </summary>
      <param name="origin">The position (lower-left corner) and orientation of the rectangle.</param>
      <param name="width">The width of the rectangle.</param>
      <param name="height">The height of the rectangle.</param>
      <param name="texture">The texture to apply to the rectangle.</param>
      <returns />
    </member>
    <member name="M:ABB.Robotics.RobotStudio.Stations.Forms.TemporaryGraphicCollection.DrawTrace(ABB.Robotics.Math.Vector3,System.Double,System.Double)">
      <summary>
            Creates a trace, e.g. a set of contiguous line segments that follows a path of points.
            </summary>
      <param name="start">The start point of the trace.</param>
      <param name="width">The width of the trace lines (in pixels).</param>
      <param name="maxLength">The maximum length of the trace.</param>
      <returns />
    </member>
    <member name="M:ABB.Robotics.RobotStudio.Stations.Forms.TemporaryGraphicCollection.GetEnumerator">
      <summary>
            Returns an enumerator that can be used to iterate through this TemporaryGraphicCollection object.
            </summary>
      <returns>
            An IEnumerator object that represents this TemporaryGraphicCollection object.
            </returns>
    </member>
    <member name="P:ABB.Robotics.RobotStudio.Stations.Forms.TemporaryGraphicCollection.IsSynchronized"></member>
    <member name="P:ABB.Robotics.RobotStudio.Stations.Forms.TemporaryGraphicCollection.Item(System.Int32)"></member>
    <member name="M:ABB.Robotics.RobotStudio.Stations.Forms.TemporaryGraphicCollection.Remove(ABB.Robotics.RobotStudio.Stations.Forms.TemporaryGraphic)">
      <summary>
            Removes a TemporaryGraphic object from this TemporaryGraphicCollection object.
            </summary>
      <param name="temporaryGraphic">The TemporaryGraphic object to be removed.</param>
      <exception cref="T:System.InvalidOperationException">
            The TemporaryGraphic object has not been added to the collection.</exception>
    </member>
    <member name="M:ABB.Robotics.RobotStudio.Stations.Forms.TemporaryGraphicCollection.RemoveAll">
      <summary>
            Removes all TemporaryGraphic objects from this TemporaryGraphicCollection object.
            </summary>
    </member>
    <member name="P:ABB.Robotics.RobotStudio.Stations.Forms.TemporaryGraphicCollection.SyncRoot"></member>
    <member name="M:ABB.Robotics.RobotStudio.Stations.Forms.TemporaryGraphicCollection.Update">
      <summary>
            Updates the graphics to reflect all changes
            </summary>
    </member>
  </members>
</doc>